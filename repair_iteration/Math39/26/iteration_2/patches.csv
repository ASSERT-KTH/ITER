bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  ';'  expected	34	None	replace
2	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
3	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  hNew);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
4	[BUG]  [BUGGY]  if(scale  ==  null  ||  scale.length  <  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||  scale.length  <  1)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||  scale.length  <  1)  {	  if(scale    ==    null    ||    scale.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
5	[BUG]  [BUGGY]  if(scale  ==  null  ||  scale.length  <  1  ||  scale.length  <  2)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||  scale.length  <  1  ||  scale.length  <  2)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||  scale.length  <  1  ||  scale.length  <  2)  {	  if(scale    ==    null    ||    scale.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
6	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
7	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
8	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
9	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
10	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[length];  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[length];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[length];	  double[][]    scale    =    new    double[length];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
11	[BUG]  [BUGGY]  int[][]  scale  =  new  int[length];  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  int[][]  scale  =  new  int[length];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	int[][]  scale  =  new  int[length];	  double[][]    scale    =    new    double[length];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
12	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
13	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(secondTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(secondTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(secondTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
14	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
15	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
16	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  vecAbsoluteTolerance,  t);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  vecAbsoluteTolerance,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  vecAbsoluteTolerance,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
17	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance,  factor);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance,  factor);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance,  factor);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
18	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  if(scale  ==  null  ||  vecRelativeTolerance!=  null)  {  [CE]  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||  vecRelativeTolerance!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||  vecRelativeTolerance!=  null)  {	  if(scalAbsoluteTolerance    ==    null    ||    vecRelativeTolerance!=    null)    {    	non-compiled	[CE]  	30	None	replace
22	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  scale.length!=  0)  {  [CE]  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  scale.length!=  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scalAbsoluteTolerance  ==  null  ||  scale.length!=  0)  {	  if(scalAbsoluteTolerance    ==    null    ||    vecRelativeTolerance!=    null)    {    	non-compiled	[CE]  	30	None	replace
23	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);  [CE]  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	77	None	replace
24	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	77	None	replace
25	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	77	None	replace
26	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	77	None	replace
27	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance,  t);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    hNew,    y,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  ';'  expected	69	None	replace
28	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance,  t);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    hNew,    y,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  ';'  expected	69	None	replace
29	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	75	None	replace
30	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	75	None	replace
31	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	75	None	replace
32	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	75	None	replace
33	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	59	None	replace
34	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	59	None	replace
35	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	59	None	replace
36	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	59	None	replace
37	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	62	None	replace
38	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	16	None	replace
39	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(nextIsLast,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(nextIsLast,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(nextIsLast,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	16	None	replace
40	[BUG]  [BUGGY]  if(scale!=  null  ||  scale.length  >  0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  ||  scale.length  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  ||  scale.length  >  0)  {	  if(scale!=    null    &&    scale.length    >    0)    {    	non-compiled	[CE]  ';'  expected	72	None	replace
41	[BUG]  [BUGGY]  if(scale  ==  null  ||  scale.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||  scale.length  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||  scale.length  >  0)  {	  if(scale!=    null    &&    scale.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
42	[BUG]  [BUGGY]  if(scale!=  null  &&  scale.length  >  1)  {  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  &&  scale.length  >  1)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  &&  scale.length  >  1)  {	  if(scale!=    null    &&    scale.length    >    0)    {    	non-compiled	[CE]  ';'  expected	72	None	replace
43	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	78	None	replace
44	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew,  scale[0],  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew,  scale[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew,  scale[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	78	None	replace
45	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	78	None	replace
46	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	12	None	replace
47	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  b,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  b,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  b,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	12	None	replace
48	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	12	None	replace
49	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  ';'  expected	36	None	replace
50	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  ';'  expected	36	None	replace
51	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  ';'  expected	36	None	replace
52	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
53	[BUG]  [BUGGY]  if(filteredNextIsLast!=  null  ||  scale.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(filteredNextIsLast!=  null  ||  scale.length  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(filteredNextIsLast!=  null  ||  scale.length  >  0)  {	  if(scale!=    null    ||    filteredNextIsLast)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
54	[BUG]  [BUGGY]  if(filteredNextIsLast  ==  null  ||  scale.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(filteredNextIsLast  ==  null  ||  scale.length  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(filteredNextIsLast  ==  null  ||  scale.length  >  0)  {	  if(scale!=    null    ||    filteredNextIsLast)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
55	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
56	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
57	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
58	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  max,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  max,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  max,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
59	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  hNew,  yDotK[0],  yTmp);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  hNew,  yDotK[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  hNew,  yDotK[0],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
60	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  yTmp[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  yTmp[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  yTmp[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yTmp[0],    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
61	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yTmp[0],    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
62	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  yTmp[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  yTmp[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  yTmp[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yTmp[0],    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
63	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  stepStart,  t);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  stepStart,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  stepStart,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    vecAbsoluteTolerance,    y,    stepStart,    t);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
64	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  stepStart,  t);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  stepStart,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  stepStart,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    vecAbsoluteTolerance,    y,    stepStart,    t);    	non-compiled	[CE]  ';'  expected	71	None	replace
65	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  hNew,  y,  stepStart,  t);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  hNew,  y,  stepStart,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  hNew,  y,  stepStart,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    vecAbsoluteTolerance,    y,    stepStart,    t);    	non-compiled	[CE]  ';'  expected	71	None	replace
66	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  t);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    vecAbsoluteTolerance,    y,    stepStart,    t);    	non-compiled	[CE]  ';'  expected	71	None	replace
67	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[runSetDimension];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[runSetDimension];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[runSetDimension];	  final    double[][]    scale    =    new    double[outputSetDimension];    	non-compiled	[CE]  ';'  expected	26	None	replace
68	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[outputSetDimension  -  1];  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[outputSetDimension  -  1];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[outputSetDimension  -  1];	  final    double[][]    scale    =    new    double[outputSetDimension];    	non-compiled	[CE]  ';'  expected	26	None	replace
69	[BUG]  [BUGGY]  if(scale  ==  null  ||!filteredNextT)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||!filteredNextT)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||!filteredNextT)  {	  if(scale    ==    null    ||!fsal)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
70	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[scaleAbsoluteTolerance];  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[scaleAbsoluteTolerance];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[scaleAbsoluteTolerance];	  double[][]    scale    =    new    double[scaleAbsoluteTolerance];    	non-compiled	[CE]  ';'  expected	50	None	replace
71	[BUG]  [BUGGY]  int[][]  scale  =  new  int[mainSetDimension];  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  int[][]  scale  =  new  int[mainSetDimension];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	int[][]  scale  =  new  int[mainSetDimension];	  double[][]    scale    =    new    double[scaleAbsoluteTolerance];    	non-compiled	[CE]  ';'  expected	50	None	replace
72	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(hNew,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(hNew,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(hNew,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(hNew,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	13	None	replace
73	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(hNew,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	13	None	replace
74	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(hNew,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	13	None	replace
75	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [CE]  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	38	None	replace
76	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	38	None	replace
77	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yDotK[1]);  [CE]  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    vNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	63	None	replace
78	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vNew,  scale[0],  yDotK[1]);  [CE]  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vNew,  scale[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vNew,  scale[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    vNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	63	None	replace
79	[BUG]  [BUGGY]  if(filteredNextIsLast  ||  scale  ==  null)  {  [CE]  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(filteredNextIsLast  ||  scale  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(filteredNextIsLast  ||  scale  ==  null)  {	  if(scale    ==    null    ||    filteredNextIsLast)    {    	non-compiled	[CE]  	81	None	replace
80	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  [CE]  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(filteredNextIsLast)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(filteredNextIsLast)  {	  if(scale    ==    null    ||    filteredNextIsLast)    {    	non-compiled	[CE]  	81	None	replace
81	[BUG]  [BUGGY]  if(scale  ==  null  ||  filteredNextIsLast  ||  scale.length  <  2)  {  [CE]  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||  filteredNextIsLast  ||  scale.length  <  2)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||  filteredNextIsLast  ||  scale.length  <  2)  {	  if(scale    ==    null    ||    filteredNextIsLast)    {    	non-compiled	[CE]  	81	None	replace
82	[BUG]  [BUGGY]  if(scale  ==  null  ||  scale.length  ==  0)  {  [CE]  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||  scale.length  ==  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||  scale.length  ==  0)  {	  if(scalAbsoluteTolerance    ==    null    ||    scale.length    ==    0)    {    	non-compiled	[CE]  	31	None	replace
83	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  scale.length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  scale.length  ==  1)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scalAbsoluteTolerance  ==  null  ||  scale.length  ==  1)  {	  if(scalAbsoluteTolerance    ==    null    ||    scale.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
84	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  factor);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  factor);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  factor);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    factor);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
85	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    factor);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
86	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  x,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  x,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  x,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    x,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
87	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  x,  y,  hNew[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  x,  y,  hNew[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  x,  y,  hNew[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    x,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
88	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
89	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
90	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  vecAbsoluteTolerance);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    vecAbsoluteTolerance);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
91	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    vecAbsoluteTolerance);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
92	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
93	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
94	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
95	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
96	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
97	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
98	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
99	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
100	[BUG]  [BUGGY]  if(scale  ==  null  ||  scale.length  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||  scale.length  ==  2)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||  scale.length  ==  2)  {	  if(scale!=    null    ||    scale.length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
101	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[stepStart];  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[stepStart];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[stepStart];	  double[][]    scale    =    new    double[stepStart];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
102	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
103	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
104	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    vecAbsoluteTolerance);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
105	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
106	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
107	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  vecAbsoluteTolerance,  nextT);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  vecAbsoluteTolerance,  nextT);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  vecAbsoluteTolerance,  nextT);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    vecAbsoluteTolerance,    nextT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
108	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  hNew);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    vecAbsoluteTolerance,    nextT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
109	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  firstTime);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  firstTime);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  firstTime);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    vecAbsoluteTolerance,    nextT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
110	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    vecAbsoluteTolerance,    nextT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
111	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
112	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yDotTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yDotTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yDotTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
114	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
115	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
116	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  b,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  b,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  b,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	51	None	replace
117	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
118	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
119	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[1],  yTmp);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[1],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[1],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
120	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
121	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[double[2];  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[double[2];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[double[2];	  final    double[][]    scale    =    new    double[double[mainSetDimension];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
122	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[double[1];  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[double[1];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[double[1];	  final    double[][]    scale    =    new    double[double[mainSetDimension];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
123	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[double[0];  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[double[0];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[double[0];	  final    double[][]    scale    =    new    double[double[mainSetDimension];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
124	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[double[length];  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[double[length];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[double[length];	  final    double[][]    scale    =    new    double[double[mainSetDimension];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
125	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
126	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
127	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    filteredNextIsLast,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
128	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  vNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  vNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  vNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    filteredNextIsLast,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
129	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    filteredNextIsLast,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
130	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[scala.length];  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[scala.length];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[scala.length];	  double[][]    scale    =    new    double[scala.length];    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
131	[BUG]  [BUGGY]  [][]  scale  =  new  double[mainSetDimension];  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  [][]  scale  =  new  double[mainSetDimension];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	[][]  scale  =  new  double[mainSetDimension];	  double[][]    scale    =    new    double[scala.length];    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
132	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
133	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
134	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(hNew,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
135	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(nextIsLast,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(nextIsLast,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(nextIsLast,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(hNew,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
136	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
137	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  t,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  t,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  t,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
138	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
139	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  hNew);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    minGrowth,    y,    yDotK[0],    yTmp,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
140	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  yDotK[1],  yTmp,  hNew);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  yDotK[1],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  yDotK[1],  yTmp,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    minGrowth,    y,    yDotK[0],    yTmp,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
141	[BUG]  [BUGGY]  if(filteredNextIsLast  ||  scale.length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(filteredNextIsLast  ||  scale.length  ==  1)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(filteredNextIsLast  ||  scale.length  ==  1)  {	  if(scale    ==    null    ||!filteredNextIsLast)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
142	[BUG]  [BUGGY]  if(scale!=  null  ||  scale.length  <  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  ||  scale.length  <  1)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  ||  scale.length  <  1)  {	  if(scale!=    null    ||    scale.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
143	[BUG]  [BUGGY]  if(scale!=  null  ||  scale.length  <  1  ||  scale.length  <  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  ||  scale.length  <  1  ||  scale.length  <  2)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  ||  scale.length  <  1  ||  scale.length  <  2)  {	  if(scale!=    null    ||    scale.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
144	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  t);  [CE]  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  t);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  	44	None	replace
145	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance,  t);  [CE]  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance,  t);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  	44	None	replace
146	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  firstTime);  [CE]  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  firstTime);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  firstTime);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  	44	None	replace
147	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  hNew);  [CE]  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  hNew);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  	44	None	replace
148	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	2	None	replace
149	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	2	None	replace
150	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	2	None	replace
151	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  maxGrow,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  maxGrow,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  maxGrow,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	2	None	replace
152	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  error);  [CE]  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  error);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  error);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    hNew);    	non-compiled	[CE]  	70	None	replace
153	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);  [CE]  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	61	None	replace
154	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  bNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  bNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  bNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	61	None	replace
155	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);  [CE]  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	61	None	replace
156	[BUG]  [BUGGY]  if(scale!=  null  ||  scale.length  ==  0)  {  [CE]  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  ||  scale.length  ==  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  ||  scale.length  ==  0)  {	  if(vecRelativeTolerance    ==    null    ||    scale.length    ==    0)    {    	non-compiled	[CE]  	76	None	replace
157	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[stepSetDimension];  [CE]  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[stepSetDimension];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[stepSetDimension];	  double[][]    scale    =    new    double[stepSetDimension];    	non-compiled	[CE]  	68	None	replace
158	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance);  [CE]  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance);    	non-compiled	[CE]  	24	None	replace
159	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance);  [CE]  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance);    	non-compiled	[CE]  	24	None	replace
160	[BUG]  [BUGGY]  if(scale  ==  null  ||  scale.length  ==  1)  {  [CE]  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||  scale.length  ==  1)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||  scale.length  ==  1)  {	  if(scale!=    null    ||    scale.length    ==    1)    {    	non-compiled	[CE]  	5	None	replace
161	[BUG]  [BUGGY]  if(scale  ==  null  ||  scalAbsoluteTolerance  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||  scalAbsoluteTolerance  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||  scalAbsoluteTolerance  ==  null)  {	  if(scale    ==    null    ||    vecRelativeTolerance    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
162	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
163	[BUG]  [BUGGY]  if(filteredNextIsLast  ||  scale!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(filteredNextIsLast  ||  scale!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(filteredNextIsLast  ||  scale!=  null)  {	  if(scale!=    null    ||!filteredNextIsLast)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
164	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[1],  yTmp);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[1],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[1],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    yDotK[1],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
165	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  yDotK[1],  yTmp);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  yDotK[1],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  hNew,  yDotK[1],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    yDotK[1],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
166	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew,  yDotK[1],  yTmp);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew,  yDotK[1],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew,  yDotK[1],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    yDotK[1],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
167	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  hNew);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
168	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[size];  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[size];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[size];	  final    double[][]    scale    =    new    double[mainSetDimension];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
169	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
170	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotK[0],  hNew);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotK[0],  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotK[0],  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
171	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  t);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
172	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
173	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
174	[BUG]  [BUGGY]  if(scale!=  null  ||  vecRelativeTolerance  ==  null)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  ||  vecRelativeTolerance  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  ||  vecRelativeTolerance  ==  null)  {	  if(scalAbsoluteTolerance!=    null    ||    vecRelativeTolerance    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
175	[BUG]  [BUGGY]  if(scale!=  null  ||!filteredNextT)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  ||!filteredNextT)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  ||!filteredNextT)  {	  if(scale!=    null    ||!fsal)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
176	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance,  factor);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance,  factor);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance,  factor);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
177	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance,  t);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
178	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance,  t);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
179	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
180	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
181	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(x,  out,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(x,  out,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(x,  out,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
182	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
183	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew[0],  yDotK[1]);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
184	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew[0],  yDotTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew[0],  yDotTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  hNew[0],  yDotTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
185	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  factor,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
186	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  factor,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
187	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  error,  x,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  error,  x,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  error,  x,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
188	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  factor,  yNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
189	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
190	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
191	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
192	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    minGrowth,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
193	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  hNew[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  hNew[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  hNew[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    minGrowth,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
194	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[double[3];  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[double[3];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[double[3];	  final    double[][]    scale    =    new    double[double[mainSetDimension];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
195	[BUG]  [BUGGY]  long[][]  scale  =  new  long[mainSetDimension];  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  long[][]  scale  =  new  long[mainSetDimension];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	long[][]  scale  =  new  long[mainSetDimension];	  double[][]    scale    =    new    double[length];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
196	[BUG]  [BUGGY]  if(vecRelativeTolerance  ==  null  ||  scale.length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(vecRelativeTolerance  ==  null  ||  scale.length  ==  1)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(vecRelativeTolerance  ==  null  ||  scale.length  ==  1)  {	  if(vecRelativeTolerance    ==    null    ||    scale.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
197	[BUG]  [BUGGY]  if(vecRelativeTolerance  ==  null  ||  scale.length  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(vecRelativeTolerance  ==  null  ||  scale.length  ==  2)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(vecRelativeTolerance  ==  null  ||  scale.length  ==  2)  {	  if(vecRelativeTolerance    ==    null    ||    scale.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
198	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
199	[BUG]  [BUGGY]  if(scale!=  null  &&  filteredNextIsLast)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  &&  filteredNextIsLast)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  &&  filteredNextIsLast)  {	  if(scale!=    null    ||    filteredNextIsLast)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
200	[BUG]  [BUGGY]  if(filteredNextIsLast!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(filteredNextIsLast!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(filteredNextIsLast!=  null)  {	  if(scale!=    null    ||    filteredNextIsLast)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
201	[BUG]  [BUGGY]  if(scale!=  null  ||!firstTime)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  ||!firstTime)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  ||!firstTime)  {	  if(scale!=    null    ||!fsal)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
202	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
203	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
204	[BUG]  [BUGGY]  Double[][]  scale  =  new  double[mainSetDimension];  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  Double[][]  scale  =  new  double[mainSetDimension];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	Double[][]  scale  =  new  double[mainSetDimension];	  double[][]    scale    =    new    double[stepStart];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
205	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
206	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
207	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[outputSetDimension  +  1];  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[outputSetDimension  +  1];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[outputSetDimension  +  1];	  final    double[][]    scale    =    new    double[outputSetDimension];    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
208	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y0,  hNew,  vecAbsoluteTolerance,  t);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y0,  hNew,  vecAbsoluteTolerance,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y0,  hNew,  vecAbsoluteTolerance,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
209	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
210	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
211	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  minGrowth);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  minGrowth);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  minGrowth);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    minGrowth,    y,    yDotK[0],    yTmp,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
212	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  maxGrowth,  y,  yDotK[0],  yTmp,  hNew);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  maxGrowth,  y,  yDotK[0],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  maxGrowth,  y,  yDotK[0],  yTmp,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    minGrowth,    y,    yDotK[0],    yTmp,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
213	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
214	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
215	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
216	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
217	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
218	[BUG]  [BUGGY]  double[][]  scale  =  new  double[outputSetDimension];  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  double[][]  scale  =  new  double[outputSetDimension];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	double[][]  scale  =  new  double[outputSetDimension];	  double[][]    scale    =    new    double[stepSetDimension];    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
219	[BUG]  [BUGGY]  if(scale  ==  null  &&  scale.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  &&  scale.length  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  &&  scale.length  >  0)  {	  if(scale!=    null    &&    scale.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
220	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
221	[BUG]  [BUGGY]  if(scale!=  null  &&!filteredNextIsLast)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  &&!filteredNextIsLast)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  &&!filteredNextIsLast)  {	  if(scale!=    null    ||!filteredNextIsLast)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
222	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
223	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  hNew);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
224	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vNew,  scale[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vNew,  scale[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vNew,  scale[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    vNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
225	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    vNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
226	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance,  next);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance,  next);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  vecAbsoluteTolerance,  next);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
227	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
228	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
229	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  yDotK[1],  yTmp);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  yDotK[1],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  yDotK[1],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
230	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  hNew);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
231	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yTmp[0],    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
232	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yTmp[0],    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
233	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotTmp[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotTmp[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotTmp[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yTmp[0],    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
234	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
235	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  hNew);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  hNew);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
236	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotK[0],  hNew,  vecAbsoluteTolerance);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotK[0],  hNew,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotK[0],  hNew,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    vecAbsoluteTolerance);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
237	[BUG]  [BUGGY]  if(scale  ==  null  ||  vecAbsoluteTolerance  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||  vecAbsoluteTolerance  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||  vecAbsoluteTolerance  ==  null)  {	  if(scale    ==    null    ||    vecRelativeTolerance    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
238	[BUG]  [BUGGY]  if(scale!=  null  ||  vecAbsoluteTolerance  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  ||  vecAbsoluteTolerance  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  ||  vecAbsoluteTolerance  ==  null)  {	  if(scale    ==    null    ||    vecRelativeTolerance    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
239	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  t,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  t,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  t,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
240	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  b,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  b,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  b,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
241	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
242	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
243	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  b,  vecAbsoluteTolerance);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  b,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  b,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    vecAbsoluteTolerance);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
244	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[dimension];  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[dimension];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[dimension];	  final    double[][]    scale    =    new    double[mainSetDimension];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
245	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  yDotK[1],  yTmp);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  yDotK[1],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  yDotK[1],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    yDotK[1],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
246	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  x,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  x,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  x,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    x,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
247	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
248	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
249	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
250	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
251	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
252	[BUG]  [BUGGY]  if(scale!=  null  &&  scale.length  <  2)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  &&  scale.length  <  2)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  &&  scale.length  <  2)  {	  if(scale!=    null    ||    scale.length    <    2)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
253	[BUG]  [BUGGY]  if(scale  ==  null  ||  scale.length!=  2)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||  scale.length!=  2)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||  scale.length!=  2)  {	  if(scale    ==    null    ||    scale.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
254	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    minGrowth,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
255	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	12	None	replace
256	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  error,  y,  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	40	None	replace
257	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  y,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  y,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  y,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
258	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
259	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
260	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  x,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  x,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  x,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
261	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  vNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  vNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew,  vNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
262	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  hNew);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
263	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
264	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yPosition,  yDotK[1]);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yPosition,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance[0],  yPosition,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
265	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  factor);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  factor);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  factor);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    factor);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
266	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  factor);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  factor);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  factor);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    factor);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
267	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  scale[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
268	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
269	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  t);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(lastTime,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  t);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
270	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
271	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
272	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yTmp);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  hNew,  yDotK[0],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
273	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  stepStart,  hNew);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  stepStart,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  stepStart,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    vecAbsoluteTolerance,    y,    stepStart,    t);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
274	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null  &&  vecRelativeTolerance  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scalAbsoluteTolerance!=  null  &&  vecRelativeTolerance  ==  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scalAbsoluteTolerance!=  null  &&  vecRelativeTolerance  ==  null)  {	  if(scalAbsoluteTolerance!=    null    ||    vecRelativeTolerance    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
275	[BUG]  [BUGGY]  if(vecRelativeTolerance  ==  null  ||  scale!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(vecRelativeTolerance  ==  null  ||  scale!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(vecRelativeTolerance  ==  null  ||  scale!=  null)  {	  if(scalAbsoluteTolerance!=    null    ||    vecRelativeTolerance    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
276	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(secondTime,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(secondTime,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(secondTime,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(hNew,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
277	[BUG]  [BUGGY]  if(scalAbsoluteTolerance!=  null  ||  vecRelativeTolerance!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scalAbsoluteTolerance!=  null  ||  vecRelativeTolerance!=  null)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scalAbsoluteTolerance!=  null  ||  vecRelativeTolerance!=  null)  {	  if(scalAbsoluteTolerance    ==    null    ||    vecRelativeTolerance!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
278	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  vecRelativeTolerance.length!=  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  vecRelativeTolerance.length!=  2)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scalAbsoluteTolerance  ==  null  ||  vecRelativeTolerance.length!=  2)  {	  if(scalAbsoluteTolerance    ==    null    ||    vecRelativeTolerance!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
279	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  stepStart,  t);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  stepStart,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  stepStart,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    vecAbsoluteTolerance,    y,    stepStart,    t);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
280	[BUG]  [BUGGY]  if(scale!=  null  ||!filteredNextIsLast  &&  scale.length  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  ||!filteredNextIsLast  &&  scale.length  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  ||!filteredNextIsLast  &&  scale.length  >  0)  {	  if(scale!=    null    ||!filteredNextIsLast)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
281	[BUG]  [BUGGY]  final  double[][]  scale  =  new  double[scale.length];  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  final  double[][]  scale  =  new  double[scale.length];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	final  double[][]  scale  =  new  double[scale.length];	  final    double[][]    scale    =    new    double[mainSetDimension];    	non-compiled	[CE]  <identifier>  expected	25	None	replace
282	[BUG]  [BUGGY]  if(scale  ==  null  ||!error)  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||!error)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||!error)  {	  if(scale    ==    null    ||!fsal)    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
283	[BUG]  [BUGGY]  Double[][]  scale  =  new  Double[mainSetDimension];  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  Double[][]  scale  =  new  Double[mainSetDimension];  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	Double[][]  scale  =  new  Double[mainSetDimension];	  double[][]    scale    =    new    double[scala.length];    	non-compiled	[CE]  <identifier>  expected	49	None	replace
284	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
285	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vNew[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  vNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
286	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  t,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  t,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  t,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
287	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  y,  yDotK[0],  yTmp,  hNew[1]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  y,  yDotK[0],  yTmp,  hNew[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  y,  yDotK[0],  yTmp,  hNew[1]);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
288	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
289	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotTmp);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yDotTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
290	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  y,  vecAbsoluteTolerance[1],  yTmp);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  y,  vecAbsoluteTolerance[1],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  y,  vecAbsoluteTolerance[1],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
291	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  yTmp,  vecAbsoluteTolerance);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  yTmp,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  yTmp,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    vecAbsoluteTolerance);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
292	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  nextIsLast);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  nextIsLast);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  nextIsLast);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    vecAbsoluteTolerance);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
293	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  error,  vecAbsoluteTolerance);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  error,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  error,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    vecAbsoluteTolerance);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
294	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
295	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  stepStart,  yDotK[1]);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  stepStart,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  stepStart,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
296	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  hNew,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
297	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  yDotK[0],  yTmp,  hNew);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  yDotK[0],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  yDotK[0],  yTmp,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
298	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  hNew);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
299	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotTmp[0],  yTmp);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotTmp[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotTmp[0],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
300	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  break,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  break,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  break,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
301	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotTmp,  vecAbsoluteTolerance,  factor);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotTmp,  vecAbsoluteTolerance,  factor);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotTmp,  vecAbsoluteTolerance,  factor);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    factor);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
302	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
303	[BUG]  [BUGGY]  if(filteredNextIsLast!=  scale.length)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(filteredNextIsLast!=  scale.length)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(filteredNextIsLast!=  scale.length)  {	  if(scale!=    null    ||    filteredNextIsLast)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
304	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
305	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance,  factor);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance,  factor);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance,  factor);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    hNew,    y,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
306	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  hNew[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
307	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  stepStart,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  stepStart,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  stepStart,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
308	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  yDotTmp,  vecAbsoluteTolerance);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  yDotTmp,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  yDotTmp,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
309	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  scalRelativeTolerance.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  scalRelativeTolerance.length  ==  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scalAbsoluteTolerance  ==  null  ||  scalRelativeTolerance.length  ==  0)  {	  if(scalAbsoluteTolerance    ==    null    ||    scale.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
310	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  vecRelativeTolerance.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  vecRelativeTolerance.length  ==  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scalAbsoluteTolerance  ==  null  ||  vecRelativeTolerance.length  ==  0)  {	  if(scalAbsoluteTolerance    ==    null    ||    scale.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
311	[BUG]  [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  vecAbsoluteTolerance.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scalAbsoluteTolerance  ==  null  ||  vecAbsoluteTolerance.length  ==  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scalAbsoluteTolerance  ==  null  ||  vecAbsoluteTolerance.length  ==  0)  {	  if(scalAbsoluteTolerance    ==    null    ||    scale.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
312	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance,  nextIsLast);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance,  nextIsLast);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance,  nextIsLast);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
313	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
314	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vNew[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vNew[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  vNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
315	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  nextT,  hNew);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  nextT,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  vecAbsoluteTolerance,  nextT,  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    error,    y,    vecAbsoluteTolerance,    nextT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
316	[BUG]  [BUGGY]  if(filteredNextIsLast  ==  scale.length  ||  filteredNextIsLast)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(filteredNextIsLast  ==  scale.length  ||  filteredNextIsLast)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(filteredNextIsLast  ==  scale.length  ||  filteredNextIsLast)  {	  if(scale    ==    null    ||    filteredNextIsLast)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
317	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  nextIsLast,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  nextIsLast,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  nextIsLast,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    minGrowth,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
318	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
319	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  y,  vecAbsoluteTolerance[0],  yDotK[1],  hNew);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  y,  vecAbsoluteTolerance[0],  yDotK[1],  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  y,  vecAbsoluteTolerance[0],  yDotK[1],  hNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
320	[BUG]  [BUGGY]  if(vecRelativeTolerance  ==  null  ||  vecAbsoluteTolerance.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(vecRelativeTolerance  ==  null  ||  vecAbsoluteTolerance.length  ==  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(vecRelativeTolerance  ==  null  ||  vecAbsoluteTolerance.length  ==  0)  {	  if(vecRelativeTolerance    ==    null    ||    scale.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
321	[BUG]  [BUGGY]  if(vecRelativeTolerance  ==  null  ||  vecRelativeTolerance.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(vecRelativeTolerance  ==  null  ||  vecRelativeTolerance.length  ==  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(vecRelativeTolerance  ==  null  ||  vecRelativeTolerance.length  ==  0)  {	  if(vecRelativeTolerance    ==    null    ||    scale.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
322	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  yDotK[0],  yTmp);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  yDotK[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  yDotK[0],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
323	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotK[0],  yTmp);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotK[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yDotK[0],  yTmp);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
324	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  yDotK[0],  yTmp,  yNew);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  yDotK[0],  yTmp,  yNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  minGrowth,  y,  yDotK[0],  yTmp,  yNew);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    minGrowth,    y,    yDotK[0],    yTmp,    hNew);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
325	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
326	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
327	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  hNew,  stepStart);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  hNew,  stepStart);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  hNew,  stepStart);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
328	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yTmp,  hNew,  vecAbsoluteTolerance,  t);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yTmp,  hNew,  vecAbsoluteTolerance,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yTmp,  hNew,  vecAbsoluteTolerance,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
329	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  stepStart,  vecAbsoluteTolerance,  t);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  stepStart,  vecAbsoluteTolerance,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  hNew,  stepStart,  vecAbsoluteTolerance,  t);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
330	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vNew[0],  yDotK[1]);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vNew[0],  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  vNew[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yDotK[1]);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
331	[BUG]  [BUGGY]  if(scale!=  null  &&!fsal)  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  &&!fsal)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  &&!fsal)  {	  if(scale!=    null    ||!fsal)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
332	[BUG]  [BUGGY]  if(scale!=  null  ||!error)  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  ||!error)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  ||!error)  {	  if(scale!=    null    ||!fsal)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
333	[BUG]  [BUGGY]  if(scale!=  null  &&  scale.length  ==  1)  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  &&  scale.length  ==  1)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  &&  scale.length  ==  1)  {	  if(scale!=    null    ||    scale.length    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
334	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew,  yDotK[0],  yTmp);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew,  yDotK[0],  yTmp);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  hNew,  yDotK[0],  yTmp);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
335	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
336	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  stepStart,  hNew,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
337	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  vecTmp,  t);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  vecTmp,  t);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  vecTmp,  t);	  filteredNextIsLast    =    initializeStep(firstTime,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
338	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  stepStart);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  stepStart);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  stepStart);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
339	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  scale,  stepStart);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  scale,  stepStart);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  scale,  stepStart);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
340	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  scale,  nextIsLast);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  scale,  nextIsLast);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  vecAbsoluteTolerance,  y,  hNew,  scale,  nextIsLast);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    hNew,    vecAbsoluteTolerance,    t);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
341	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  hNew);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  hNew);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  hNew);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
342	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(hNew,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
343	[BUG]  [BUGGY]  if(filteredNextIsLast  ||  filteredNextIsLast)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(filteredNextIsLast  ||  filteredNextIsLast)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(filteredNextIsLast  ||  filteredNextIsLast)  {	  if(scale    ==    null    ||!filteredNextIsLast)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
344	[BUG]  [BUGGY]  if(scale  ==  null  ||!filteredNextIsLast  &&  scale.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale  ==  null  ||!filteredNextIsLast  &&  scale.length  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale  ==  null  ||!filteredNextIsLast  &&  scale.length  >  0)  {	  if(scale    ==    null    ||!filteredNextIsLast)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
345	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  t,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  t,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  y,  t,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    y,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
346	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  hNew,  y,  vecAbsoluteTolerance[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    vecAbsoluteTolerance[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
347	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yTmp,  hNew,  vecAbsoluteTolerance);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yTmp,  hNew,  vecAbsoluteTolerance);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  yTmp,  hNew,  vecAbsoluteTolerance);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    hNew,    vecAbsoluteTolerance);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
348	[BUG]  [BUGGY]  if(scale!=  null  &&  scale.length  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  if(scale!=  null  &&  scale.length  ==  2)  {  [BUGGY]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	if(scale!=  null  &&  scale.length  ==  2)  {	  if(scale!=    null    ||    scale.length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
349	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  t,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];      [BUGGY]  filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  t,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	filteredNextT  =  initializeStep(out,  getOrder(),  scale,  error,  t,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(out,    getOrder(),    scale,    error,    hNew,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
