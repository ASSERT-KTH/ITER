bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  computeDerivatives(t,  y,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]  computeDerivatives(t,  y,  yDotK[0]);  [BUGGY]  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  yDotK[0]);	computeDerivatives(stepStart,  y,  yDotK[0]);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
2	[BUG]  [BUGGY]  computeDerivatives(error,  y,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]  computeDerivatives(error,  y,  yDotK[0]);  [BUGGY]  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(error,  y,  yDotK[0]);	computeDerivatives(stepStart,  y,  yDotK[0]);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
3	[BUG]  [BUGGY]  validateDerivatives(t,  y,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]  validateDerivatives(t,  y,  yDotK[0]);  [BUGGY]  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  y,  yDotK[0]);	computeDerivatives(stepStart,  y,  yDotK[0]);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
4	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]  computeDerivatives(t,  error,  yDotK[0]);  [BUGGY]  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotK[0]);	computeDerivatives(stepStart,  y,  yDotK[0]);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
5	[BUG]  [BUGGY]    [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    [BUGGY]  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	  	computeDerivatives(stepStart,  y,  yDotK[0]);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
6	[BUG]  [BUGGY]    int  stepStart  =  Math.min(stepStart,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    int  stepStart  =  Math.min(stepStart,  error);  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    int  stepStart  =  Math.min(stepStart,  error);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
7	[BUG]  [BUGGY]    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
8	[BUG]  [BUGGY]    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp[0]  =  Math.abs(yDotK[0]);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
9	[BUG]  [BUGGY]    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp  =  Math.abs(yDotK[0]);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
10	[BUG]  [BUGGY]    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    int  stepStart  =  Math.min(stepStart,  error);  yDotTmp  =  Math.abs(yDotTmp);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
11	[BUG]  [BUGGY]    int  stepStart  =  Math.min(error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    int  stepStart  =  Math.min(error,  yDotK[0]);  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    int  stepStart  =  Math.min(error,  yDotK[0]);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
12	[BUG]  [BUGGY]    int  stepStart  =  Math.min(error,  yDotTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    int  stepStart  =  Math.min(error,  yDotTmp.length);  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    int  stepStart  =  Math.min(error,  yDotTmp.length);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
13	[BUG]  [BUGGY]    int  stepStart  =  Math.min(error,  yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    int  stepStart  =  Math.min(error,  yDotK[1]);  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    int  stepStart  =  Math.min(error,  yDotK[1]);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
14	[BUG]  [BUGGY]    filteredNextIsLast  =  Math.abs(error);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    filteredNextIsLast  =  Math.abs(error);  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    filteredNextIsLast  =  Math.abs(error);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
15	[BUG]  [BUGGY]    filteredNextIsLast  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    filteredNextIsLast  =  false;  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    filteredNextIsLast  =  false;		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
16	[BUG]  [BUGGY]  computeDerivatives(t,  y,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]  computeDerivatives(t,  y,  a,  yDotK[0]);  [BUGGY]  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  a,  yDotK[0]);	computeDerivatives(stepStart,  y,  yDotK[0]);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
17	[BUG]  [BUGGY]    yDotK[0]  =  Math.abs(yMath.abs(error));  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    yDotK[0]  =  Math.abs(yMath.abs(error));  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    yDotK[0]  =  Math.abs(yMath.abs(error));		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
18	[BUG]  [BUGGY]    int  stepStart  =  Math.abs(stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionError  [CONTEXT]  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {    [BUGGY]    int  stepStart  =  Math.abs(stepStart);  [BUGGY]  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	    int  stepStart  =  Math.abs(stepStart);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	add
