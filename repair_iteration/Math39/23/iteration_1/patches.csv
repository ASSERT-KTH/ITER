bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  computeDerivatives(t,  error,  y,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  error,  y,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  y,  yDotK[0]);	  computeDerivatives(t,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
2	[BUG]  [BUGGY]  validateDerivatives(t,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  validateDerivatives(t,  error,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  yDotK[0]);	  computeDerivatives(t,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
3	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  error,  yDotTmp[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp[0]);	  computeDerivatives(t,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
4	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  step);  yDotTmp[0]  =  Math.abs(yDotK[0]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
5	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart);  yDotTmp[0]  =  Math.abs(yDotK[0]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
6	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(stepStart,  error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(stepStart,  error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
7	[BUG]  [BUGGY]  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[0]  =  Math.abs(yDotK[0]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
8	[BUG]  [BUGGY]  computeDerivatives(t,  error,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  error,  a,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  a,  yDotK[0]);	  computeDerivatives(t,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
9	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  error,  scaledH[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scaledH[0]);	  computeDerivatives(t,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
10	[BUG]  [BUGGY]  computeDerivatives(t,  error,  b[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  error,  b[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  b[0]);	  computeDerivatives(t,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
11	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotK[0],  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  error,  yDotK[0],  firstTime);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotK[0],  firstTime);	  computeDerivatives(t,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
12	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  firstTime);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  firstTime);	      int    stepStart    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
13	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  error);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  error);	      int    stepStart    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
14	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  t);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  t);	      int    stepStart    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
15	[BUG]  [BUGGY]  computeDerivatives(t,  error,  y,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  error,  y,  a,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  y,  a,  yDotK[0]);	  computeDerivatives(t,    y,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
16	[BUG]  [BUGGY]  computeDerivatives(t,  errors,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  errors,  a,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  errors,  a,  yDotK[0]);	  computeDerivatives(t,    y,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
17	[BUG]  [BUGGY]  transform(t,  error,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  transform(t,  error,  a,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	transform(t,  error,  a,  yDotK[0]);	  computeDerivatives(t,    y,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
18	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  y,  error,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  yDotK[0]);	  computeDerivatives(error,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
19	[BUG]  [BUGGY]  validateDerivatives(t,  y,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  validateDerivatives(t,  y,  error,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  y,  error,  yDotK[0]);	  computeDerivatives(error,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
20	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart);	      int    stepStart    =    Math.min(stepStart,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
21	[BUG]  [BUGGY]  int  stepStart  =  Math.max(error,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.max(error,  stepStart);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.max(error,  stepStart);	      int    stepStart    =    Math.min(stepStart,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
22	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(stepStart,  error,  firstTime);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(stepStart,  error,  firstTime);	      int    stepStart    =    Math.min(stepStart,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
23	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  stepEnd);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepEnd);	      int    stepStart    =    Math.min(stepStart,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
24	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[mainSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  final  double[][]  b  =  new  double[mainSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[mainSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
25	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[mainSetDimension][error];  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  final  double[][]  b  =  new  double[mainSetDimension][error];  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[mainSetDimension][error];	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
26	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[mainSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  final  double[][]  b  =  new  double[mainSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[mainSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
27	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[mainSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  final  double[][]  b  =  new  double[mainSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[mainSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
28	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime));  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime));  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime));	      yDotK[0]    =    Math.abs(yMath.abs(error));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
29	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  1);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)+  1);	      yDotK[0]    =    Math.abs(yMath.abs(error));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
30	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  1));  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error  +  1));	      yDotK[0]    =    Math.abs(yMath.abs(error));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
31	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart);	      yDotK[0]    =    Math.abs(yMath.abs(error));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
32	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]);	      int    stepStart    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
33	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  error);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  +  error);	      int    stepStart    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
34	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.abs(error);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error);	      int    stepStart    =    Math.abs(stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
35	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.abs(error,  stepStart);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error,  stepStart);	      int    stepStart    =    Math.abs(stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
36	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(stepStart  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.abs(stepStart  -  error);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(stepStart  -  error);	      int    stepStart    =    Math.abs(stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
37	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(stepStart  +  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.abs(stepStart  +  error);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(stepStart  +  error);	      int    stepStart    =    Math.abs(stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
38	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK.length);	      int    stepStart    =    Math.min(error,    yDotTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
39	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  firstTime);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length,  firstTime);	      int    stepStart    =    Math.min(error,    yDotTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
40	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);	      int    stepStart    =    Math.min(error,    yDotTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
41	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  +  1);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  +  1);	      int    stepStart    =    Math.min(error,    yDotTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
42	[BUG]  [BUGGY]  validateDerivatives(t,  error,  y,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  validateDerivatives(t,  error,  y,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  y,  yDotK[0]);	  validateDerivatives(t,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
43	[BUG]  [BUGGY]  validateDerivatives(t,  error,  yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  validateDerivatives(t,  error,  yDotTmp[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  yDotTmp[0]);	  validateDerivatives(t,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
44	[BUG]  [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  yDotTmp,  yDotK[0]);	  validateDerivatives(t,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
45	[BUG]  [BUGGY]  filteredNextIsLast  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  filteredNextIsLast  =  true;  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  true;	      filteredNextIsLast    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
46	[BUG]  [BUGGY]  filteredNextIsLast  =  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  filteredNextIsLast  =  null;  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  null;	      filteredNextIsLast    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
47	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  step);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
48	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
49	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
50	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  step);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
51	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(yDotK[0]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
52	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotK[0]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
53	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
54	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  step1);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  step1);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  step1);  yDotTmp  =  Math.abs(yDotK[0]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
55	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  filteredNextIsLast  =  Math.abs(error,  firstTime);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  firstTime);	      filteredNextIsLast    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
56	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  nextIsLast);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  filteredNextIsLast  =  Math.abs(error,  nextIsLast);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  nextIsLast);	      filteredNextIsLast    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
57	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  secondTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  filteredNextIsLast  =  Math.abs(error,  secondTime);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  secondTime);	      filteredNextIsLast    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
58	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  filteredNextIsLast  =  Math.abs(error  +  1);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error  +  1);	      filteredNextIsLast    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
59	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
60	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotTmp);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
61	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(yDotTmp);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
62	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
63	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp);	      yDotK[0]    =    Math.abs(yMath.abs(error));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
64	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  error);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  -  error);	      int    stepStart    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
65	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  1);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  -  1);	      int    stepStart    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
66	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
67	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  steps);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  steps);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  steps);	      int    stepStart    =    Math.min(stepStart,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
68	[BUG]  [BUGGY]  filteredNextIsLast  =  error;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  filteredNextIsLast  =  error;  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  error;	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
69	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp,  yDotK[0]);	  computeDerivatives(t,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
70	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scale[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  error,  scale[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scale[0]);	  computeDerivatives(t,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
71	[BUG]  [BUGGY]  validateDerivatives(t,  errors,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  validateDerivatives(t,  errors,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  errors,  yDotK[0]);	  validateDerivatives(t,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
72	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);	      int    stepStart    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
73	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  k);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  k);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  k);	      int    stepStart    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
74	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  y,  error,  a,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  a,  yDotK[0]);	  computeDerivatives(t,    y,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
75	[BUG]  [BUGGY]  computeDerivatives(t,  errors,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  errors,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  errors,  yDotK[0]);	  computeDerivatives(t,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
76	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
77	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
78	[BUG]  [BUGGY]  filteredNextIsLast  =  false,  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  filteredNextIsLast  =  false,  firstTime;  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  false,  firstTime;	      filteredNextIsLast    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
79	[BUG]  [BUGGY]  computeDerivatives(t,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  a,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  yDotK[0]);	  computeDerivatives(t,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
80	[BUG]  [BUGGY]  double  stepStart  =  Math.min(error,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  double  stepStart  =  Math.min(error,  stepStart);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(error,  stepStart);	      int    stepStart    =    Math.min(stepStart,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
81	[BUG]  [BUGGY]  int  mainSetDimension  =  Math.abs(mainSetDimension);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  mainSetDimension  =  Math.abs(mainSetDimension);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  mainSetDimension  =  Math.abs(mainSetDimension);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
82	[BUG]  [BUGGY]  int  mainSetDimension  =  Math.abs(mainSetDimension  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  mainSetDimension  =  Math.abs(mainSetDimension  -  error);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  mainSetDimension  =  Math.abs(mainSetDimension  -  error);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
83	[BUG]  [BUGGY]  computeDerivatives(t,  a,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  a,  error,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  error,  yDotK[0]);	  computeDerivatives(t,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
84	[BUG]  [BUGGY]  computeDerivatives(t,  a,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  a,  yDotTmp,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  yDotTmp,  yDotK[0]);	  computeDerivatives(t,    y,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
85	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  2);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  -  2);	      int    stepStart    =    Math.min(error,    yDotTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
86	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  2);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)/  2);	      yDotK[0]    =    Math.abs(yMath.abs(error));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
87	[BUG]  [BUGGY]  validateDerivatives(t,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  validateDerivatives(t,  a,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  a,  yDotK[0]);	  validateDerivatives(t,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
88	[BUG]  [BUGGY]  validateDerivatives(t,  a,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  validateDerivatives(t,  a,  yDotTmp,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  a,  yDotTmp,  yDotK[0]);	  validateDerivatives(t,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
89	[BUG]  [BUGGY]  double  stepStart  =  Math.min(stepStart,  error);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  double  stepStart  =  Math.min(stepStart,  error);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(stepStart,  error);  yDotTmp  =  Math.abs(yDotK[0]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
90	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  1);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  +  1);	      int    stepStart    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
91	[BUG]  [BUGGY]  computeDerivatives(a,  y,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(a,  y,  error,  yDotK[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(a,  y,  error,  yDotK[0]);	  computeDerivatives(error,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
92	[BUG]  [BUGGY]  computeDerivatives(t,  y,  errors[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  computeDerivatives(t,  y,  errors[0]);  [BUGGY]    }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  errors[0]);	  computeDerivatives(error,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
93	[BUG]  [BUGGY]  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {      [BUGGY]  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [BUGGY]    computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[1]  =  Math.abs(yDotTmp[1]);	      int    stepStart    =    Math.min(stepStart,    error);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
