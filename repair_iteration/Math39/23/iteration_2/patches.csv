bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  a,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  yDotTmp,  a,  yDotK[0]);	  validateDerivatives(t,    a,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
2	[BUG]  [BUGGY]  validateDerivatives(t,  error,  a,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  a,  yDotTmp,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  a,  yDotTmp,  yDotK[0]);	  validateDerivatives(t,    a,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
3	[BUG]  [BUGGY]  validateDerivatives(t,  a,  error,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  a,  error,  yDotTmp,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  a,  error,  yDotTmp,  yDotK[0]);	  validateDerivatives(t,    a,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
4	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  scale);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  scale);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  scale);	  int    stepStart    =    Math.min(error,    yDotK[0],    vecAbsoluteTolerance);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
5	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  scale,  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  scale,  vecAbsoluteTolerance);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  scale,  vecAbsoluteTolerance);	  int    stepStart    =    Math.min(error,    yDotK[0],    vecAbsoluteTolerance);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
6	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1],  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1],  vecAbsoluteTolerance);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1],  vecAbsoluteTolerance);	  int    stepStart    =    Math.min(error,    yDotK[0],    vecAbsoluteTolerance);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
7	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  vecRelativeTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  vecRelativeTolerance);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  vecRelativeTolerance);	  int    stepStart    =    Math.min(error,    yDotK[0],    vecAbsoluteTolerance);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
8	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart,  firstTime);	  int    stepStart    =    Math.min(stepStart,    error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
9	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  firstTime);	  int    stepStart    =    Math.min(stepStart,    error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
10	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  error,  yDotK[0],  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(stepStart,  error,  yDotK[0],  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(stepStart,  error,  yDotK[0],  firstTime);	  int    stepStart    =    Math.min(stepStart,    error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
11	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(stepStart,  error,  yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(stepStart,  error,  yDotK[0]);	  int    stepStart    =    Math.min(stepStart,    error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
12	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    step1);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
13	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  y0);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  y0);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  y0);  yDotTmp  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    step1);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
14	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotTmp);	  int    stepStart    =    Math.min(error,    step);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
15	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  y0);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  y0);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  y0);  yDotTmp  =  Math.abs(yDotTmp);	  int    stepStart    =    Math.min(error,    step);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
16	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotTmp,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotTmp,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotTmp,  firstTime);	  int    stepStart    =    Math.min(error,    step);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
17	[BUG]  [BUGGY]  validateDerivatives(t,  error,  b[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  b[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  b[0]);	  validateDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
18	[BUG]  [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  yDotTmp,  firstTime);	  validateDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
19	[BUG]  [BUGGY]  validateDerivatives(t,  error,  a,  yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  a,  yDotTmp[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  a,  yDotTmp[0]);	  validateDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
20	[BUG]  [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  yDotTmp,  scaledH[0]);	  validateDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
21	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0]  +  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0]  +  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0]  +  error);	  int    stepStart    =    Math.min(error,    yDotK[1]    +    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
22	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  error,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  +  error,  firstTime);	  int    stepStart    =    Math.min(error,    yDotK[1]    +    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
23	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  +  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  +  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  +  error);	  int    stepStart    =    Math.min(error,    yDotK[1]    +    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
24	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  a,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  error,  a,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  a,  scaledH[0]);	  computeDerivatives(t,    y,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
25	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  error,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  -  error,  firstTime);	  int    stepStart    =    Math.min(error,    yDotK[1]    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
26	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0]  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0]  -  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0]  -  error);	  int    stepStart    =    Math.min(error,    yDotK[1]    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
27	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  error,  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  error,  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  -  error,  1);	  int    stepStart    =    Math.min(error,    yDotK[1]    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
28	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  error,  lastTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  error,  lastTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  -  error,  lastTime);	  int    stepStart    =    Math.min(error,    yDotK[1]    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
29	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scale,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scale,  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scale,  firstTime);	  computeDerivatives(t,    error,    scale[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
30	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scale[0],  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scale[0],  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scale[0],  firstTime);	  computeDerivatives(t,    error,    scale[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
31	[BUG]  [BUGGY]  computeDerivatives(t,  errors,  scale[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  errors,  scale[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  errors,  scale[0]);	  computeDerivatives(t,    error,    scale[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
32	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  nextIsLast,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  nextIsLast,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  nextIsLast,  firstTime);	  filteredNextIsLast    =    Math.abs(error,    nextIsLast);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
33	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  nextIsLast  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  nextIsLast  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  nextIsLast  +  1);	  filteredNextIsLast    =    Math.abs(error,    nextIsLast);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
34	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK[0],  nextIsLast);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK[0],  nextIsLast);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  yDotK[0],  nextIsLast);	  filteredNextIsLast    =    Math.abs(error,    nextIsLast);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
35	[BUG]  [BUGGY]  computeDerivatives(t,  a,  error,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  error,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  error,  scaledH[0]);	  computeDerivatives(t,    a,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
36	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  a[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  a[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp,  a[0]);	  computeDerivatives(t,    a,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
37	[BUG]  [BUGGY]  computeDerivatives(t,  a,  error,  b[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  error,  b[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  error,  b[0]);	  computeDerivatives(t,    a,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
38	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[scale.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[scale.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[scale.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    Math.abs(b[i]    *    error);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
39	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[t][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[t][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[t][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    Math.abs(b[i]    *    error);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
40	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[2][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[2][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[2][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    Math.abs(b[i]    *    error);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
41	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[scala.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[scala.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[scala.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]  *  error);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    Math.abs(b[i]    *    error);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
42	[BUG]  [BUGGY]  double  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);	  double    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
43	[BUG]  [BUGGY]  double  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotK[0]);	  double    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
44	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[error][mainSetDimension];  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[error][mainSetDimension];  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[error][mainSetDimension];	  final    double[][]    b    =    new    double[mainSetDimension][error];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
45	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[t][error];  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[t][error];  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[t][error];	  final    double[][]    b    =    new    double[mainSetDimension][error];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
46	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[outputSetDimension][error];  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[outputSetDimension][error];  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[outputSetDimension][error];	  final    double[][]    b    =    new    double[mainSetDimension][error];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
47	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  stepEnd);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart,  stepEnd);	  int    stepStart    =    Math.min(error,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
48	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepEnd,  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepEnd,  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepEnd,  1);	  int    stepStart    =    Math.min(error,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
49	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepEnd,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepEnd,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepEnd,  firstTime);	  int    stepStart    =    Math.min(error,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
50	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepEnd,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepEnd,  yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepEnd,  yDotK[0]);	  int    stepStart    =    Math.min(error,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
51	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotK[0]);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
52	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp  =  Math.abs(yDotK[0]);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
53	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotK.length);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotK.length);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  yDotK.length);  yDotTmp  =  Math.abs(yDotK[0]);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
54	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotTmp,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotTmp,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  yDotTmp,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
55	[BUG]  [BUGGY]  int  mainSetDimension  =  Math.abs(error  -  mainSetDimension);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  mainSetDimension  =  Math.abs(error  -  mainSetDimension);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  mainSetDimension  =  Math.abs(error  -  mainSetDimension);	  int    mainSetDimension    =    Math.abs(mainSetDimension    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
56	[BUG]  [BUGGY]  int  mainSetDimension  =  Math.abs(mainSetDimension  -  error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  mainSetDimension  =  Math.abs(mainSetDimension  -  error,  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  mainSetDimension  =  Math.abs(mainSetDimension  -  error,  firstTime);	  int    mainSetDimension    =    Math.abs(mainSetDimension    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
57	[BUG]  [BUGGY]  double  mainSetDimension  =  Math.abs(mainSetDimension  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  mainSetDimension  =  Math.abs(mainSetDimension  -  error);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  mainSetDimension  =  Math.abs(mainSetDimension  -  error);	  int    mainSetDimension    =    Math.abs(mainSetDimension    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
58	[BUG]  [BUGGY]  int  mainSetDimension  =  Math.abs(error  -  MainSetDimension);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  mainSetDimension  =  Math.abs(error  -  MainSetDimension);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  mainSetDimension  =  Math.abs(error  -  MainSetDimension);	  int    mainSetDimension    =    Math.abs(mainSetDimension    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
59	[BUG]  [BUGGY]  computeDerivatives(t,  errors,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  errors,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  errors,  scaledH[0]);	  computeDerivatives(t,    errors,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
60	[BUG]  [BUGGY]  filteredNextIsLast  =  error  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  error  +  1;  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  error  +  1;	  filteredNextIsLast    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
61	[BUG]  [BUGGY]  filteredNextIsLast  =  error  +  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  error  +  firstTime;  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  error  +  firstTime;	  filteredNextIsLast    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
62	[BUG]  [BUGGY]  filteredNextIsLast  =  error  ||  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  error  ||  firstTime;  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  error  ||  firstTime;	  filteredNextIsLast    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
63	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  a,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp,  a,  yDotK[0]);	  computeDerivatives(t,    a,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
64	[BUG]  [BUGGY]  computeDerivatives(t,  error,  a,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  a,  yDotTmp,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  a,  yDotTmp,  yDotK[0]);	  computeDerivatives(t,    a,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
65	[BUG]  [BUGGY]  filteredNextIsLast  =  true,  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  true,  firstTime;  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  true,  firstTime;	  filteredNextIsLast    =    false,    firstTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
66	[BUG]  [BUGGY]  filteredNextIsLast  =  false,  error;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  false,  error;  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  false,  error;	  filteredNextIsLast    =    false,    firstTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
67	[BUG]  [BUGGY]  filteredNextIsLast  =  error,  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  error,  firstTime;  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  error,  firstTime;	  filteredNextIsLast    =    false,    firstTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
68	[BUG]  [BUGGY]  filteredNextIsLast  =  false,  error,  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  false,  error,  firstTime;  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  false,  error,  firstTime;	  filteredNextIsLast    =    false,    firstTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
69	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  y);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  y);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  y);  yDotTmp  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
70	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotK[0]  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotK[0]  -  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotK[0]  -  error);	  int    stepStart    =    Math.min(error,    step);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
71	[BUG]  [BUGGY]  computeDerivatives(t,  error,  b,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  b,  a,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  b,  a,  yDotK[0]);	  computeDerivatives(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
72	[BUG]  [BUGGY]  computeDerivatives(t,  error,  a,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  a,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  a,  scaledH[0]);	  computeDerivatives(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
73	[BUG]  [BUGGY]  computeDerivatives(t,  error,  a,  yDotK[0],  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  a,  yDotK[0],  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  a,  yDotK[0],  firstTime);	  computeDerivatives(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
74	[BUG]  [BUGGY]  validateDerivatives(t,  y,  error,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  y,  error,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  y,  error,  scaledH[0]);	  validateDerivatives(t,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
75	[BUG]  [BUGGY]  validateDerivatives(t,  firstTime,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  firstTime,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  firstTime,  error,  yDotK[0]);	  validateDerivatives(t,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
76	[BUG]  [BUGGY]  validateDerivatives(t,  y,  error,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  y,  error,  a,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  y,  error,  a,  yDotK[0]);	  validateDerivatives(t,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
77	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  y0);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  y0);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  y0);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
78	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  error);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  error);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  error);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
79	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  error);  yDotTmp[0]  =  Math.abs(yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  error);  yDotTmp[0]  =  Math.abs(yDotTmp[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  error);  yDotTmp[0]  =  Math.abs(yDotTmp[0]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
80	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  scaledH);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  scaledH);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  scaledH);	  int    stepStart    =    Math.min(error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
81	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  firstTime,  scale);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  firstTime,  scale);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  firstTime,  scale);	  int    stepStart    =    Math.min(error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
82	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  +  1,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  +  1,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  +  1,  firstTime);	  int    stepStart    =    Math.min(error,    yDotTmp.length    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
83	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  error.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  error.length  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length,  error.length  +  1);	  int    stepStart    =    Math.min(error,    yDotTmp.length    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
84	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(error,  yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error,  yDotK[0]);	  int    stepStart    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
85	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(error,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error,  firstTime);	  int    stepStart    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
86	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error,  yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(error,  yDotK[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error,  yDotK[1]);	  int    stepStart    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
87	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  2,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  2,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  -  2,  firstTime);	  int    stepStart    =    Math.min(error,    yDotTmp.length    -    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
88	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  /  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  /  2);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  /  2);	  int    stepStart    =    Math.min(error,    yDotTmp.length    -    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
89	[BUG]  [BUGGY]  computeDerivatives(a,  error,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(a,  error,  yDotTmp,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(a,  error,  yDotTmp,  yDotK[0]);	  computeDerivatives(a,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
90	[BUG]  [BUGGY]  computeDerivatives(a,  y,  error,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(a,  y,  error,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(a,  y,  error,  scaledH[0]);	  computeDerivatives(a,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
91	[BUG]  [BUGGY]  computeDerivatives(a,  y,  error,  t,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(a,  y,  error,  t,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(a,  y,  error,  t,  yDotK[0]);	  computeDerivatives(a,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
92	[BUG]  [BUGGY]  computeDerivatives(a,  error,  t,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(a,  error,  t,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(a,  error,  t,  yDotK[0]);	  computeDerivatives(a,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
93	[BUG]  [BUGGY]  computeDerivatives(t,  error,  y,  firstTime,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  y,  firstTime,  a,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  y,  firstTime,  a,  yDotK[0]);	  computeDerivatives(t,    error,    y,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
94	[BUG]  [BUGGY]  computeDerivatives(t,  error,  y,  a,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  y,  a,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  y,  a,  scaledH[0]);	  computeDerivatives(t,    error,    y,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
95	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0]  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0]  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0]  +  1);	  int    stepStart    =    Math.min(error,    yDotK[1]    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
96	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1],  error  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1],  error  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1],  error  +  1);	  int    stepStart    =    Math.min(error,    yDotK[1]    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
97	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotTmp[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotTmp[0]);	  int    stepStart    =    Math.min(error,    yDotTmp.length);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
98	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    yDotTmp.length);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
99	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    yDotTmp.length);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
100	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  yDotK[0]);	  filteredNextIsLast    =    Math.abs(error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
101	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK[0],  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK[0],  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  yDotK[0],  firstTime);	  filteredNextIsLast    =    Math.abs(error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
102	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  firstTime  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  firstTime  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  firstTime  +  1);	  filteredNextIsLast    =    Math.abs(error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
103	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  yDotK[1]);	  filteredNextIsLast    =    Math.abs(error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
104	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK.length);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  yDotK.length);	  int    stepStart    =    Math.min(error,    yDotK.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
105	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK.length,  firstTime);	  int    stepStart    =    Math.min(error,    yDotK.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
106	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length  -  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK.length  -  1);	  int    stepStart    =    Math.min(error,    yDotK.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
107	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error  +  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(error  +  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error  +  stepStart);	  int    stepStart    =    Math.abs(stepStart    +    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
108	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(stepStart  +  error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(stepStart  +  error,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(stepStart  +  error,  firstTime);	  int    stepStart    =    Math.abs(stepStart    +    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
109	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(stepStart  /  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(stepStart  /  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(stepStart  /  error);	  int    stepStart    =    Math.abs(stepStart    +    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
110	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(stepStart  *  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(stepStart  *  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(stepStart  *  error);	  int    stepStart    =    Math.abs(stepStart    +    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
111	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  error);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  error);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart,  error);  yDotTmp  =  Math.abs(yDotTmp);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
112	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  steps.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  steps.length);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  steps.length);	  int    stepStart    =    Math.min(error,    steps);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
113	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  steps);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  steps);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart,  steps);	  int    stepStart    =    Math.min(error,    steps);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
114	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  steps);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  steps);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  steps);	  int    stepStart    =    Math.min(error,    steps);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
115	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(stepStart,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(stepStart,  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(stepStart,  error);	  int    stepStart    =    Math.abs(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
116	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error,  stepStart  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(error,  stepStart  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error,  stepStart  +  1);	  int    stepStart    =    Math.abs(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
117	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error,  stepStart  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(error,  stepStart  -  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error,  stepStart  -  1);	  int    stepStart    =    Math.abs(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
118	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  firstTime);	  yDotK[0]    =    Math.abs(yMath.abs(error),    yTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
119	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  error);	  yDotK[0]    =    Math.abs(yMath.abs(error),    yTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
120	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  scale);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  scale);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  scale);	  yDotK[0]    =    Math.abs(yMath.abs(error),    yTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
121	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTolerance);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error),  yTolerance);	  yDotK[0]    =    Math.abs(yMath.abs(error),    yTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
122	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  secondTime  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  secondTime  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  secondTime  +  1);	  filteredNextIsLast    =    Math.abs(error,    secondTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
123	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  secondTime  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  secondTime  -  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  secondTime  -  error);	  filteredNextIsLast    =    Math.abs(error,    secondTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
124	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  nextTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  nextTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  nextTime);	  filteredNextIsLast    =    Math.abs(error,    secondTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
125	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  k,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  k,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  k,  firstTime);	  int    stepStart    =    Math.min(error,    yDotK[0],    k);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
126	[BUG]  [BUGGY]  int  stepStart  =  Math.min(k,  yDotK[0],  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(k,  yDotK[0],  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(k,  yDotK[0],  error);	  int    stepStart    =    Math.min(error,    yDotK[0],    k);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
127	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  -  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  -  error);	  int    stepStart    =    Math.min(error,    yDotK[0],    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
128	[BUG]  [BUGGY]  int  stepStart  =  Math.min(yDotK[0],  error,  yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(yDotK[0],  error,  yDotK[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(yDotK[0],  error,  yDotK[1]);	  int    stepStart    =    Math.min(error,    yDotK[0],    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
129	[BUG]  [BUGGY]  computeDerivatives(t,  a,  errors,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  errors,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  errors,  yDotK[0]);	  computeDerivatives(t,    errors,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
130	[BUG]  [BUGGY]  computeDerivatives(t,  errors,  a,  yDotTmp,  error[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  errors,  a,  yDotTmp,  error[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  errors,  a,  yDotTmp,  error[0]);	  computeDerivatives(t,    errors,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
131	[BUG]  [BUGGY]  computeDerivatives(t,  error,  a,  yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  a,  yDotTmp[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  a,  yDotTmp[0]);	  computeDerivatives(t,    errors,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
132	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp,  firstTime);	  computeDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
133	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  firstTime[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  firstTime[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp,  firstTime[0]);	  computeDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
134	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  error,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  scaledH[0]);	  computeDerivatives(t,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
135	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(error);	  yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
136	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(error,  yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(error,  yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(error,  yDotTmp);	  yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
137	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(error,  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(error,  y);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(error,  y);	  yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
138	[BUG]  [BUGGY]  computeDerivatives(t,  error,  y,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  y,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  y,  scaledH[0]);	  computeDerivatives(t,    error,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
139	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  y));  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  y));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error,  y));	  yDotK[0]    =    Math.abs(yMath.abs(error,    firstTime));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
140	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  stepStart));  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  stepStart));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error,  stepStart));	  yDotK[0]    =    Math.abs(yMath.abs(error,    firstTime));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
141	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  scale));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  scale));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error,  scale));	  yDotK[0]    =    Math.abs(yMath.abs(error,    firstTime));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
142	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime)+  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime)+  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime)+  error);	  yDotK[0]    =    Math.abs(yMath.abs(error,    firstTime));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
143	[BUG]  [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  scaledH,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  scaledH,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  yDotTmp,  scaledH,  yDotK[0]);	  validateDerivatives(t,    error,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
144	[BUG]  [BUGGY]  validateDerivatives(t,  error,  b,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  b,  yDotTmp,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  b,  yDotTmp,  yDotK[0]);	  validateDerivatives(t,    error,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
145	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)/  stepStart);	  yDotK[0]    =    Math.abs(yMath.abs(error)+    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
146	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart,  firstTime);	  yDotK[0]    =    Math.abs(yMath.abs(error)+    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
147	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(stepStart)+  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(stepStart)+  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(stepStart)+  error);	  yDotK[0]    =    Math.abs(yMath.abs(error)+    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
148	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart,  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart,  error);	  yDotK[0]    =    Math.abs(yMath.abs(error)+    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
149	[BUG]  [BUGGY]  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[0]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp[0]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
150	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp[0]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
151	[BUG]  [BUGGY]  yDotTmp[0]  =  Math.abs(yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp[0]  =  Math.abs(yDotK[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[0]  =  Math.abs(yDotK[1]);	  yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
152	[BUG]  [BUGGY]  yDotTmp[0]  =  Math.abs(yDotK[0]  *  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp[0]  =  Math.abs(yDotK[0]  *  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[0]  =  Math.abs(yDotK[0]  *  error);	  yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
153	[BUG]  [BUGGY]  yDotTmp[0]  =  Math.abs(yDotK[0]  +  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp[0]  =  Math.abs(yDotK[0]  +  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[0]  =  Math.abs(yDotK[0]  +  error);	  yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
154	[BUG]  [BUGGY]  yDotTmp[0]  =  Math.abs(error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp[0]  =  Math.abs(error,  yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[0]  =  Math.abs(error,  yDotK[0]);	  yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
155	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp,  scaledH[0]);	  computeDerivatives(t,    error,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
156	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  scaledH,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  scaledH,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp,  scaledH,  yDotK[0]);	  computeDerivatives(t,    error,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
157	[BUG]  [BUGGY]  computeDerivatives(t,  error,  b,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  b,  yDotTmp,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  b,  yDotTmp,  yDotK[0]);	  computeDerivatives(t,    error,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
158	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  error  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  error  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  error  +  1);	  filteredNextIsLast    =    Math.abs(error    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
159	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error  +  1,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error  +  1,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error  +  1,  firstTime);	  filteredNextIsLast    =    Math.abs(error    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
160	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error  *  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error  *  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error  *  1);	  filteredNextIsLast    =    Math.abs(error    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
161	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[t][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[t][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[t][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    b[i]    =    Math.abs(b[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
162	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[2][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[2][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[2][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    b[i]    =    Math.abs(b[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
163	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[mainSetDimension][t];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[mainSetDimension][t];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[mainSetDimension][t];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    b[i]    =    Math.abs(b[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
164	[BUG]  [BUGGY]  transform(t,  a,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  transform(t,  a,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	transform(t,  a,  error,  yDotK[0]);	  transform(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
165	[BUG]  [BUGGY]  transform(a,  error,  t,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  transform(a,  error,  t,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	transform(a,  error,  t,  yDotK[0]);	  transform(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
166	[BUG]  [BUGGY]  transform(t,  error,  b,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  transform(t,  error,  b,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	transform(t,  error,  b,  yDotK[0]);	  transform(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
167	[BUG]  [BUGGY]  transform(t,  error,  a,  yDotTmp,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  transform(t,  error,  a,  yDotTmp,  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	transform(t,  error,  a,  yDotTmp,  firstTime);	  transform(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
168	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  2  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  2  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)/  2  +  1);	  yDotK[0]    =    Math.abs(yMath.abs(error)/    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
169	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  3);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  3);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)/  3);	  yDotK[0]    =    Math.abs(yMath.abs(error)/    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
170	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  2  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  2  -  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)/  2  -  1);	  yDotK[0]    =    Math.abs(yMath.abs(error)/    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
171	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  error);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  error);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  error);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
172	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
173	[BUG]  [BUGGY]  computeDerivatives(t,  error,  errors[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  errors[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  errors[0]);	  computeDerivatives(t,    y,    errors[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
174	[BUG]  [BUGGY]  computeDerivatives(t,  error,  y,  errors[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  y,  errors[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  y,  errors[0]);	  computeDerivatives(t,    y,    errors[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
175	[BUG]  [BUGGY]  computeDerivatives(t,  errors[0],  y);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  errors[0],  y);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  errors[0],  y);	  computeDerivatives(t,    y,    errors[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
176	[BUG]  [BUGGY]  computeDerivatives(t,  errors,  y,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  errors,  y,  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  errors,  y,  firstTime);	  computeDerivatives(t,    y,    errors[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
177	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  1,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  1,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  -  1,  firstTime);	  int    stepStart    =    Math.min(error,    yDotTmp.length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
178	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  error);  yDotTmp  =  Math.abs(yDotTmp);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
179	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  y0);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  y0);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  y0);  yDotTmp  =  Math.abs(yDotTmp);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
180	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart,  error);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart,  error);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  stepStart,  error);  yDotTmp  =  Math.abs(yDotTmp);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
181	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart,  1);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart,  1);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  stepStart,  1);  yDotTmp  =  Math.abs(yDotTmp);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
182	[BUG]  [BUGGY]  yDotTmp[1]  =  Math.abs(yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp[1]  =  Math.abs(yDotK[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[1]  =  Math.abs(yDotK[1]);	  yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
183	[BUG]  [BUGGY]  yDotTmp[1]  =  Math.abs(error,  yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp[1]  =  Math.abs(error,  yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[1]  =  Math.abs(error,  yDotTmp[1]);	  yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
184	[BUG]  [BUGGY]  yDotTmp[1]  =  Math.abs(yDotTmp[1]  +  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp[1]  =  Math.abs(yDotTmp[1]  +  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[1]  =  Math.abs(yDotTmp[1]  +  error);	  yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
185	[BUG]  [BUGGY]  int  stepStart  =  Math.max(error,  yDotK[0],  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.max(error,  yDotK[0],  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.max(error,  yDotK[0],  stepStart);	  int    stepStart    =    Math.max(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
186	[BUG]  [BUGGY]  int  stepStart  =  Math.max(error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.max(error,  yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.max(error,  yDotK[0]);	  int    stepStart    =    Math.max(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
187	[BUG]  [BUGGY]  int  stepStart  =  Math.max(error,  stepStart,  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.max(error,  stepStart,  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.max(error,  stepStart,  1);	  int    stepStart    =    Math.max(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
188	[BUG]  [BUGGY]  int  stepStart  =  Math.max(error,  stepStart,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.max(error,  stepStart,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.max(error,  stepStart,  firstTime);	  int    stepStart    =    Math.max(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
189	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error  -  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(error  -  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error  -  stepStart);	  int    stepStart    =    Math.abs(stepStart    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
190	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(stepStart  -  error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(stepStart  -  error,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(stepStart  -  error,  firstTime);	  int    stepStart    =    Math.abs(stepStart    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
191	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error,  stepStart  -  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(error,  stepStart  -  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error,  stepStart  -  stepStart);	  int    stepStart    =    Math.abs(stepStart    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
192	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
193	[BUG]  [BUGGY]  validateDerivatives(t,  error,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  a,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  a,  yDotK[0]);	  validateDerivatives(t,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
194	[BUG]  [BUGGY]  validateDerivatives(t,  a,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  a,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  a,  error,  yDotK[0]);	  validateDerivatives(t,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
195	[BUG]  [BUGGY]  validateDerivatives(t,  errors,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  errors,  a,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  errors,  a,  yDotK[0]);	  validateDerivatives(t,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
196	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotK[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotK[1]);	  int    stepStart    =    Math.min(error,    yDotTmp.length);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
197	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    yDotTmp.length);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
198	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  1),  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  1),  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error  +  1),  firstTime);	  yDotK[0]    =    Math.abs(yMath.abs(error    +    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
199	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  2));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  2));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error  +  2));	  yDotK[0]    =    Math.abs(yMath.abs(error    +    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
200	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  1)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  1)+  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error  +  1)+  1);	  yDotK[0]    =    Math.abs(yMath.abs(error    +    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
201	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  1,  firstTime));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  1,  firstTime));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error  +  1,  firstTime));	  yDotK[0]    =    Math.abs(yMath.abs(error    +    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
202	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart,  1);	  int    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
203	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart,  yDotK[0]);	  int    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
204	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  stepStart);	  int    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
205	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)/  1);	  yDotK[0]    =    Math.abs(yMath.abs(error)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
206	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  2);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)+  2);	  yDotK[0]    =    Math.abs(yMath.abs(error)+    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
207	[BUG]  [BUGGY]  filteredNextIsLast  =  errors;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  errors;  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  errors;	  filteredNextIsLast    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
208	[BUG]  [BUGGY]  filteredNextIsLast  =  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  firstTime;  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  firstTime;	  filteredNextIsLast    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
209	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  firstTime,  yDotTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  firstTime,  yDotTmp.length);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  firstTime,  yDotTmp.length);	  int    stepStart    =    Math.min(error,    yDotTmp.length,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
210	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  firstTime.length,  yDotTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  firstTime.length,  yDotTmp.length);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  firstTime.length,  yDotTmp.length);	  int    stepStart    =    Math.min(error,    yDotTmp.length,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
211	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length,  error);	  int    stepStart    =    Math.min(error,    yDotTmp.length,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
212	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  scale);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  scale);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length,  scale);	  int    stepStart    =    Math.min(error,    yDotTmp.length,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
213	[BUG]  [BUGGY]  computeDerivatives(t,  error,  b,  firstTime[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  b,  firstTime[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  b,  firstTime[0]);	  computeDerivatives(t,    error,    b[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
214	[BUG]  [BUGGY]  computeDerivatives(t,  error,  b,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  b,  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  b,  firstTime);	  computeDerivatives(t,    error,    b[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
215	[BUG]  [BUGGY]  computeDerivatives(t,  error,  b,  secondTime[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  b,  secondTime[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  b,  secondTime[0]);	  computeDerivatives(t,    error,    b[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
216	[BUG]  [BUGGY]  computeDerivatives(t,  error,  b[0],  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  b[0],  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  b[0],  firstTime);	  computeDerivatives(t,    error,    b[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
217	[BUG]  [BUGGY]  validateDerivatives(t,  error,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  scaledH[0]);	  validateDerivatives(t,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
218	[BUG]  [BUGGY]  validateDerivatives(t,  error,  a[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  a[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  a[0]);	  validateDerivatives(t,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
219	[BUG]  [BUGGY]  int  stepStart  =  Math.min(yDotTmp,  error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(yDotTmp,  error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(yDotTmp,  error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(stepStart,    error,    yDotTmp.length);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
220	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  error,  yDotK.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(stepStart,  error,  yDotK.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(stepStart,  error,  yDotK.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(stepStart,    error,    yDotTmp.length);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
221	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  y);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  y);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  y);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
222	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(error,  y[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(error,  y[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(error,  y[0]);	  yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
223	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(y[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(y[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(y[0]);	  yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
224	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(yDotK[0]  +  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(yDotK[0]  +  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(yDotK[0]  +  error);	  yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
225	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(yDotK[0]  *  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(yDotK[0]  *  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(yDotK[0]  *  error);	  yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
226	[BUG]  [BUGGY]  validateDerivatives(t,  errors,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  errors,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  errors,  scaledH[0]);	  validateDerivatives(t,    errors,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
227	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  error,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  error,  firstTime);	  int    stepStart    =    Math.min(error,    yDotK[0],    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
228	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0]  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0]  -  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0]  -  1);	  int    stepStart    =    Math.min(error,    yDotK[1]    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
229	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  1,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  1,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  -  1,  firstTime);	  int    stepStart    =    Math.min(error,    yDotK[1]    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
230	[BUG]  [BUGGY]  int  mainSetDimension  =  Math.abs(error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  mainSetDimension  =  Math.abs(error);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  mainSetDimension  =  Math.abs(error);	  int    mainSetDimension    =    Math.abs(mainSetDimension);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
231	[BUG]  [BUGGY]  int  mainSetDimension  =  Math.abs(error,  mainSetDimension);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  mainSetDimension  =  Math.abs(error,  mainSetDimension);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  mainSetDimension  =  Math.abs(error,  mainSetDimension);	  int    mainSetDimension    =    Math.abs(mainSetDimension);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
232	[BUG]  [BUGGY]  double  mainSetDimension  =  Math.abs(mainSetDimension);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  mainSetDimension  =  Math.abs(mainSetDimension);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  mainSetDimension  =  Math.abs(mainSetDimension);	  int    mainSetDimension    =    Math.abs(mainSetDimension);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
233	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  y);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  y);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  y);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[0]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
234	[BUG]  [BUGGY]  validateDerivatives(t,  error,  y,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  y,  a,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  y,  a,  yDotK[0]);	  validateDerivatives(t,    error,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
235	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK.length);  yDotTmp  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
236	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
237	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scaledH[0],  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scaledH[0],  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scaledH[0],  firstTime);	  computeDerivatives(t,    error,    scaledH[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
238	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scaledH[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scaledH[1]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scaledH[1]);	  computeDerivatives(t,    error,    scaledH[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
239	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scaledH[0],  b[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scaledH[0],  b[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scaledH[0],  b[0]);	  computeDerivatives(t,    error,    scaledH[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
240	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scaledH[0],  scaledTolerance[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scaledH[0],  scaledTolerance[1]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scaledH[0],  scaledTolerance[1]);	  computeDerivatives(t,    error,    scaledH[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
241	[BUG]  [BUGGY]  double  stepStart  =  Math.min(error,  stepStart,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  stepStart  =  Math.min(error,  stepStart,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(error,  stepStart,  firstTime);	  double    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
242	[BUG]  [BUGGY]  double  stepStart  =  Math.min(error,  stepStart,  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  stepStart  =  Math.min(error,  stepStart,  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(error,  stepStart,  1);	  double    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
243	[BUG]  [BUGGY]  double  stepStart  =  Math.min(error,  stepStart,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  stepStart  =  Math.min(error,  stepStart,  yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(error,  stepStart,  yDotK[0]);	  double    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
244	[BUG]  [BUGGY]  double  stepStart  =  Math.min(error,  yDotK[0],  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  stepStart  =  Math.min(error,  yDotK[0],  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(error,  yDotK[0],  stepStart);	  double    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
245	[BUG]  [BUGGY]  computeDerivatives(t,  firstTime,  yDotK[0],  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  firstTime,  yDotK[0],  error);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  firstTime,  yDotK[0],  error);	  computeDerivatives(t,    error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
246	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotK[0],  scaledH);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotK[0],  scaledH);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotK[0],  scaledH);	  computeDerivatives(t,    error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
247	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotK[0],  firstTime,  scale);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotK[0],  firstTime,  scale);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotK[0],  firstTime,  scale);	  computeDerivatives(t,    error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
248	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp[0],  firstTime,  scale);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotTmp[0],  firstTime,  scale);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp[0],  firstTime,  scale);	  computeDerivatives(t,    error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
249	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  t,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  t,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  t,  firstTime);	  int    stepStart    =    Math.min(error,    yDotK[0],    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
250	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[scale.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[scale.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[scale.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    Math.abs(b[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
251	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[scala.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[scala.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[scala.length][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    Math.abs(b[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
252	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[size][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[size][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[size][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    Math.abs(b[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
253	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[2][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[2][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[2][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    Math.abs(b[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
254	[BUG]  [BUGGY]  validateDerivatives(t,  yDotTmp,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  yDotTmp,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  yDotTmp,  error,  yDotK[0]);	  validateDerivatives(t,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
255	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length  -  2);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK.length  -  2);	  int    stepStart    =    Math.min(error,    yDotTmp.length    -    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
256	[BUG]  [BUGGY]  yDotTmp[2]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp[2]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[2]  =  Math.abs(yDotTmp[1]);	  yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
257	[BUG]  [BUGGY]  computeDerivatives(t,  b,  error[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  b,  error[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  b,  error[0]);	  computeDerivatives(t,    error,    b[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
258	[BUG]  [BUGGY]  computeDerivatives(t,  error,  b,  scale[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  b,  scale[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  b,  scale[0]);	  computeDerivatives(t,    error,    b[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
259	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  2  *  scale);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  2  *  scale);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)/  2  *  scale);	  yDotK[0]    =    Math.abs(yMath.abs(error)/    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
260	[BUG]  [BUGGY]  validateDerivatives(t,  y,  error,  scaledH,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  y,  error,  scaledH,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  y,  error,  scaledH,  yDotK[0]);	  validateDerivatives(t,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
261	[BUG]  [BUGGY]  validateDerivatives(t,  y,  error,  scale,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  y,  error,  scale,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  y,  error,  scale,  yDotK[0]);	  validateDerivatives(t,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
262	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  -  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  -  1);	  int    stepStart    =    Math.min(error,    yDotK[0],    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
263	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[len][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[len][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[len][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    b[i]    =    Math.abs(b[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
264	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
265	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  stepStart);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  stepStart);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  stepStart);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
266	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  stepEnd);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  stepEnd);	  int    stepStart    =    Math.min(error,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
267	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepEnd  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepEnd  -  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepEnd  -  1);	  int    stepStart    =    Math.min(error,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
268	[BUG]  [BUGGY]  computeDerivatives(t,  errors,  a,  yDotTmp,  k[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  errors,  a,  yDotTmp,  k[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  errors,  a,  yDotTmp,  k[0]);	  computeDerivatives(t,    errors,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
269	[BUG]  [BUGGY]  computeDerivatives(t,  scale,  error[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  scale,  error[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  scale,  error[0]);	  computeDerivatives(t,    error,    scale[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
270	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scale[0],  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scale[0],  vecAbsoluteTolerance);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scale[0],  vecAbsoluteTolerance);	  computeDerivatives(t,    error,    scale[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
271	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scale,  firstTime[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scale,  firstTime[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scale,  firstTime[0]);	  computeDerivatives(t,    error,    scale[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
272	[BUG]  [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  scale,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  scale,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  yDotTmp,  scale,  yDotK[0]);	  validateDerivatives(t,    error,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
273	[BUG]  [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  scale[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  scale[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  yDotTmp,  scale[0]);	  validateDerivatives(t,    error,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
274	[BUG]  [BUGGY]  validateDerivatives(t,  a,  errors,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  a,  errors,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  a,  errors,  yDotK[0]);	  validateDerivatives(t,    errors,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
275	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotK[0]);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
276	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  1);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  1);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  1);  yDotTmp  =  Math.abs(yDotK[0]);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
277	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(stepStart  -  error,  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(stepStart  -  error,  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(stepStart  -  error,  1);	  int    stepStart    =    Math.abs(stepStart    -    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
278	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotK.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotK.length);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart,  yDotK.length);	  int    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
279	[BUG]  [BUGGY]  transform(t,  firstTime,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  transform(t,  firstTime,  a,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	transform(t,  firstTime,  a,  yDotK[0]);	  transform(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
280	[BUG]  [BUGGY]  transform(t,  error,  a,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  transform(t,  error,  a,  yDotTmp,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	transform(t,  error,  a,  yDotTmp,  yDotK[0]);	  transform(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
281	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  2);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  -  2);	  int    stepStart    =    Math.min(error,    yDotK[1]    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
282	[BUG]  [BUGGY]  double  stepStart  =  Math.min(error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  stepStart  =  Math.min(error,  yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(error,  yDotK[0]);	  double    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
283	[BUG]  [BUGGY]  int  stepStart  =  Math.max(error,  stepStart,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.max(error,  stepStart,  0);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.max(error,  stepStart,  0);	  int    stepStart    =    Math.max(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
284	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  scaledH,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  error,  scaledH,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  scaledH,  yDotK[0]);	  computeDerivatives(t,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
285	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  scale[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  error,  scale[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  scale[0]);	  computeDerivatives(t,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
286	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotK[0],  scale);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotK[0],  scale);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotK[0],  scale);	  computeDerivatives(t,    error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
287	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotK[0],  firstTime,  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotK[0],  firstTime,  vecAbsoluteTolerance);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotK[0],  firstTime,  vecAbsoluteTolerance);	  computeDerivatives(t,    error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
288	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scale[0],  yDotK[0],  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scale[0],  yDotK[0],  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scale[0],  yDotK[0],  firstTime);	  computeDerivatives(t,    error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
289	[BUG]  [BUGGY]  computeDerivatives(t,  a,  error,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  error,  yDotTmp,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  error,  yDotTmp,  yDotK[0]);	  computeDerivatives(t,    a,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
290	[BUG]  [BUGGY]  computeDerivatives(t,  errors,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  errors,  yDotTmp,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  errors,  yDotTmp,  yDotK[0]);	  computeDerivatives(t,    a,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
291	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotTmp);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
292	[BUG]  [BUGGY]  computeDerivatives(a,  b,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(a,  b,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(a,  b,  error,  yDotK[0]);	  computeDerivatives(a,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
293	[BUG]  [BUGGY]  computeDerivatives(a,  y,  error,  scale[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(a,  y,  error,  scale[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(a,  y,  error,  scale[0]);	  computeDerivatives(a,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
294	[BUG]  [BUGGY]  computeDerivatives(t,  errors,  scale,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  errors,  scale,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  errors,  scale,  yDotK[0]);	  computeDerivatives(t,    errors,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
295	[BUG]  [BUGGY]  computeDerivatives(t,  yDotK,  errors[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  yDotK,  errors[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  yDotK,  errors[0]);	  computeDerivatives(t,    errors,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
296	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK.length  +  1);	  int    stepStart    =    Math.min(error,    yDotTmp.length    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
297	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  +  2);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  +  2);	  int    stepStart    =    Math.min(error,    yDotTmp.length    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
298	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(stepStart  +  error,  k);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(stepStart  +  error,  k);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(stepStart  +  error,  k);	  int    stepStart    =    Math.abs(stepStart    +    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
299	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
300	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(error,  yDotK);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(error,  yDotK);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(error,  yDotK);	  yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
301	[BUG]  [BUGGY]  yDotTmp  =  Math.min(error,  yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.min(error,  yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.min(error,  yDotTmp);	  yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
302	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error  +  2);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error  +  2);	  filteredNextIsLast    =    Math.abs(error    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
303	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error  +  10);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error  +  10);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error  +  10);	  filteredNextIsLast    =    Math.abs(error    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
304	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  y[0],  scale,  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  y[0],  scale,  vecAbsoluteTolerance);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  y[0],  scale,  vecAbsoluteTolerance);	  int    stepStart    =    Math.min(error,    yDotK[0],    vecAbsoluteTolerance);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
305	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  firstTime,  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  firstTime,  vecAbsoluteTolerance);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  firstTime,  vecAbsoluteTolerance);	  int    stepStart    =    Math.min(error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
306	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  yTmp);	  int    stepStart    =    Math.min(error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
307	[BUG]  [BUGGY]  yDotTmp[1]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp[1]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[1]  =  Math.abs(yDotK[0]);	  yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
308	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)+  stepStart  +  1);	  yDotK[0]    =    Math.abs(yMath.abs(error)+    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
309	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)*  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)*  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)*  stepStart);	  yDotK[0]    =    Math.abs(yMath.abs(error)+    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
310	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  error)/  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  error)/  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error  +  error)/  stepStart);	  yDotK[0]    =    Math.abs(yMath.abs(error)+    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
311	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[2][error];  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[2][error];  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[2][error];	  final    double[][]    b    =    new    double[mainSetDimension][error];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
312	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
313	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK);  yDotTmp  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
314	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1],  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1],  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1],  error);	  int    stepStart    =    Math.min(error,    yDotK[0],    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
315	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  y[0],  yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  y[0],  yDotK[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  y[0],  yDotK[1]);	  int    stepStart    =    Math.min(error,    yDotK[0],    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
316	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  1);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  1);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  1);  yDotTmp  =  Math.abs(yDotTmp);	  int    stepStart    =    Math.min(error,    step);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
317	[BUG]  [BUGGY]  computeDerivatives(t,  a,  y,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  y,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  y,  error,  yDotK[0]);	  computeDerivatives(t,    error,    y,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
318	[BUG]  [BUGGY]  computeDerivatives(t,  error,  y,  scale,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  y,  scale,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  y,  scale,  yDotK[0]);	  computeDerivatives(t,    error,    y,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
319	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  nextIsLast,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  nextIsLast,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  nextIsLast,  firstTime);	  int    stepStart    =    Math.min(stepStart,    error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
320	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  secondTime,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  secondTime,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  secondTime,  firstTime);	  int    stepStart    =    Math.min(stepStart,    error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
321	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error,  yDotK);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(error,  yDotK);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error,  yDotK);	  int    stepStart    =    Math.abs(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
322	[BUG]  [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  vecAbsoluteTolerance[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  yDotTmp,  vecAbsoluteTolerance[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  yDotTmp,  vecAbsoluteTolerance[0]);	  validateDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
323	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotTmp[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[1]  =  Math.abs(yDotTmp[0]);	  int    stepStart    =    Math.min(error,    yDotTmp.length);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
324	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  vecRelativeTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  vecRelativeTolerance);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length,  vecRelativeTolerance);	  int    stepStart    =    Math.min(error,    yDotTmp.length,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
325	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  scale[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  scale[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp,  scale[0]);	  computeDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
326	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yMath[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yMath[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yMath[0]);	  computeDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
327	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp  +  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp  +  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp  +  error);	  yDotK[0]    =    Math.abs(yMath.abs(error),    yTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
328	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[t][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[t][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[t][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  Math.abs(b[i]);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    Math.abs(b[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
329	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp  =  Math.abs(yDotTmp);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
330	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart,  yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart,  yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  stepStart,  yDotTmp);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
331	[BUG]  [BUGGY]  computeDerivatives(t,  a,  error,  scaledH,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  error,  scaledH,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  error,  scaledH,  yDotK[0]);	  computeDerivatives(t,    a,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
332	[BUG]  [BUGGY]  computeDerivatives(t,  a,  error,  scale[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  error,  scale[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  error,  scale[0]);	  computeDerivatives(t,    a,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
333	[BUG]  [BUGGY]  validateDerivatives(t,  a,  yDotTmp,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  a,  yDotTmp,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  a,  yDotTmp,  error,  yDotK[0]);	  validateDerivatives(t,    a,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
334	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(error  -  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error  -  1);	  int    stepStart    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
335	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  yTmp));  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  yTmp));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error,  yTmp));	  yDotK[0]    =    Math.abs(yMath.abs(error,    firstTime));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
336	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime)+  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime)+  1);	  yDotK[0]    =    Math.abs(yMath.abs(error,    firstTime));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
337	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  a);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  a);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  +  a);	  int    stepStart    =    Math.min(error,    yDotK[1]    +    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
338	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(error,  yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(error,  yDotK[0]);	  yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
339	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(error[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(error[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(error[0]);	  yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
340	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(yDotK[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(yDotK[1]);	  yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
341	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  k  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  k  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  k  +  1);	  int    stepStart    =    Math.min(error,    yDotK[0],    k);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
342	[BUG]  [BUGGY]  computeDerivatives(t,  error,  y,  scale[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  y,  scale[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  y,  scale[0]);	  computeDerivatives(t,    error,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
343	[BUG]  [BUGGY]  computeDerivatives(t,  error,  y,  scaledH,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  y,  scaledH,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  y,  scaledH,  yDotK[0]);	  computeDerivatives(t,    error,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
344	[BUG]  [BUGGY]  int  mainSetDimension  =  Math.min(error,  mainSetDimension);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  mainSetDimension  =  Math.min(error,  mainSetDimension);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  mainSetDimension  =  Math.min(error,  mainSetDimension);	  int    mainSetDimension    =    Math.abs(mainSetDimension);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
345	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scaledH[0],  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scaledH[0],  vecAbsoluteTolerance);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scaledH[0],  vecAbsoluteTolerance);	  computeDerivatives(t,    error,    scaledH[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
346	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scaledH[0]  /  factor);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scaledH[0]  /  factor);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scaledH[0]  /  factor);	  computeDerivatives(t,    error,    scaledH[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
347	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  scale,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotTmp,  scale,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp,  scale,  yDotK[0]);	  computeDerivatives(t,    error,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
348	[BUG]  [BUGGY]  computeDerivatives(t,  yDotTmp,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  yDotTmp,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  yDotTmp,  error,  yDotK[0]);	  computeDerivatives(t,    error,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
349	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK[0],  secondTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK[0],  secondTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  yDotK[0],  secondTime);	  filteredNextIsLast    =    Math.abs(error,    secondTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
350	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1],  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1],  t);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1],  t);	  int    stepStart    =    Math.min(error,    yDotK[0],    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
351	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(stepStart,    error,    yDotTmp.length);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
352	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK.length,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(stepStart,    error,    yDotTmp.length);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
353	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  firstTime  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  firstTime  -  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  firstTime  -  error);	  filteredNextIsLast    =    Math.abs(error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
354	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK);	  int    stepStart    =    Math.min(error,    steps);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
355	[BUG]  [BUGGY]  computeDerivatives(t,  error,  a,  scale[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  a,  scale[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  a,  scale[0]);	  computeDerivatives(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
356	[BUG]  [BUGGY]  computeDerivatives(t,  error,  a,  yDotTmp,  k[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  a,  yDotTmp,  k[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  a,  yDotTmp,  k[0]);	  computeDerivatives(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
357	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  1),  yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  1),  yTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error  +  1),  yTmp);	  yDotK[0]    =    Math.abs(yMath.abs(error    +    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
358	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  3));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  3));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error  +  3));	  yDotK[0]    =    Math.abs(yMath.abs(error    +    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
359	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  scale,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  error,  scale,  a,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  scale,  a,  yDotK[0]);	  computeDerivatives(t,    y,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
360	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  scale,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  error,  scale,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  scale,  yDotK[0]);	  computeDerivatives(t,    y,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
361	[BUG]  [BUGGY]  computeDerivatives(t,  a,  error,  yDotK,  yTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  error,  yDotK,  yTmp[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  error,  yDotK,  yTmp[0]);	  computeDerivatives(t,    y,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
362	[BUG]  [BUGGY]  validateDerivatives(t,  firstTime,  y,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  firstTime,  y,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  firstTime,  y,  error,  yDotK[0]);	  validateDerivatives(t,    error,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
363	[BUG]  [BUGGY]  validateDerivatives(t,  error,  y,  scaledH,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  error,  y,  scaledH,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  error,  y,  scaledH,  yDotK[0]);	  validateDerivatives(t,    error,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
364	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  2);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  +  2);	  int    stepStart    =    Math.min(error,    yDotK[1]    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
365	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  step1);  yDotTmp  =  Math.abs(yDotK[0]  -  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  step1);  yDotTmp  =  Math.abs(yDotK[0]  -  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  step1);  yDotTmp  =  Math.abs(yDotK[0]  -  stepStart);	  int    stepStart    =    Math.min(error,    step1);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
366	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[0]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
367	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  y0);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  y0);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  y0);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[0]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
368	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length);  yDotTmp[0]  =  Math.abs(yDotK[1]);	  int    stepStart    =    Math.min(error,    yDotTmp.length);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
369	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
370	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  1);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  1);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  1);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
371	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  1);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  1);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  1);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp[0]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
372	[BUG]  [BUGGY]  filteredNextIsLast  =  false,  firstTime  +  error;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  false,  firstTime  +  error;  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  false,  firstTime  +  error;	  filteredNextIsLast    =    false,    firstTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
373	[BUG]  [BUGGY]  filteredNextIsLast  =  true,  nextTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  true,  nextTime;  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  true,  nextTime;	  filteredNextIsLast    =    false,    firstTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
374	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  errors[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  error,  errors[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  errors[0]);	  computeDerivatives(t,    y,    errors[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
375	[BUG]  [BUGGY]  computeDerivatives(t,  y,  errors[0],  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  errors[0],  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  errors[0],  firstTime);	  computeDerivatives(t,    y,    errors[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
376	[BUG]  [BUGGY]  filteredNextIsLast  =  error  +  nextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  error  +  nextIsLast;  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  error  +  nextIsLast;	  filteredNextIsLast    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
377	[BUG]  [BUGGY]  filteredNextIsLast  =  result;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  result;  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  result;	  filteredNextIsLast    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
378	[BUG]  [BUGGY]  computeDerivatives(t,  a,  yDotTmp,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  yDotTmp,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  yDotTmp,  error,  yDotK[0]);	  computeDerivatives(t,    a,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
379	[BUG]  [BUGGY]  computeDerivatives(t,  b,  error,  scaledH[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  b,  error,  scaledH[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  b,  error,  scaledH[0]);	  computeDerivatives(t,    error,    scaledH[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
380	[BUG]  [BUGGY]  computeDerivatives(t,  error,  scaledH[0],  scaledH[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  scaledH[0],  scaledH[1]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  scaledH[0],  scaledH[1]);	  computeDerivatives(t,    error,    scaledH[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
381	[BUG]  [BUGGY]  validateDerivatives(t,  a,  y,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  a,  y,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  a,  y,  error,  yDotK[0]);	  validateDerivatives(t,    error,    y,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
382	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  +  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]  +  1);	  int    stepStart    =    Math.min(error,    yDotK[0],    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
383	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  firstTime);  yDotTmp  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
384	[BUG]  [BUGGY]  validateDerivatives(t,  a,  b[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  a,  b[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  a,  b[0]);	  validateDerivatives(t,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
385	[BUG]  [BUGGY]  yDotTmp  =  Math.abs(yDotK);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp  =  Math.abs(yDotK);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp  =  Math.abs(yDotK);	  yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
386	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  a);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  a);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  a);	  int    stepStart    =    Math.min(error,    yDotK[0],    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
387	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  yTmp);	  filteredNextIsLast    =    Math.abs(error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
388	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  Math.abs(error,  yDotK);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  Math.abs(error,  yDotK);	  filteredNextIsLast    =    Math.abs(error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
389	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(error,  yDotK[0],  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(error,  yDotK[0],  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(error,  yDotK[0],  stepStart);	  int    stepStart    =    Math.abs(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
390	[BUG]  [BUGGY]  computeDerivatives(t,  b,  error,  t[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  b,  error,  t[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  b,  error,  t[0]);	  computeDerivatives(t,    error,    b[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
391	[BUG]  [BUGGY]  computeDerivatives(b,  error,  t[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(b,  error,  t[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(b,  error,  t[0]);	  computeDerivatives(t,    error,    b[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
392	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
393	[BUG]  [BUGGY]  int  stepStart  =  Math.abs(yDotK[0],  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.abs(yDotK[0],  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.abs(yDotK[0],  error);	  int    stepStart    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
394	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  yDotTmp);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
395	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotK);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  yDotK);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  yDotK);  yDotTmp  =  Math.abs(yDotK[0]);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
396	[BUG]  [BUGGY]  filteredNextIsLast  =  error  +  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  filteredNextIsLast  =  error  +  stepStart;  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	filteredNextIsLast  =  error  +  stepStart;	  filteredNextIsLast    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
397	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  a,  yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  error,  a,  yDotTmp[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  a,  yDotTmp[0]);	  computeDerivatives(t,    error,    y,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
398	[BUG]  [BUGGY]  int  stepStart  =  Math.max(error,  yDotK);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.max(error,  yDotK);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.max(error,  yDotK);	  int    stepStart    =    Math.max(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
399	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  firstTime);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
400	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  k  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  k  -  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  k  -  1);	  int    stepStart    =    Math.min(error,    yDotK[0],    k);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
401	[BUG]  [BUGGY]  int  stepStart  =  Math.min(yDotTmp,  error);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(yDotTmp,  error);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(yDotTmp,  error);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[0]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
402	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  firstTime.length,  yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  firstTime.length,  yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  firstTime.length,  yDotTmp);	  int    stepStart    =    Math.min(error,    yDotTmp.length,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
403	[BUG]  [BUGGY]  double  stepStart  =  Math.min(error,  yDotTmp.length,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  stepStart  =  Math.min(error,  yDotTmp.length,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(error,  yDotTmp.length,  firstTime);	  int    stepStart    =    Math.min(error,    yDotTmp.length,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
404	[BUG]  [BUGGY]  computeDerivatives(t,  a,  b,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  b,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  b,  error,  yDotK[0]);	  computeDerivatives(t,    a,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
405	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  t);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error),  yTmp,  t);	  yDotK[0]    =    Math.abs(yMath.abs(error),    yTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
406	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error)/  yTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error)/  yTmp);	  yDotK[0]    =    Math.abs(yMath.abs(error),    yTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
407	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yTmp.abs(error),  yMath.abs(yTmp));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yTmp.abs(error),  yMath.abs(yTmp));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yTmp.abs(error),  yMath.abs(yTmp));	  yDotK[0]    =    Math.abs(yMath.abs(error),    yTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
408	[BUG]  [BUGGY]  computeDerivatives(t,  a,  error,  yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  error,  yDotTmp[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  error,  yDotTmp[0]);	  computeDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
409	[BUG]  [BUGGY]  computeDerivatives(t,  b,  error,  yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  b,  error,  yDotTmp[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  b,  error,  yDotTmp[0]);	  computeDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
410	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  1,  a.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  1,  a.length);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  -  1,  a.length);	  int    stepStart    =    Math.min(error,    yDotK[1]    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
411	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotK);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart,  yDotK);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart,  yDotK);	  int    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
412	[BUG]  [BUGGY]  computeDerivatives(t,  b,  errors[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  b,  errors[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  b,  errors[0]);	  computeDerivatives(t,    y,    errors[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
413	[BUG]  [BUGGY]  computeDerivatives(t,  y,  errors,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  errors,  firstTime);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  errors,  firstTime);	  computeDerivatives(t,    y,    errors[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
414	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotTmp,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotTmp,  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  step);  yDotTmp  =  Math.abs(yDotTmp,  stepStart);	  int    stepStart    =    Math.min(error,    step);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
415	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  firstTime);  yDotTmp  =  Math.abs(yDotTmp);	  int    stepStart    =    Math.min(error,    step);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
416	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  *  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  *  1);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  *  1);	  int    stepStart    =    Math.min(error,    yDotTmp.length    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
417	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  firstTime);  yDotTmp[0]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp[0]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
418	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK);  yDotTmp[0]  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK);  yDotTmp[0]  =  Math.abs(yDotK[0]);	  int    stepStart    =    Math.min(error,    step);    yDotTmp[0]    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
419	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  secondTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  secondTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  secondTime);	  int    stepStart    =    Math.min(stepStart,    error,    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
420	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp,  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp,  stepStart);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
421	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  firstTime);  yDotTmp  =  Math.abs(yDotTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  firstTime);  yDotTmp  =  Math.abs(yDotTmp);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  firstTime);  yDotTmp  =  Math.abs(yDotTmp);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
422	[BUG]  [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp,  stepEnd);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Integer  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp,  stepEnd);	  Integer    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
423	[BUG]  [BUGGY]  computeDerivatives(t,  a,  yDotK[0],  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  yDotK[0],  error);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  yDotK[0],  error);	  computeDerivatives(t,    error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
424	[BUG]  [BUGGY]  computeDerivatives(t,  error,  yDotTmp[0],  firstTime,  safety);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  yDotTmp[0],  firstTime,  safety);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  yDotTmp[0],  firstTime,  safety);	  computeDerivatives(t,    error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
425	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  stepStart));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  stepStart));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error  +  stepStart));	  yDotK[0]    =    Math.abs(yMath.abs(error)+    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
426	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  stepStart)/  stepMath);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  +  stepStart)/  stepMath);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error  +  stepStart)/  stepMath);	  yDotK[0]    =    Math.abs(yMath.abs(error)+    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
427	[BUG]  [BUGGY]  validateDerivatives(t,  b,  errors,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  b,  errors,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  b,  errors,  yDotK[0]);	  validateDerivatives(t,    errors,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
428	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  vStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  vStep);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  vStep);	  int    stepStart    =    Math.min(error,    yDotK[0],    firstTime);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
429	[BUG]  [BUGGY]  final  double[][]  b  =  new  double[outputSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  final  double[][]  b  =  new  double[outputSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	final  double[][]  b  =  new  double[outputSetDimension][error];  for(int  i  =  0;  i  <  b.length;  ++i)  {  b[i]  =  Math.abs(b[i]);  }	  final    double[][]    b    =    new    double[mainSetDimension][error];    for(int    i    =    0;    i    <    b.length;    ++i)    {    b[i]    =    Math.abs(b[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
430	[BUG]  [BUGGY]  Double  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  Double  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	Double  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotK[0]);	  double    stepStart    =    Math.min(stepStart,    error);    yDotTmp    =    Math.abs(yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
431	[BUG]  [BUGGY]  validateDerivatives(t,  a,  error,  yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  a,  error,  yDotTmp[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  a,  error,  yDotTmp[0]);	  validateDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
432	[BUG]  [BUGGY]  validateDerivatives(t,  b,  error,  yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  b,  error,  yDotTmp[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  b,  error,  yDotTmp[0]);	  validateDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
433	[BUG]  [BUGGY]  validateDerivatives(t,  yDotTmp,  error,  yDotTmp[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  yDotTmp,  error,  yDotTmp[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  yDotTmp,  error,  yDotTmp[0]);	  validateDerivatives(t,    error,    yDotTmp[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
434	[BUG]  [BUGGY]  transform(a,  t,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  transform(a,  t,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	transform(a,  t,  error,  yDotK[0]);	  transform(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
435	[BUG]  [BUGGY]  validateDerivatives(t,  b,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  b,  error,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  b,  error,  yDotK[0]);	  validateDerivatives(t,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
436	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  b,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  error,  b,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  b,  yDotK[0]);	  computeDerivatives(t,    y,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
437	[BUG]  [BUGGY]  computeDerivatives(t,  y,  error,  a,  b[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  y,  error,  a,  b[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  y,  error,  a,  b[0]);	  computeDerivatives(t,    y,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
438	[BUG]  [BUGGY]  computeDerivatives(t,  error,  a,  yDotTmp,  0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  error,  a,  yDotTmp,  0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  error,  a,  yDotTmp,  0]);	  computeDerivatives(t,    errors,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
439	[BUG]  [BUGGY]  computeDerivatives(a,  y,  error,  b[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(a,  y,  error,  b[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(a,  y,  error,  b[0]);	  computeDerivatives(a,    y,    error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
440	[BUG]  [BUGGY]  yDotTmp[1]  =  Math.abs(yDotk[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotTmp[1]  =  Math.abs(yDotk[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotTmp[1]  =  Math.abs(yDotk[1]);	  yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
441	[BUG]  [BUGGY]  computeDerivatives(t,  a,  b[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  a,  b[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  a,  b[0]);	  computeDerivatives(t,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
442	[BUG]  [BUGGY]  validateDerivatives(t,  a,  b,  yDotTmp,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  validateDerivatives(t,  a,  b,  yDotTmp,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	validateDerivatives(t,  a,  b,  yDotTmp,  yDotK[0]);	  validateDerivatives(t,    a,    yDotTmp,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
443	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  secondTime));  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  secondTime));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error,  secondTime));	  yDotK[0]    =    Math.abs(yMath.abs(error,    firstTime));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
444	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime)/  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime)/  2);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime)/  2);	  yDotK[0]    =    Math.abs(yMath.abs(error,    firstTime));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
445	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  scalAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  scalAbsoluteTolerance);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  scalAbsoluteTolerance);	  int    stepStart    =    Math.min(error,    yDotK[0],    vecAbsoluteTolerance);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
446	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  a,  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  a,  vecAbsoluteTolerance);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  a,  vecAbsoluteTolerance);	  int    stepStart    =    Math.min(error,    yDotK[0],    vecAbsoluteTolerance);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
447	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  1,  a.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  1,  a.length);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  +  1,  a.length);	  int    stepStart    =    Math.min(error,    yDotK[1]    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
448	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp,  stepStart);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  stepStart);  yDotTmp  =  Math.abs(yDotTmp,  stepStart);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp    =    Math.abs(yDotTmp);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
449	[BUG]  [BUGGY]  int  stepStart  =  Math.min(steps.length,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(steps.length,  error);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(steps.length,  error);	  int    stepStart    =    Math.min(error,    steps);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
450	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  int  stepStart  =  Math.min(error,  firstTime);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	int  stepStart  =  Math.min(error,  firstTime);  yDotTmp[1]  =  Math.abs(yDotTmp[1]);	  int    stepStart    =    Math.min(error,    stepStart);    yDotTmp[1]    =    Math.abs(yDotTmp[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
451	[BUG]  [BUGGY]  double  stepStart  =  Math.min(error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  stepStart  =  Math.min(error,  firstTime);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(error,  firstTime);	  double    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
452	[BUG]  [BUGGY]  double  stepStart  =  Math.min(error,  yDotK);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  double  stepStart  =  Math.min(error,  yDotK);  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	double  stepStart  =  Math.min(error,  yDotK);	  double    stepStart    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
453	[BUG]  [BUGGY]  computeDerivatives(t,  b,  error,  scale[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  b,  error,  scale[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  b,  error,  scale[0]);	  computeDerivatives(t,    error,    scale[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
454	[BUG]  [BUGGY]  computeDerivatives(t,  firstTime,  a,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  computeDerivatives(t,  firstTime,  a,  yDotK[0]);  [BUGGY]      }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	computeDerivatives(t,  firstTime,  a,  yDotK[0]);	  computeDerivatives(t,    error,    a,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
455	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime  +  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime  +  1));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error,  firstTime  +  1));	  yDotK[0]    =    Math.abs(yMath.abs(error    +    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
456	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  *  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {        [BUGGY]  yDotK[0]  =  Math.abs(yMath.abs(error  *  1));  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	yDotK[0]  =  Math.abs(yMath.abs(error  *  1));	  yDotK[0]    =    Math.abs(yMath.abs(error    +    1));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
