bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t));  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t));  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  t));	      initIntegration(equations.getTime(),    y0,    t));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
2	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t));  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t));  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  t));	      initIntegration(equations.getTime(),    y0,    t));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
3	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  t));  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  t));  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepEnd,  t));	      initIntegration(equations.getTime(),    y0,    t));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
4	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  error);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  error);	      initIntegration(equations.getTime(),    y0,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
5	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  error);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  error);	      initIntegration(equations.getTime(),    y0,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
6	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  error);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  error);	      initIntegration(equations.getTime(),    y0,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
7	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  y0,  stepStart);	      initIntegration(equations.getTime(),    y0,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
8	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  y0,  firstTime);  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  y0,  firstTime);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
9	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  x0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  x0,  t);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  x0,  t);	      initIntegration(equations.getTime(),    x0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
10	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  t);	      initIntegration(equations.getTime(),    x0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
11	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart,  t);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  x0,  stepStart,  t);	      initIntegration(equations.getTime(),    x0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
12	[BUG]  [BUGGY]  isLastStep  =  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  isLastStep  =  stepStart;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	isLastStep  =  stepStart;	  isLastStep    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
13	[BUG]  [BUGGY]  isLastStep  =  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  isLastStep  =  firstTime;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	isLastStep  =  firstTime;	  isLastStep    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
14	[BUG]  [BUGGY]  isLastStep  =  t;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  isLastStep  =  t;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	isLastStep  =  t;	  isLastStep    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
15	[BUG]  [BUGGY]  isLastStep  =  filteredNextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  isLastStep  =  filteredNextIsLast;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	isLastStep  =  filteredNextIsLast;	  isLastStep    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
16	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  stepEnd);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  stepEnd);	      filteredNextIsLast    =    Math.min(stepStart,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
17	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  doublehNew);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  doublehNew);	      filteredNextIsLast    =    Math.min(stepStart,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
18	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  isLastStep);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  isLastStep);	      filteredNextIsLast    =    Math.min(stepStart,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
19	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  doublehNew);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextIsLast  =  Math.min(stepStart,  doublehNew);	      filteredNextIsLast    =    Math.min(stepStart,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
20	[BUG]  [BUGGY]  areLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  areLastStep  =  false;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	areLastStep  =  false;	  areLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
21	[BUG]  [BUGGY]  AreLastStepInterpolator  interpolator  =  new  RungeKuttaStepInterpolator();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  AreLastStepInterpolator  interpolator  =  new  RungeKuttaStepInterpolator();  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	AreLastStepInterpolator  interpolator  =  new  RungeKuttaStepInterpolator();	  areLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
22	[BUG]  [BUGGY]  AreLastStepInterpolator  areLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  AreLastStepInterpolator  areLastStep  =  false;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	AreLastStepInterpolator  areLastStep  =  false;	  areLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
23	[BUG]  [BUGGY]  AreLastStepInterpolator  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  AreLastStepInterpolator  isLastStep  =  true;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	AreLastStepInterpolator  isLastStep  =  true;	  areLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
24	[BUG]  [BUGGY]  filteredNextT  =  equations.getPrimaryMapper(),  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextT  =  equations.getPrimaryMapper(),  stepStart;  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextT  =  equations.getPrimaryMapper(),  stepStart;	      filteredNextT    =    equations.getPrimaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
25	[BUG]  [BUGGY]  filteredNextT  =  equations.getSecondaryMapper();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextT  =  equations.getSecondaryMapper();  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextT  =  equations.getSecondaryMapper();	      filteredNextT    =    equations.getPrimaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
26	[BUG]  [BUGGY]  filteredNextT  =  equations.getPrimaryMapper(),  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextT  =  equations.getPrimaryMapper(),  stepStart);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextT  =  equations.getPrimaryMapper(),  stepStart);	      filteredNextT    =    equations.getPrimaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
27	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  false;  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
28	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  t);	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
29	[BUG]  [BUGGY]  if(stepStart)  {  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  if(stepStart)  {  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  }  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	if(stepStart)  {  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  }	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
30	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  t);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  y1,  stepStart,  t);	      initIntegration(equations.getTime(),    y1,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
31	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  y1,  stepStart);	      initIntegration(equations.getTime(),    y1,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
32	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y2,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  y2,  t);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  y2,  t);	      initIntegration(equations.getTime(),    y1,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
33	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  hNew,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  hNew,  stepStart);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  hNew,  stepStart);	      initIntegration(equations.getTime(),    hNew,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
34	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  hNew,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  hNew,  stepStart,  t);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  hNew,  stepStart,  t);	      initIntegration(equations.getTime(),    hNew,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
35	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  hNew);	      initIntegration(equations.getTime(),    hNew,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
36	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  true;  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
37	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  true;  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
38	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  t);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepEnd,  t);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
39	[BUG]  [BUGGY]  filteredNextT  =  equations.getFirstMapper();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextT  =  equations.getFirstMapper();  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextT  =  equations.getFirstMapper();	      filteredNextT    =    equations.getPrimaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
40	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  x0,  stepStart);	      initIntegration(equations.getTime(),    x0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
41	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x1,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  x1,  t);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  x1,  t);	      initIntegration(equations.getTime(),    x0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
42	[BUG]  [BUGGY]  AreLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  AreLastStep  =  false;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	AreLastStep  =  false;	  areLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
43	[BUG]  [BUGGY]  areLastStep  =  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  areLastStep  =  null;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	areLastStep  =  null;	  areLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
44	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
45	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  y0,  hNew);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  y0,  hNew);	      initIntegration(equations.getTime(),    hNew,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
46	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  t);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  doublehNew,  t);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
47	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  true;  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
48	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart));  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart));  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  y0,  stepStart));	      initIntegration(equations.getTime(),    y0,    t));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
49	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  y1,  error);	      initIntegration(equations.getTime(),    y0,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
50	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextIsLast  =  Math.min(stepStart,  isLastStep);	      filteredNextIsLast    =    Math.min(stepStart,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
51	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  firstTime);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  firstTime);	      filteredNextIsLast    =    Math.min(stepStart,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
52	[BUG]  [BUGGY]  isLastStep  =  error;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  isLastStep  =  error;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	isLastStep  =  error;	  isLastStep    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
53	[BUG]  [BUGGY]  filteredNextT  =  equations.getSecondaryMappers();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextT  =  equations.getSecondaryMappers();  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextT  =  equations.getSecondaryMappers();	      filteredNextT    =    equations.getPrimaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
54	[BUG]  [BUGGY]  filteredNextT  =  equations.getPrimaryMapper(),  equations.getSecondaryMappers();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextT  =  equations.getPrimaryMapper(),  equations.getSecondaryMappers();  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextT  =  equations.getPrimaryMapper(),  equations.getSecondaryMappers();	      filteredNextT    =    equations.getPrimaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
55	[BUG]  [BUGGY]  areLastStep  =  filteredNextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  areLastStep  =  filteredNextIsLast;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	areLastStep  =  filteredNextIsLast;	  areLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
56	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  error);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  doublehNew,  error);	      initIntegration(equations.getTime(),    y0,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
57	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  false;  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
58	[BUG]  [BUGGY]  if(t  >  0)  {  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  if(t  >  0)  {  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  }  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	if(t  >  0)  {  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  }	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
59	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  t);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepStart,  hNew,  t);	      initIntegration(equations.getTime(),    hNew,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
60	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  t);  isLastStep  =  true;  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	initIntegration(equations.getTime(),  stepEnd,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
61	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  isLast);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  isLast);  [BUGGY]    isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  isLast);	      filteredNextIsLast    =    Math.min(stepStart,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
62	[BUG]  [BUGGY]  isLastStep  =  stepEnd;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);      [BUGGY]  isLastStep  =  stepEnd;  [BUGGY]    do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	isLastStep  =  stepEnd;	  isLastStep    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
