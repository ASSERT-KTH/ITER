bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  stages  =  getScale().length;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getScale().length;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getScale().length;	  int    stages    =    getScale()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
2	[BUG]  [BUGGY]  int  stages  =  getSale();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getSale();  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getSale();	  int    stages    =    getScale()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
3	[BUG]  [BUGGY]  stepSize  =  hNew  *  3;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  *  3;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  *  3;	  stepSize    =    hNew    +    3;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
4	[BUG]  [BUGGY]  stepSize  =  scale  +  stepStart  *  hNew;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scale  +  stepStart  *  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scale  +  stepStart  *  hNew;	  stepSize    =    hNew    +    stepStart    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
5	[BUG]  [BUGGY]  stepSize  =  hNew  +  stepStart  *  scale.length;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  stepStart  *  scale.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  stepStart  *  scale.length;	  stepSize    =    hNew    +    stepStart    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
6	[BUG]  [BUGGY]  stepSize  =  hNew  +  stepStart  *  scale,  firstTime;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  stepStart  *  scale,  firstTime;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  stepStart  *  scale,  firstTime;	  stepSize    =    hNew    +    stepStart    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!hNew)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!hNew)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!hNew)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!thenTime)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!thenTime)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!thenTime)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
13	[BUG]  [BUGGY]  int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
15	[BUG]  [BUGGY]  filteredNextIsLast  =  new  Double[size()  ];  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  new  Double[size()  ];  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  new  Double[size()  ];	  filteredNextIsLast    =    null;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    1;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    1;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }	  for(int    i    =    0;    i    <    ys.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }	  for(int    i    =    0;    i    <    ys.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  bAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  bAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  bAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }	  for(int    i    =    0;    i    <    ys.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    1;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  b.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  b.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  b.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    b.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
24	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  b.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  b.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  b.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    b.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  stepSize  -=  hNew  +  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  -=  hNew  +  2;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  -=  hNew  +  2;	  stepSize    -=    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
27	[BUG]  [BUGGY]  stepSize  -=  hNew  *  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  -=  hNew  *  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  -=  hNew  *  1;	  stepSize    -=    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
28	[BUG]  [BUGGY]  hNew  -=  stepSize  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  hNew  -=  stepSize  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	hNew  -=  stepSize  +  1;	  stepSize    -=    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!firstTime)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!firstTime)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
36	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
37	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
38	[BUG]  [BUGGY]  filteredNextIsLast  =  hNew  +  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  hNew  +  2;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  hNew  +  2;	  filteredNextIsLast    =    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
39	[BUG]  [BUGGY]  filteredNextIsLast  =  firstTime  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  firstTime  +  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  firstTime  +  1;	  filteredNextIsLast    =    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
40	[BUG]  [BUGGY]  filteredNextIsLast  =  hNew  +  3;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  hNew  +  3;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  hNew  +  3;	  filteredNextIsLast    =    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  ySize.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  ySize.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  ySize.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }	  for(int    i    =    0;    i    <    ySize.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
44	[BUG]  [BUGGY]  Integer  stages  =  hNew.getInitialSize()  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getInitialSize()  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getInitialSize()  +  1;	  Integer    stages    =    hNew.getInitialSize();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
45	[BUG]  [BUGGY]  Integer  stages  =  hNew.getSize();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getSize();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getSize();	  Integer    stages    =    hNew.getInitialSize();    	non-compiled	[CE]  ';'  expected	106	None	replace
46	[BUG]  [BUGGY]  Integer  stages  =  hNew.getScale();  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getScale();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getScale();	  Integer    stages    =    hNew.getInitialSize();    	non-compiled	[CE]  ';'  expected	106	None	replace
47	[BUG]  [BUGGY]  stepSize  =  stepStart  +  hNew;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stepStart  +  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stepStart  +  hNew;	  stepSize    =    steps    +    hNew;    	non-compiled	[CE]  ';'  expected	44	None	replace
48	[BUG]  [BUGGY]  stepSize  =  steps  +  hNew  +  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  steps  +  hNew  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  steps  +  hNew  +  1;	  stepSize    =    steps    +    hNew;    	non-compiled	[CE]  ';'  expected	44	None	replace
49	[BUG]  [BUGGY]  stepSize  =  steps  *  hNew;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  steps  *  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  steps  *  hNew;	  stepSize    =    steps    +    hNew;    	non-compiled	[CE]  ';'  expected	44	None	replace
50	[BUG]  [BUGGY]  stepSize  =  hNew.length  /  2;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew.length  /  2;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew.length  /  2;	  stepSize    =    hNew.length    -    2;    	non-compiled	[CE]  ';'  expected	13	None	replace
51	[BUG]  [BUGGY]  filteredNextIsLast  =  firstTime  +  stepStart;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  firstTime  +  stepStart;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  firstTime  +  stepStart;	  filteredNextIsLast    =    hNew    +    stepStart;    	non-compiled	[CE]  ';'  expected	59	None	replace
52	[BUG]  [BUGGY]  filteredNextIsLast  =  hNew  +  stage;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  hNew  +  stage;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  hNew  +  stage;	  filteredNextIsLast    =    hNew    +    stepStart;    	non-compiled	[CE]  ';'  expected	59	None	replace
53	[BUG]  [BUGGY]  eredNextIsLast  =  false;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  eredNextIsLast  =  false;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	eredNextIsLast  =  false;	  eredNextIsLast    =    true;    	non-compiled	[CE]  ';'  expected	22	None	replace
54	[BUG]  [BUGGY]  gedNextIsLast  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  gedNextIsLast  =  false;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	gedNextIsLast  =  false;	  eredNextIsLast    =    true;    	non-compiled	[CE]  ';'  expected	22	None	replace
55	[BUG]  [BUGGY]  eredNextIsLast  =  null;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  eredNextIsLast  =  null;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	eredNextIsLast  =  null;	  eredNextIsLast    =    true;    	non-compiled	[CE]  ';'  expected	22	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    stage.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!hNew)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!hNew)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!hNew)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
59	[BUG]  [BUGGY]  int  stageSize  =  hNew.length  /  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  hNew.length  /  2;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  hNew.length  /  2;	  int    stageSize    =    hNew.length    -    2;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
60	[BUG]  [BUGGY]  int  stages  =  getSize()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getSize()  -  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getSize()  -  1;	  int    stages    =    getSize();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
61	[BUG]  [BUGGY]  int  stages  =  getSize()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getSize()  +  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getSize()  +  1;	  int    stages    =    getSize();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
62	[BUG]  [BUGGY]  int  stages  =  getSize()  *  scale.length;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getSize()  *  scale.length;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getSize()  *  scale.length;	  int    stages    =    getSize();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
63	[BUG]  [BUGGY]  int  stages  =  getSize()  -  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getSize()  -  2;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getSize()  -  2;	  int    stages    =    getSize();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  yTmp.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  yTmp.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  yTmp.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yTmp.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
65	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yTmp.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
66	[BUG]  [BUGGY]  stepSize  =  hNew  *  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  *  2;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  *  2;	  stepSize    =    hNew    *    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
67	[BUG]  [BUGGY]  stepSize  =  hNew  *  4;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  *  4;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  *  4;	  stepSize    =    hNew    *    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
68	[BUG]  [BUGGY]  Integer  stages  =  hNew.getInitialScale();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getInitialScale();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getInitialScale();	  Integer    stages    =    hNew.getInitialValue();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
73	[BUG]  [BUGGY]  int  stageSize  =  hNew.length  /  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  hNew.length  /  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  hNew.length  /  1;	  int    stageSize    =    hNew.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    steps.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    steps.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepSize;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stepSize;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stepSize;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    steps.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
78	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  firstTime  =  true;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
81	[BUG]  [BUGGY]  int  stageSize  =  hNew.length  +  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  hNew.length  +  2;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  hNew.length  +  2;	  int    stageSize    =    hNew.length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
82	[BUG]  [BUGGY]  int  stageSize  =  y[0]  +  vecRelativeTolerance[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  y[0]  +  vecRelativeTolerance[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  y[0]  +  vecRelativeTolerance[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);	  int    stageSize    =    vecAbsoluteTolerance[0]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[0]  +  scale[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[0]  +  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  vecAbsoluteTolerance[0]  +  scale[i]  *  FastMath.abs(y[i]);	  int    stageSize    =    vecAbsoluteTolerance[0]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
84	[BUG]  [BUGGY]  int  stageSize  =  scale[0]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  scale[0]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  scale[0]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  int    stageSize    =    vecAbsoluteTolerance[0]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
85	[BUG]  [BUGGY]  int  stageSize  =  vecRelativeTolerance[0]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  vecRelativeTolerance[0]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  vecRelativeTolerance[0]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  int    stageSize    =    vecAbsoluteTolerance[0]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
87	[BUG]  [BUGGY]  filteredNextIsLast  =  stage;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  stage;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  stage;	  filteredNextIsLast    =    nextIsLast;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
88	[BUG]  [BUGGY]  stepSize  =  t.length  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  t.length  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  t.length  +  1;	  stepSize    =    t.length;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
89	[BUG]  [BUGGY]  stepSize  =  steps  +  hNew.length;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  steps  +  hNew.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  steps  +  hNew.length;	  stepSize    =    hNew    +    steps.length;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
90	[BUG]  [BUGGY]  stepSize  =  stepStart  +  steps.length;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stepStart  +  steps.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stepStart  +  steps.length;	  stepSize    =    hNew    +    steps.length;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
91	[BUG]  [BUGGY]  stepSize  =  stepSize  +  steps.length;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stepSize  +  steps.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stepSize  +  steps.length;	  stepSize    =    hNew    +    steps.length;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stepStart;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  stepStart;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  stepStart;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    stepStart;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
93	[BUG]  [BUGGY]  stepSize  =  hNew.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew.doubleValue();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew.doubleValue();	  stepSize    =    t.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
94	[BUG]  [BUGGY]  stepSize  =  scale.doubleValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scale.doubleValue();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scale.doubleValue();	  stepSize    =    t.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
95	[BUG]  [BUGGY]  double  stepSize  =  t.doubleValue();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  double  stepSize  =  t.doubleValue();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	double  stepSize  =  t.doubleValue();	  stepSize    =    t.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
96	[BUG]  [BUGGY]  stepSize  -=  hNew.length  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  -=  hNew.length  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  -=  hNew.length  +  1;	  stepSize    -=    hNew.length;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
97	[BUG]  [BUGGY]  stepSize  -=  hNew.length  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  -=  hNew.length  -  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  -=  hNew.length  -  1;	  stepSize    -=    hNew.length;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
98	[BUG]  [BUGGY]  stageSize  -=  hNew.length;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stageSize  -=  hNew.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stageSize  -=  hNew.length;	  stepSize    -=    hNew.length;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
99	[BUG]  [BUGGY]  stepSize  =  t  *  hNew;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  t  *  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  t  *  hNew;	  stepSize    =    hNew    *    t;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
100	[BUG]  [BUGGY]  stepSize  =  hNew  *  t  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  *  t  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  *  t  +  1;	  stepSize    =    hNew    *    t;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
101	[BUG]  [BUGGY]  filteredNextIsLast  =  firstTime  +  stepSize;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  firstTime  +  stepSize;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  firstTime  +  stepSize;	  filteredNextIsLast    =    hNew    +    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
104	[BUG]  [BUGGY]  stepSize  =  hNew  *  stages;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  *  stages;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  *  stages;	  stepSize    =    hNew    *    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
106	[BUG]  [BUGGY]  stepSize  =  hNew  +  stepOffset  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  stepOffset  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  stepOffset  +  1;	  stepSize    =    hNew    +    stepOffset;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
107	[BUG]  [BUGGY]  stepSize  =  hNew  +  stepEnd;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  stepEnd;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  stepEnd;	  stepSize    =    hNew    +    stepOffset;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
109	[BUG]  [BUGGY]  stageSize  -=  hNew  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stageSize  -=  hNew  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stageSize  -=  hNew  +  1;	  stageSize    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
110	[BUG]  [BUGGY]  stageSize  -=  hNew  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stageSize  -=  hNew  +  stepStart;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stageSize  -=  hNew  +  stepStart;	  stageSize    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
111	[BUG]  [BUGGY]  stageSize  -=  hNew  +  2;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stageSize  -=  hNew  +  2;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stageSize  -=  hNew  +  2;	  stageSize    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
112	[BUG]  [BUGGY]  stepSize  =  hNew.length  +  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew.length  +  2;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew.length  +  2;	  stepSize    =    hNew.length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
113	[BUG]  [BUGGY]  stepSize  =  hNew.length  *  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew.length  *  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew.length  *  1;	  stepSize    =    hNew.length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
114	[BUG]  [BUGGY]  stepSize  =  hNew.length  +  3;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew.length  +  3;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew.length  +  3;	  stepSize    =    hNew.length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
115	[BUG]  [BUGGY]  stepSize  =  scale  +  steps  *  hNew;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scale  +  steps  *  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scale  +  steps  *  hNew;	  stepSize    =    hNew    +    steps    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
116	[BUG]  [BUGGY]  stepSize  =  hNew  +  steps  *  scale.length;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  steps  *  scale.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  steps  *  scale.length;	  stepSize    =    hNew    +    steps    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
117	[BUG]  [BUGGY]  stepSize  =  steps  +  hNew  *  scale;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  steps  +  hNew  *  scale;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  steps  +  hNew  *  scale;	  stepSize    =    hNew    +    steps    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
118	[BUG]  [BUGGY]  stepSize  =  scaledH  +  steps  *  hNew;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scaledH  +  steps  *  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scaledH  +  steps  *  hNew;	  stepSize    =    hNew    +    steps    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  stages.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  stages.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(hNew);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(hNew);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(hNew);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  vecRelativeTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  vecRelativeTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  vecRelativeTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(hNew);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
123	[BUG]  [BUGGY]  stepSize  =  scale.length  *  hNew;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scale.length  *  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scale.length  *  hNew;	  stepSize    =    hNew    *    scale.length;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
124	[BUG]  [BUGGY]  stepSize  =  hNew  *  scale.length  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  *  scale.length  -  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  *  scale.length  -  1;	  stepSize    =    hNew    *    scale.length;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
125	[BUG]  [BUGGY]  stepSize  =  hNew  *  scale.length  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  *  scale.length  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  *  scale.length  +  1;	  stepSize    =    hNew    *    scale.length;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
126	[BUG]  [BUGGY]  int  stages  =  getScale()  *  scale.length;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getScale()  *  scale.length;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getScale()  *  scale.length;	  int    stages    =    getScale()    /    scale.length;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
127	[BUG]  [BUGGY]  int  stages  =  getScale()  /  scale.length  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getScale()  /  scale.length  -  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getScale()  /  scale.length  -  1;	  int    stages    =    getScale()    /    scale.length;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
128	[BUG]  [BUGGY]  int  stages  =  getScale()  /  scale.length  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getScale()  /  scale.length  +  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getScale()  /  scale.length  +  1;	  int    stages    =    getScale()    /    scale.length;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
129	[BUG]  [BUGGY]  int  stages  =  getScale()  /  scale.length  -  2;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getScale()  /  scale.length  -  2;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getScale()  /  scale.length  -  2;	  int    stages    =    getScale()    /    scale.length;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
130	[BUG]  [BUGGY]  stepSize  =  hNew  +  stepStart  +  2;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  stepStart  +  2;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  stepStart  +  2;	  stepSize    =    hNew    +    stepStart    +    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
131	[BUG]  [BUGGY]  stepSize  =  hNew  +  stepStart  +  3;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  stepStart  +  3;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  stepStart  +  3;	  stepSize    =    hNew    +    stepStart    +    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
132	[BUG]  [BUGGY]  stepSize  =  hNew  +  stepStart  *  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  stepStart  *  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  stepStart  *  1;	  stepSize    =    hNew    +    stepStart    +    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
133	[BUG]  [BUGGY]  stepSize  -=  hNew  +  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  -=  hNew  +  stepStart  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  -=  hNew  +  stepStart  +  1;	  stepSize    -=    hNew    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
134	[BUG]  [BUGGY]  hSize  -=  hNew  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  hSize  -=  hNew  +  stepStart;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	hSize  -=  hNew  +  stepStart;	  stepSize    -=    hNew    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  c.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  c.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  c.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    c.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
136	[BUG]  [BUGGY]  stepSize  =  hNew.length  +  stepStart  +  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew.length  +  stepStart  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew.length  +  stepStart  +  1;	  stepSize    =    hNew.length    +    stepStart;    	non-compiled	[CE]  ';'  expected	86	None	replace
137	[BUG]  [BUGGY]  stepSize  =  hNew.length  *  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew.length  *  stepStart;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew.length  *  stepStart;	  stepSize    =    hNew.length    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(b[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(b[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(b[i]);	  for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!hNew)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!hNew)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!hNew)  {  firstTime  =  false;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
141	[BUG]  [BUGGY]  int  stageSize  =  y[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  y[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  y[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);	  int    stageSize    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
142	[BUG]  [BUGGY]  int  stageSize  =  scale[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  scale[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  scale[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  int    stageSize    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
143	[BUG]  [BUGGY]  int  stageSize  =  vecRelativeTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  vecRelativeTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  vecRelativeTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  int    stageSize    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
144	[BUG]  [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);	  int    stageSize    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
145	[BUG]  [BUGGY]  stepSize  =  scale  *  hNew  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scale  *  hNew  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scale  *  hNew  +  1;	  stepSize    =    hNew    *    scale    +    1;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
146	[BUG]  [BUGGY]  stepSize  =  hNew  *  scale  +  2;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  *  scale  +  2;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  *  scale  +  2;	  stepSize    =    hNew    *    scale    +    1;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
147	[BUG]  [BUGGY]  stepSize  =  hNew.length  /  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew.length  /  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew.length  /  1;	  stepSize    =    hNew.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
148	[BUG]  [BUGGY]  stepSize  =  hNew.length  -  3;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew.length  -  3;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew.length  -  3;	  stepSize    =    hNew.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
149	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ySize.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  ySize.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  ySize.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  if(filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
152	[BUG]  [BUGGY]  stepSize  =  stage  *  hNew;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stage  *  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stage  *  hNew;	  stepSize    =    hNew    *    stage;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
153	[BUG]  [BUGGY]  stepSize  =  hNew  *  stage.length;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  *  stage.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  *  stage.length;	  stepSize    =    hNew    *    stage;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
154	[BUG]  [BUGGY]  stage  =  hNew  *  stage;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stage  =  hNew  *  stage;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stage  =  hNew  *  stage;	  stepSize    =    hNew    *    stage;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
155	[BUG]  [BUGGY]  stage  =  hNew  *  stepSize;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stage  =  hNew  *  stepSize;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stage  =  hNew  *  stepSize;	  stepSize    =    hNew    *    stage;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
156	[BUG]  [BUGGY]  filteredNextIsLast  =  firstTime  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  firstTime  -  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  firstTime  -  1;	  filteredNextIsLast    =    firstTime;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
157	[BUG]  [BUGGY]  stepSize  =  firstTime  +  hNew;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  firstTime  +  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  firstTime  +  hNew;	  stepSize    =    firstTime    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
158	[BUG]  [BUGGY]  stepSize  =  firstTime  +  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  firstTime  +  stepStart  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  firstTime  +  stepStart  +  1;	  stepSize    =    firstTime    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
159	[BUG]  [BUGGY]  stepSize  =  firstTime  +  stage;  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  firstTime  +  stage;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  firstTime  +  stage;	  stepSize    =    firstTime    +    stepStart;    	non-compiled	[CE]  ']'  expected	77	None	replace
160	[BUG]  [BUGGY]  stepSize  =  firstTime  +  stages;  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  firstTime  +  stages;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  firstTime  +  stages;	  stepSize    =    firstTime    +    stepStart;    	non-compiled	[CE]  ']'  expected	77	None	replace
161	[BUG]  [BUGGY]  Integer  stages  =  hNew.getIntValue()  +  1;  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getIntValue()  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getIntValue()  +  1;	  Integer    stages    =    hNew.getIntValue();    	non-compiled	[CE]  ']'  expected	105	None	replace
162	[BUG]  [BUGGY]  Integer  stages  =  hNew.getLongValue();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getLongValue();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getLongValue();	  Integer    stages    =    hNew.getIntValue();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
163	[BUG]  [BUGGY]  Integer  stages  =  hNew.getMinimumSize();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getMinimumSize();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getMinimumSize();	  Integer    stages    =    hNew.getIntValue();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
164	[BUG]  [BUGGY]  int  stages  =  getScale()  /  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getScale()  /  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getScale()  /  1;	  int    stages    =    getScale()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stages.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
169	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
171	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    steps.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    steps.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  break;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  break;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
175	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
176	[BUG]  [BUGGY]  int  stageSize  =  hNew.length  /  3;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  hNew.length  /  3;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  hNew.length  /  3;	  int    stageSize    =    hNew.length    -    3;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
177	[BUG]  [BUGGY]  stepSize  =  scale  /  hNew;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scale  /  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scale  /  hNew;	  stepSize    =    scale    *    hNew;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(b[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(b[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(b[i]);  }	  for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }	  for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
180	[BUG]  [BUGGY]  stepSize  =  scale.length;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scale.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scale.length;	  stepSize    =    scale;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
181	[BUG]  [BUGGY]  stepSize  =  stage;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stage;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stage;	  stepSize    =    scale;    	non-compiled	[CE]  ';'  expected	82	None	replace
182	[BUG]  [BUGGY]  stepSize  =  stages;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stages;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stages;	  stepSize    =    scale;    	non-compiled	[CE]  ';'  expected	82	None	replace
183	[BUG]  [BUGGY]  stepSize  =  t.getStep()  +  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  t.getStep()  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  t.getStep()  +  1;	  stepSize    =    t.getStep();    	non-compiled	[CE]  ';'  expected	94	None	replace
184	[BUG]  [BUGGY]  stepSize  =  hNew.getStep();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew.getStep();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew.getStep();	  stepSize    =    t.getStep();    	non-compiled	[CE]  ';'  expected	94	None	replace
185	[BUG]  [BUGGY]  stepSize  =  t.getStep(hNew);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  t.getStep(hNew);  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  t.getStep(hNew);	  stepSize    =    t.getStep();    	non-compiled	[CE]  ';'  expected	94	None	replace
186	[BUG]  [BUGGY]  hNew  -=  stageSize;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  hNew  -=  stageSize;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	hNew  -=  stageSize;	  hNew    -=    stepSize;    	non-compiled	[CE]  ';'  expected	50	None	replace
187	[BUG]  [BUGGY]  hNew  -=  stages;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  hNew  -=  stages;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	hNew  -=  stages;	  hNew    -=    stepSize;    	non-compiled	[CE]  ';'  expected	50	None	replace
188	[BUG]  [BUGGY]  hNew  -=  stage;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  hNew  -=  stage;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	hNew  -=  stage;	  hNew    -=    stepSize;    	non-compiled	[CE]  ';'  expected	50	None	replace
189	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(b[i]);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(b[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(b[i]);  }	  for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
191	[BUG]  [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);	  for(int    i    =    1;    i    <    stages.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    stage.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    stage.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    stage.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
195	[BUG]  [BUGGY]  int  stages  =  getScale().length  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getScale().length  -  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getScale().length  -  1;	  int    stages    =    getScale()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
196	[BUG]  [BUGGY]  int  stages  =  getMinimumSize()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getMinimumSize()  -  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getMinimumSize()  -  1;	  int    stages    =    getScale()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
197	[BUG]  [BUGGY]  stepSize  =  scaledH  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scaledH  -  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scaledH  -  1;	  stepSize    =    scaledH;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(hNew);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(hNew);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y);  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y);  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(hNew);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
201	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    1;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
202	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  firstTime  =  true;  }	  for(int    i    =    1;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
203	[BUG]  [BUGGY]  phaseSize  -=  hNew  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  phaseSize  -=  hNew  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	phaseSize  -=  hNew  +  1;	  phaseSize    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
204	[BUG]  [BUGGY]  phaseSize  -=  hNew.length;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  phaseSize  -=  hNew.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	phaseSize  -=  hNew.length;	  phaseSize    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
205	[BUG]  [BUGGY]  phaseSize  -=  hNew  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  phaseSize  -=  hNew  +  stepStart;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	phaseSize  -=  hNew  +  stepStart;	  phaseSize    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
206	[BUG]  [BUGGY]  phaseSize  -=  stageSize;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  phaseSize  -=  stageSize;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	phaseSize  -=  stageSize;	  phaseSize    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
207	[BUG]  [BUGGY]  Integer  stages  =  hNew.getInitialValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getInitialValue()  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getInitialValue()  +  1;	  Integer    stages    =    hNew.getInitialValue();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
208	[BUG]  [BUGGY]  Integer  stages  =  hNew.getInitialStep();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getInitialStep();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getInitialStep();	  Integer    stages    =    hNew.getInitialValue();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
209	[BUG]  [BUGGY]  escapedNextIsLast  =  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  escapedNextIsLast  =  false;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	escapedNextIsLast  =  false;	  eredNextIsLast    =    true;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
211	[BUG]  [BUGGY]  if(firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
212	[BUG]  [BUGGY]  stepSize  =  stages  *  hNew;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stages  *  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stages  *  hNew;	  stepSize    =    hNew    *    stage;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    steps.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
214	[BUG]  [BUGGY]  stepSize  =  t.doubleValue()  +  stages;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  t.doubleValue()  +  stages;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  t.doubleValue()  +  stages;	  stepSize    =    t.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
215	[BUG]  [BUGGY]  Integer  stages  =  hNew.getInitialSize()  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getInitialSize()  +  stepStart;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getInitialSize()  +  stepStart;	  Integer    stages    =    hNew.getInitialSize();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
216	[BUG]  [BUGGY]  Integer  stages  =  hNew.getInitialSize()  +  2;  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getInitialSize()  +  2;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getInitialSize()  +  2;	  Integer    stages    =    hNew.getInitialSize();    	non-compiled	[CE]  ')'  expected	106	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(hNew);    }    	non-compiled	[CE]  ')'  expected	53	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(hNew);    }    	non-compiled	[CE]  ')'  expected	53	None	replace
219	[BUG]  [BUGGY]  int  stageSize  =  yNew.length  -  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  yNew.length  -  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  yNew.length  -  1;	  int    stageSize    =    hNew.length    -    1;    	non-compiled	[CE]  ')'  expected	41	None	replace
220	[BUG]  [BUGGY]  stepSize  -=  hNew  +  3;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  -=  hNew  +  3;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  -=  hNew  +  3;	  stepSize    -=    hNew    +    1;    	non-compiled	[CE]  ')'  expected	49	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filterNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filterNextIsLast)  {  firstTime  =  false;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	96	None	replace
222	[BUG]  [BUGGY]  filteredNextIsLast  =  nextIsLast  +  stepSize;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  nextIsLast  +  stepSize;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  nextIsLast  +  stepSize;	  filteredNextIsLast    =    hNew    +    stepSize;    	non-compiled	[CE]  ';'  expected	60	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stages.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  ';'  expected	88	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
225	[BUG]  [BUGGY]  int  stages  =  getScale()  *  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getScale()  *  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getScale()  *  1;	  int    stages    =    getScale()    -    1;    	non-compiled	[CE]  ';'  expected	46	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	102	None	replace
227	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
228	[BUG]  [BUGGY]  stageSize  -=  hNew  *  filteredNextT;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stageSize  -=  hNew  *  filteredNextT;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stageSize  -=  hNew  *  filteredNextT;	  stageSize    -=    hNew;    	non-compiled	[CE]  ';'  expected	52	None	replace
229	[BUG]  [BUGGY]  stepSize  =  hNew  *  steps.length;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  *  steps.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  *  steps.length;	  stepSize    =    hNew    *    steps;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
230	[BUG]  [BUGGY]  hNew  -=  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  hNew  -=  stepStart;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	hNew  -=  stepStart;	  hNew    -=    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
231	[BUG]  [BUGGY]  filteredNextIsLast  =  nextIsLast  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  nextIsLast  +  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  nextIsLast  +  1;	  filteredNextIsLast    =    nextIsLast;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
234	[BUG]  [BUGGY]  stepSize  =  firstTime  +  stepStart  *  scale;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  firstTime  +  stepStart  *  scale;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  firstTime  +  stepStart  *  scale;	  stepSize    =    hNew    +    stepStart    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
235	[BUG]  [BUGGY]  if(b!=  null)  {  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(b!=  null)  {  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(b!=  null)  {  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }	  for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
237	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
238	[BUG]  [BUGGY]  stepSize  =  scale  *  hNew.length;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scale  *  hNew.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scale  *  hNew.length;	  stepSize    =    hNew    *    scale.length;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
239	[BUG]  [BUGGY]  phaseSize  -=  scale;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  phaseSize  -=  scale;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	phaseSize  -=  scale;	  phaseSize    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
240	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    steps.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ')'  expected	83	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!firstTime)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!firstTime)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!firstTime)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
244	[BUG]  [BUGGY]  stepSize  =  firstTime  +  stepOffset;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  firstTime  +  stepOffset;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  firstTime  +  stepOffset;	  stepSize    =    hNew    +    stepOffset;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
245	[BUG]  [BUGGY]  if(ys!=  null)  {  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(ys!=  null)  {  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(ys!=  null)  {  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]	  for(int    i    =    0;    i    <    ys.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
246	[BUG]  [BUGGY]  if(ys!=  null)  {  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(ys!=  null)  {  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(ys!=  null)  {  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }	  for(int    i    =    0;    i    <    ys.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
247	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ySize[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ySize[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  ys.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ySize[i]);  }	  for(int    i    =    0;    i    <    ySize.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
248	[BUG]  [BUGGY]  stepSize  =  scaledH.length;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scaledH.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scaledH.length;	  stepSize    =    scaledH;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
249	[BUG]  [BUGGY]  filteredNextIsLast  =  hNew  +  error;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  hNew  +  error;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  hNew  +  error;	  filteredNextIsLast    =    hNew    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
250	[BUG]  [BUGGY]  filteredNextIsLast  =  nextIsLast  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  nextIsLast  +  stepStart;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  nextIsLast  +  stepStart;	  filteredNextIsLast    =    hNew    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
251	[BUG]  [BUGGY]  stepSize  =  steps[hNew  +  stepStart.length;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  steps[hNew  +  stepStart.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  steps[hNew  +  stepStart.length;	  stepSize    =    hNew    +    steps.length;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
253	[BUG]  [BUGGY]  filteredNextIsLast  =  errors;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  errors;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  errors;	  filteredNextIsLast    =    firstTime;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
254	[BUG]  [BUGGY]  stepSize  -=  hNew  *  stepStart;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  -=  hNew  *  stepStart;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  -=  hNew  *  stepStart;	  stepSize    -=    hNew    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
255	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
256	[BUG]  [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[0]  +  vecRelativeTolerance[1]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[0]  +  vecRelativeTolerance[1]  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  vecAbsoluteTolerance[0]  +  vecRelativeTolerance[1]  *  FastMath.abs(y[i]);	  int    stageSize    =    vecAbsoluteTolerance[0]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
257	[BUG]  [BUGGY]  int  stage  =  1  <  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stage  =  1  <  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stage  =  1  <  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
258	[BUG]  [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  int    stageSize    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(x[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(x[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(x[i]);  }	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
260	[BUG]  [BUGGY]  stepSize  =  firstTime  +  error;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  firstTime  +  error;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  firstTime  +  error;	  stepSize    =    firstTime    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
261	[BUG]  [BUGGY]  stepSize  =  firstTime  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  firstTime  +  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  firstTime  +  1;	  stepSize    =    firstTime    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
262	[BUG]  [BUGGY]  Integer  stages  =  getScale();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  getScale();  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  getScale();	  int    stages    =    getScale()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
263	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stepStart;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stepStart;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stepStart;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    stepStart;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
264	[BUG]  [BUGGY]  int  stageSize  =  hNew.length  *  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  hNew.length  *  1;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  hNew.length  *  1;	  int    stageSize    =    hNew.length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
265	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }	  for(int    i    =    1;    i    <    stages.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
266	[BUG]  [BUGGY]  stepSize  =  t.getStep(stepStart);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  t.getStep(stepStart);  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  t.getStep(stepStart);	  stepSize    =    t.getStep();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
267	[BUG]  [BUGGY]  stepSize  =  scale.getStep();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  scale.getStep();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  scale.getStep();	  stepSize    =    t.getStep();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
268	[BUG]  [BUGGY]  int  stages  =  getSize()  /  scale.length;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stages  =  getSize()  /  scale.length;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stages  =  getSize()  /  scale.length;	  int    stages    =    getScale()    /    scale.length;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
269	[BUG]  [BUGGY]  if(firstTime)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(firstTime)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(firstTime)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
270	[BUG]  [BUGGY]  if(firstTime)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(firstTime)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(firstTime)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
271	[BUG]  [BUGGY]  Integer  stages  =  hNew.getIntValue()  *  scale.length;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getIntValue()  *  scale.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getIntValue()  *  scale.length;	  Integer    stages    =    hNew.getIntValue();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
272	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  k  =  0;  k  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  k  =  0;  k  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    steps.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
273	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
274	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
275	[BUG]  [BUGGY]  if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }	  filteredNextIsLast    =    true;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
276	[BUG]  [BUGGY]  if(filteredNextIsLast!=  false)  {  filteredNextIsLast  =  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast!=  false)  {  filteredNextIsLast  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast!=  false)  {  filteredNextIsLast  =  true;  }	  filteredNextIsLast    =    true;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
277	[BUG]  [BUGGY]  if(filteredNextIsLast  ==  error)  {  filteredNextIsLast  =  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast  ==  error)  {  filteredNextIsLast  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast  ==  error)  {  filteredNextIsLast  =  true;  }	  filteredNextIsLast    =    true;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
279	[BUG]  [BUGGY]  boolean  firstTime  =  filteredNextIsLast.isEmpty();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  boolean  firstTime  =  filteredNextIsLast.isEmpty();  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	boolean  firstTime  =  filteredNextIsLast.isEmpty();	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
280	[BUG]  [BUGGY]  boolean  firstTime  =  filteredNextIsLast;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  boolean  firstTime  =  filteredNextIsLast;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	boolean  firstTime  =  filteredNextIsLast;	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
281	[BUG]  [BUGGY]  boolean  firstTime  =  filteredNextIsLast.equals(hNew);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  boolean  firstTime  =  filteredNextIsLast.equals(hNew);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	boolean  firstTime  =  filteredNextIsLast.equals(hNew);	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  c.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  c.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  c.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }	  for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
283	[BUG]  [BUGGY]  filteredNextIsLast  =  filteredNextIsLast.evaluate(t,  getOrder());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  filteredNextIsLast.evaluate(t,  getOrder());  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  filteredNextIsLast.evaluate(t,  getOrder());	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
284	[BUG]  [BUGGY]  filteredNextIsLast  =  filteredNextIsLast.doubleValue();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  filteredNextIsLast.doubleValue();  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  filteredNextIsLast.doubleValue();	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
285	[BUG]  [BUGGY]  filteredNextIsLast  =  filteredNextIsLast.evaluate(t,  scale);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  filteredNextIsLast.evaluate(t,  scale);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  filteredNextIsLast.evaluate(t,  scale);	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!hNew)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!hNew)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  if(!hNew)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
287	[BUG]  [BUGGY]  int  stage  =  vecAbsoluteTolerance[0];  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stage  =  vecAbsoluteTolerance[0];  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stage  =  vecAbsoluteTolerance[0];  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]);  }	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
288	[BUG]  [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y0[i]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y0[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y0[i]);	  int    stageSize    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
289	[BUG]  [BUGGY]  stepSize  =  hNew  *  t  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  *  t  +  stepStart;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  *  t  +  stepStart;	  stepSize    =    hNew    *    t;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
290	[BUG]  [BUGGY]  int  scale  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  scale  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  scale  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
291	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
292	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
293	[BUG]  [BUGGY]  stepSize  =  firstTime  +  stepStart  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  firstTime  +  stepStart  -  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  firstTime  +  stepStart  -  1;	  stepSize    =    firstTime    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
294	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(ys[i]	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(ys[i]    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
295	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(!filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
296	[BUG]  [BUGGY]  stepSize  =  hNew  +  stepStart  *  hTmp;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  stepStart  *  hTmp;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  stepStart  *  hTmp;	  stepSize    =    hNew    +    stepStart    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
297	[BUG]  [BUGGY]  stepSize  =  hNew  +  stepStart  *  c;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  stepStart  *  c;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  stepStart  *  c;	  stepSize    =    hNew    +    stepStart    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
298	[BUG]  [BUGGY]  stepSize  =  hNew  +  stepStart  *  t;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  stepStart  *  t;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  stepStart  *  t;	  stepSize    =    hNew    +    stepStart    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  steps.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  steps.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  steps.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y0.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
300	[BUG]  [BUGGY]  stepSize  =  stepStart  *  steps;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stepStart  *  steps;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stepStart  *  steps;	  stepSize    =    hNew    *    steps;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  b.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  b.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  b.length;  ++i)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
303	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    stage.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
304	[BUG]  [BUGGY]  stepSize  =  stepStart;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stepStart;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stepStart;	  stepSize    =    scale;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
305	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
306	[BUG]  [BUGGY]  stepSize  =  stages  *  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stages  *  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stages  *  1;	  stepSize    =    hNew    *    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
307	[BUG]  [BUGGY]  stepSize  =  stage.length;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stage.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stage.length;	  stepSize    =    scaledH;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
308	[BUG]  [BUGGY]  stepSize  =  hNew  /  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  /  2;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  /  2;	  stepSize    =    hNew    +    2;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  1;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
310	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    vecAbsoluteTolerance.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
311	[BUG]  [BUGGY]  phaseSize  -=  hNew  *  t;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  phaseSize  -=  hNew  *  t;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	phaseSize  -=  hNew  *  t;	  phaseSize    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
312	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    stage.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
313	[BUG]  [BUGGY]  hNew  -=  hNew;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  hNew  -=  hNew;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	hNew  -=  hNew;	  hNew    -=    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
314	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    1;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
315	[BUG]  [BUGGY]  Integer  stages  =  hNew.getSteps();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getSteps();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getSteps();	  Integer    stages    =    hNew.getInitialSize();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
316	[BUG]  [BUGGY]  Integer  stages  =  hNew.getMinimumIntValue();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  Integer  stages  =  hNew.getMinimumIntValue();  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	Integer  stages  =  hNew.getMinimumIntValue();	  Integer    stages    =    hNew.getIntValue();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
317	[BUG]  [BUGGY]  stepSize  =  t.getStep()  +  stepStart;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  t.getStep()  +  stepStart;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  t.getStep()  +  stepStart;	  stepSize    =    t.getStep();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(hNew);  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(hNew);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y);  }  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y);  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(hNew);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
320	[BUG]  [BUGGY]  int  stageSize  =  hNew.length  -  1  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  int  stageSize  =  hNew.length  -  1  +  stepStart;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	int  stageSize  =  hNew.length  -  1  +  stepStart;	  int    stageSize    =    hNew.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
321	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
322	[BUG]  [BUGGY]  stageSize  -=  hNew  *  t;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stageSize  -=  hNew  *  t;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stageSize  -=  hNew  *  t;	  stageSize    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
323	[BUG]  [BUGGY]  stageSize  -=  hNew  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stageSize  -=  hNew  -  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stageSize  -=  hNew  -  1;	  stageSize    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
324	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    stages.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
325	[BUG]  [BUGGY]  filteredNextIsLast  =  t;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  filteredNextIsLast  =  t;  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	filteredNextIsLast  =  t;	  filteredNextIsLast    =    null;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
326	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
327	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  firstTime  =  false;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
328	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
329	[BUG]  [BUGGY]  stepSize  =  stage  *  scale.length;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stage  *  scale.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stage  *  scale.length;	  stepSize    =    hNew    *    scale.length;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
330	[BUG]  [BUGGY]  stepSize  =  stages  *  scale.length;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stages  *  scale.length;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stages  *  scale.length;	  stepSize    =    hNew    *    scale.length;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
331	[BUG]  [BUGGY]  stepSize  =  stepStart  +  steps  *  scale;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  stepStart  +  steps  *  scale;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  stepStart  +  steps  *  scale;	  stepSize    =    hNew    +    steps    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
332	[BUG]  [BUGGY]  stepSize  =  hNew  +  steps  *  t;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  hNew  +  steps  *  t;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  hNew  +  steps  *  t;	  stepSize    =    hNew    +    steps    *    scale;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
333	[BUG]  [BUGGY]  stepSize  =  t.length  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  stepSize  =  t.length  -  1;  [BUGGY]        for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	stepSize  =  t.length  -  1;	  stepSize    =    t.length;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
334	[BUG]  [BUGGY]  if(steps!=  null)  {  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(steps!=  null)  {  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(steps!=  null)  {  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    i    =    0;    i    <    steps.length;    ++i)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
335	[BUG]  [BUGGY]  if(filteredNextIsLast!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  if(filteredNextIsLast!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	if(filteredNextIsLast!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
336	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }      [BUGGY]  for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }  [BUGGY]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	for(int  i  =  0;  i  <  steps.length;  ++i)  {  if(!firstTime)  {  firstTime  =  false;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!firstTime)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
