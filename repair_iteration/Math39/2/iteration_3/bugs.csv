bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  scale);  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  scale);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  scale);	  scalAbsoluteTolerance[i]    =    scale[i].computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  array  required,  but  double  found	14	None	replace
2	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  t);  [CE]  array  required,  but  double  found  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  t);	  scalAbsoluteTolerance[i]    =    scale[i].computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  array  required,  but  double  found	14	None	replace
3	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  scale,  vecAbsoluteTolerance);  [CE]  array  required,  but  double  found  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  scale,  vecAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance[i]    =    scale[i].computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  array  required,  but  double  found	14	None	replace
4	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  scaleAbsoluteTolerance);  [CE]  array  required,  but  double  found  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  scaleAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i],  scaleAbsoluteTolerance);	  scalAbsoluteTolerance[i]    =    scale[i].computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  array  required,  but  double  found	14	None	replace
5	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  scale[i]    =    x[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(x[i]);    	compilable	  [FE]  NullPointerException  	123	8	replace
6	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  scale[i]    =    x[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(x[i]);    	compilable	  [FE]  NullPointerException  	123	8	replace
7	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    x[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(x[i]);    	compilable	  [FE]  NullPointerException  	123	8	replace
8	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    x[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(x[i]);    	compilable	  [FE]  NullPointerException  	123	8	replace
9	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scala[i]);  [CE]  cannot  find  symbol  scala  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scala[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scala[i]);	  scale[i]    =    x[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(x[i]);    	non-compiled	[CE]  cannot  find  symbol  scala	123	None	replace
10	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);	  scale[i]    =    x[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(x[i]);    	non-compiled	[CE]  cannot  find  symbol  x	123	None	replace
11	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  scale[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	49	8	replace
12	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	49	8	replace
13	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(variables[i]);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(variables[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(variables[i]);	  scale[i]    =    vecAbsoluteTolerance    +    vecRelativeTolerance    *    FastMath.abs(variables[i]);    	non-compiled	[CE]  cannot  find  symbol  	102	None	replace
14	[BUG]  [BUGGY]  scale[i]  =  vecRelativeTolerance  +  vecAbsoluteTolerance  *  FastMath.abs(variables[i]);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecRelativeTolerance  +  vecAbsoluteTolerance  *  FastMath.abs(variables[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecRelativeTolerance  +  vecAbsoluteTolerance  *  FastMath.abs(variables[i]);	  scale[i]    =    vecAbsoluteTolerance    +    vecRelativeTolerance    *    FastMath.abs(variables[i]);    	non-compiled	[CE]  cannot  find  symbol  	102	None	replace
15	[BUG]  [BUGGY]  vecAbsoluteTolerance[i]  =  scale[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  vecAbsoluteTolerance[i]  =  scale[i].doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	vecAbsoluteTolerance[i]  =  scale[i].doubleValue();	  vecAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	117	None	replace
16	[BUG]  [BUGGY]  double  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  variable  scalRelativeTolerance  might  not  have  been  initialized  [FE]              NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  double  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	double  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    int    scalRelativeTolerance    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  variable  scalRelativeTolerance  might  not  have  been  initialized	68	None	replace
17	[BUG]  [BUGGY]  int  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  possible  loss  of  precision  [FE]                NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  int  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	int  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    int    scalRelativeTolerance    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
18	[BUG]  [BUGGY]  double[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  ']'  expected  [FE]                  NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  double[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	double[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    int    scalRelativeTolerance    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ']'  expected	68	None	replace
19	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  array  required,  but  double  found  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  array  required,  but  double  found	97	None	replace
20	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  	non-compiled	[CE]  ')'  expected	52	None	add
21	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs	  	non-compiled	[CE]  ';'  expected	52	None	add
22	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  	non-compiled	[CE]  ')'  expected	52	None	add
23	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa	  	non-compiled	[CE]  ';'  expected	52	None	add
24	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [CE]  cannot  find  symbol  scale  [FE]            NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.	  	non-compiled	[CE]  cannot  find  symbol  scale	52	None	add
25	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  +  vecAbsoluteTolerance[i];  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  +  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i]  +  vecAbsoluteTolerance[i];	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    scale[i];    	non-compiled	[CE]  array  required,  but  double  found	63	None	replace
26	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i];	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    scale[i];    	compilable	  [FE]  NullPointerException  	63	8	replace
27	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i];  [FE]  NullPointerException  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i];	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    scale[i];    	compilable	  [FE]  NullPointerException  	63	8	replace
28	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i];	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    scale[i];    	compilable	  [FE]  NullPointerException  	63	8	replace
29	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i];  [FE]  NullPointerException  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i];	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    scale[i];    	compilable	  [FE]  NullPointerException  	63	8	replace
30	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	84	8	add
31	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	84	8	add
32	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	84	8	add
33	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	84	8	add
34	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);	  	non-compiled	[CE]  not  a  statement	84	None	add
35	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  int  i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  int  i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    int  i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);	  	non-compiled	[CE]  ';'  expected	84	None	add
36	[BUG]  [BUGGY]  scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(yDotK[i]);  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(yDotK[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(yDotK[i]);	  scale[i]    =    scalAbsoluteTolerance[i]    *    Math.abs(yDotK[i]);    	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	98	None	replace
37	[BUG]  [BUGGY]  scale[i]  =  yDotK[i]  *  scalAbsoluteTolerance.abs(scale[i]);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  yDotK[i]  *  scalAbsoluteTolerance.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  yDotK[i]  *  scalAbsoluteTolerance.abs(scale[i]);	  scale[i]    =    scalAbsoluteTolerance[i]    *    Math.abs(yDotK[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	98	None	replace
38	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  final  parameter  t  may  not  be  assigned  [FE]        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  final  parameter  t  may  not  be  assigned	104	None	replace
39	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  final  parameter  t  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  final  parameter  t  may  not  be  assigned	104	None	replace
40	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  final  parameter  t  may  not  be  assigned  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  final  parameter  t  may  not  be  assigned	104	None	replace
41	[BUG]  [BUGGY]  scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	104	None	replace
42	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale;  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale;  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale;	  scalAbsoluteTolerance[i]    =    t;    	non-compiled	[CE]  array  required,  but  double  found	126	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  AssertionError  	34	6	add
44	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  AssertionError  	34	6	add
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  AssertionError  	34	6	add
46	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  AssertionError  	34	6	add
47	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  ';'  expected	34	None	add
48	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  scalRelativeTolerance  =  Math.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  scalRelativeTolerance  =  Math.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int  scalRelativeTolerance  =  Math.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  possible  loss  of  precision	34	None	add
49	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	89	8	add
50	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	89	8	add
51	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  int  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  int  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    int  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  ']'  expected	89	None	add
52	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	89	None	add
53	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  1);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	119	None	replace
54	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  /  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  /  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  /  1);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	119	None	replace
55	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  -  2);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  -  2);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  -  2);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	119	None	replace
56	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].getScale(t);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].getScale(t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].getScale(t);	  scale[i]    =    vecAbsoluteTolerance[i].getScale();    	non-compiled	[CE]  double  cannot  be  dereferenced	75	None	replace
57	[BUG]  [BUGGY]  scale[i]  =  vAbsoluteTolerance[i].getScale();  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vAbsoluteTolerance[i].getScale();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vAbsoluteTolerance[i].getScale();	  scale[i]    =    vecAbsoluteTolerance[i].getScale();    	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	75	None	replace
58	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].getScale()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].getScale()  +  1;  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].getScale()  +  1;	  scale[i]    =    vecAbsoluteTolerance[i].getScale();    	non-compiled	[CE]  double  cannot  be  dereferenced	75	None	replace
59	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  	non-compiled	[CE]  ')'  expected	50	None	add
60	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	50	8	add
61	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	50	8	add
62	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs	  	non-compiled	[CE]  ';'  expected	50	None	add
63	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa	  	non-compiled	[CE]  ';'  expected	50	None	add
64	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [CE]  cannot  find  symbol  scale  [FE]            NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.	  	non-compiled	[CE]  cannot  find  symbol  scale	50	None	add
65	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(t);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(t);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale();    	non-compiled	[CE]  array  required,  but  double  found	125	None	replace
66	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].computeScale();	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale();    	non-compiled	[CE]  double  cannot  be  dereferenced	125	None	replace
67	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].computeScale();  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].computeScale();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i].computeScale();	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale();    	non-compiled	[CE]  array  required,  but  double  found	125	None	replace
68	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i]);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale();    	non-compiled	[CE]  array  required,  but  double  found	125	None	replace
69	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	35	8	replace
70	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	35	8	replace
71	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	timeout	35	1	replace
72	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  timeout  [FE]      AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	timeout	35	1	replace
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  AssertionError  	35	6	replace
74	[BUG]  [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  AssertionError  	35	6	replace
75	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ')'  expected	35	None	replace
76	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(t,  t);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(t,  t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(t,  t);	  scalAbsoluteTolerance[i]    =    t.computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  array  required,  but  double  found	131	None	replace
77	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  t.computeScale(scale,  vecAbsoluteTolerance);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  t.computeScale(scale,  vecAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  t.computeScale(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance[i]    =    t.computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  array  required,  but  double  found	131	None	replace
78	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  t.computeScale(scale,  t,  vecAbsoluteTolerance);  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  t.computeScale(scale,  t,  vecAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  t.computeScale(scale,  t,  vecAbsoluteTolerance);	  scalAbsoluteTolerance[i]    =    t.computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  array  required,  but  double  found	131	None	replace
79	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale.computeScale(t,  vecAbsoluteTolerance);  [CE]  array  required,  but  double  found  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale.computeScale(t,  vecAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale.computeScale(t,  vecAbsoluteTolerance);	  scalAbsoluteTolerance[i]    =    t.computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  array  required,  but  double  found	131	None	replace
80	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	90	8	replace
81	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	90	8	replace
82	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(y[i]);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
83	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  1);	  y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	90	8	replace
84	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  1);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  1);	  y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	90	8	replace
85	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalDelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  scalDelativeTolerance  [FE]        NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalDelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalDelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    if(scalRelativeTolerance    ==    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    }    	non-compiled	[CE]  cannot  find  symbol  scalDelativeTolerance	124	None	replace
86	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	64	8	add
87	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	64	8	add
88	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  	non-compiled	[CE]  ')'  expected	64	None	add
89	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs	  	non-compiled	[CE]  ';'  expected	64	None	add
90	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]  [CE]  ')'  expected  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]	  	non-compiled	[CE]  ')'  expected	64	None	add
91	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[  [CE]  ']'  expected  [FE]            NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[	  	non-compiled	[CE]  ']'  expected	64	None	add
92	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  t.computeScale(scale[i],  vecAbsoluteTolerance);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  t.computeScale(scale[i],  vecAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  t.computeScale(scale[i],  vecAbsoluteTolerance);	  scalAbsoluteTolerance[i]    =    t.computeScale(vecAbsoluteTolerance[i],    scale);    	non-compiled	[CE]  array  required,  but  double  found	13	None	replace
93	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale.computeScale(vecAbsoluteTolerance[i],  scale);  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale.computeScale(vecAbsoluteTolerance[i],  scale);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale.computeScale(vecAbsoluteTolerance[i],  scale);	  scalAbsoluteTolerance[i]    =    t.computeScale(vecAbsoluteTolerance[i],    scale);    	non-compiled	[CE]  array  required,  but  double  found	13	None	replace
94	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(scale[i],  scale);  [CE]  array  required,  but  double  found  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(scale[i],  scale);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(scale[i],  scale);	  scalAbsoluteTolerance[i]    =    t.computeScale(vecAbsoluteTolerance[i],    scale);    	non-compiled	[CE]  array  required,  but  double  found	13	None	replace
95	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    1]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	120	None	replace
96	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale[i]  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    1]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	120	8	replace
97	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale[i]  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    1]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	120	8	replace
98	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale.length  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    1]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	120	8	replace
99	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale.length  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale.length  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    1]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	120	8	replace
100	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(vecAbsoluteTolerance[i]  +  1);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(vecAbsoluteTolerance[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(vecAbsoluteTolerance[i]  +  1);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]    +    1);    	non-compiled	[CE]  array  required,  but  double  found	88	None	replace
101	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]  +  1);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]  +  1);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	88	None	replace
102	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  FastMath.abs(y,  scale[i]  +  1);  [CE]  array  required,  but  double  found  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  FastMath.abs(y,  scale[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  FastMath.abs(y,  scale[i]  +  1);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]    +    1);    	non-compiled	[CE]  array  required,  but  double  found	88	None	replace
103	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  scale[i]    =    y0    +    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	103	None	replace
104	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);	  scale[i]    =    y0    +    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	103	None	replace
105	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  t);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  t);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    t);    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
106	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  t,  firstTime);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  t,  firstTime);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  t,  firstTime);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    t);    	non-compiled	[CE]  array  required,  but  double  found	12	None	replace
107	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance,  t);  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance,  t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance,  t);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    t);    	non-compiled	[CE]  array  required,  but  double  found	12	None	replace
108	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    scale[i]    +    vecAbsoluteTolerance    *    FastMath.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	70	8	replace
109	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    scale[i]    +    vecAbsoluteTolerance    *    FastMath.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	70	8	replace
110	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  t.abs(scala[i]);  [CE]  cannot  find  symbol  scala  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  t.abs(scala[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  t.abs(scala[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    t.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  scala	18	None	replace
111	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  t.abs(scale[i]);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  t.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  t.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    t.abs(y[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	18	None	replace
112	[BUG]  [BUGGY]  scale[i]  =  vAbsoluteTolerance[i].doubleValue();  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vAbsoluteTolerance[i].doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vAbsoluteTolerance[i].doubleValue();	  scale[i]    =    vecAbsoluteTolerance[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	26	None	replace
113	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].doubleValue()  +  1;  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].doubleValue()  +  1;	  scale[i]    =    vecAbsoluteTolerance[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	26	None	replace
114	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i].doubleValue();  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i].doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i].doubleValue();	  scale[i]    =    vecAbsoluteTolerance[i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	26	None	replace
115	[BUG]  [BUGGY]  scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(x[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(x[i]);    	non-compiled	[CE]  ']'  expected	105	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(x[i]);    	compilable	  [FE]  AssertionError  	105	3	replace
117	[BUG]  [BUGGY]  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(x[i]);    	compilable	  [FE]  AssertionError  	105	3	replace
118	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(x[i]);    	non-compiled	[CE]  cannot  find  symbol  x	105	None	replace
119	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);	  scalAbsoluteTolerance[i]    =    scale[i]    +    vecAbsoluteTolerance.length    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	45	None	replace
120	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	91	8	add
121	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	91	8	add
122	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	91	8	add
123	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	91	8	add
124	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  	non-compiled	[CE]  ')'  expected	91	None	add
125	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs	  	non-compiled	[CE]  ';'  expected	91	None	add
126	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa	  	non-compiled	[CE]  ';'  expected	91	None	add
127	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  1  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	113	None	replace
128	[BUG]  [BUGGY]  scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	113	None	replace
129	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  i  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  i  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  i  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	113	None	replace
130	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  i  *  FastMath.abs(scale[i]);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  i  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  i  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	113	None	replace
131	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  scale[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	6	8	replace
132	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	6	8	replace
133	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	6	8	replace
134	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	6	8	replace
135	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i];	  	compilable	  [FE]  NullPointerException  	107	8	add
136	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i];  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i];	  	compilable	  [FE]  NullPointerException  	107	8	add
137	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  int  y[i]  =  vecAbsoluteTolerance[i];  [CE]  ']'  expected  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  int  y[i]  =  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i];    int  y[i]  =  vecAbsoluteTolerance[i];	  	non-compiled	[CE]  ']'  expected	107	None	add
138	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i].;  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i].;  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i].;	  	non-compiled	[CE]  <identifier>  expected	107	None	add
139	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vAbsoluteTolerance[i];  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vAbsoluteTolerance[i];	  	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	107	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  AssertionError  	30	1	add
141	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  AssertionError  	30	1	add
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  AssertionError  	30	6	add
143	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  AssertionError  	30	6	add
144	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]        AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  array  required,  but  double  found	30	None	add
145	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  ';'  expected	30	None	add
146	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]            AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	30	None	add
147	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(vecAbsoluteTolerance[i],  scale[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(vecAbsoluteTolerance[i],  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(vecAbsoluteTolerance[i],  scale[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i],    scale[i]);    	non-compiled	[CE]  array  required,  but  double  found	8	None	replace
148	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i],  scale[i]);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i],  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i],  scale[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i],    scale[i]);    	non-compiled	[CE]  array  required,  but  double  found	8	None	replace
149	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i],  scale[i]  +  1);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i],  scale[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i],  scale[i]  +  1);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i],    scale[i]);    	non-compiled	[CE]  array  required,  but  double  found	8	None	replace
150	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	15	8	add
151	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	15	8	add
152	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	15	8	add
153	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	15	8	add
154	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	15	None	add
155	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	15	8	add
156	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	15	8	add
157	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	44	None	replace
158	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	44	None	replace
159	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  y  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  y  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  y  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	44	None	replace
160	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	48	8	add
161	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	48	8	add
162	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	48	8	add
163	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	48	8	add
164	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  int  i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  int  i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    int  i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  ';'  expected	48	None	add
165	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(x[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	48	None	add
166	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i];  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i];	  scalAbsoluteTolerance[i]    =    scale[i];    	non-compiled	[CE]  array  required,  but  double  found	60	None	replace
167	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
168	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ')'  expected	65	None	replace
169	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y,  scale[i]);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y,  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y,  scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	40	None	replace
170	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  scale[i]);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	40	None	replace
171	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance  *  FastMath.abs(vecRelativeTolerance[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance  *  FastMath.abs(vecRelativeTolerance[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  vecAbsoluteTolerance  *  FastMath.abs(vecRelativeTolerance[i]);	  scale[i]    =    vecAbsoluteTolerance    +    vecRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	28	None	replace
172	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);	  scale[i]    =    vecAbsoluteTolerance    +    vecRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	28	None	replace
173	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ';'  expected	66	None	replace
174	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ';'  expected	66	None	replace
175	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    y[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	9	8	add
176	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    y[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	9	8	add
177	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  y[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    y[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    y[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	9	8	add
178	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  y[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  y[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    y[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    y[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	9	8	add
179	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  size[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  size  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  size[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    y[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    size[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  cannot  find  symbol  size	9	None	add
180	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  int  yDotK[]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  variable  yDotK  is  already  defined  in  method  integrate(ExpandableStatefulODE,double)  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  int  yDotK[]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    y[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    int  yDotK[]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  variable  yDotK  is  already  defined  in  method  integrate(ExpandableStatefulODE,double)	9	None	add
181	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[0],  scale[i]);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[0],  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[0],  scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i],    scale[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	58	None	replace
182	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i]  +  1);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i]  +  1);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i],    scale[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	58	None	replace
183	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i]  +  error);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i]  +  error);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i]  +  error);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i],    scale[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	58	None	replace
184	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(scala[i]);  [CE]  cannot  find  symbol  scala  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(scala[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(scala[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scale[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  scala	47	None	replace
185	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    y);    	non-compiled	[CE]  double  cannot  be  dereferenced	106	None	replace
186	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y,  firstTime);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y,  firstTime);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y,  firstTime);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    y);    	non-compiled	[CE]  array  required,  but  double  found	106	None	replace
187	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance,  y);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance,  y);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance,  y);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    y);    	non-compiled	[CE]  array  required,  but  double  found	106	None	replace
188	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  y[i].computeScale(scale,  vecAbsoluteTolerance);  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  y[i].computeScale(scale,  vecAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  y[i].computeScale(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    y);    	non-compiled	[CE]  array  required,  but  double  found	106	None	replace
189	[BUG]  [BUGGY]  y[i]  =  scalAbsoluteTolerance[i];  [CE]  array  required,  but  double  found  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  scalAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  scalAbsoluteTolerance[i];	  y[i]    =    vecAbsoluteTolerance[i];    	non-compiled	[CE]  array  required,  but  double  found	108	None	replace
190	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scale[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  +  scale[i];	  y[i]    =    vecAbsoluteTolerance[i];    	compilable	  [FE]  NullPointerException  	108	8	replace
191	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scale[i];  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scale[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  +  scale[i];	  y[i]    =    vecAbsoluteTolerance[i];    	compilable	  [FE]  NullPointerException  	108	8	replace
192	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  scale.length;  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  *  scale.length;	  y[i]    =    vecAbsoluteTolerance[i];    	compilable	  [FE]  NullPointerException  	108	8	replace
193	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  scale.length;  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  scale.length;  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  *  scale.length;	  y[i]    =    vecAbsoluteTolerance[i];    	compilable	  [FE]  NullPointerException  	108	8	replace
194	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	54	None	replace
195	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	54	None	replace
196	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	2	None	replace
197	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    scale[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	46	8	add
198	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	46	8	add
199	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    scale[i]    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	46	8	add
200	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale[i]    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	46	8	add
201	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale[i]    *    FastMath.abs(y[i]);    i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  not  a  statement	46	None	add
202	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  int  i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  int  i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale[i]    *    FastMath.abs(y[i]);    int  i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  ';'  expected	46	None	add
203	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]            NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(x[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	46	None	add
204	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(value[i]);  [CE]  cannot  find  symbol  value  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(value[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(value[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(scala[i]);    	non-compiled	[CE]  cannot  find  symbol  value	114	None	replace
205	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	112	None	replace
206	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	112	None	replace
207	[BUG]  [BUGGY]  scale[i]  =  scale[i  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	112	None	replace
208	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i].getScale();  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i].getScale();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i].getScale();	  scalAbsoluteTolerance[i]    =    scale[i].getScale();    	non-compiled	[CE]  array  required,  but  double  found	76	None	replace
209	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalerelativeTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  scalerelativeTolerance  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalerelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalerelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    scale[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  scalerelativeTolerance	29	None	replace
210	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    	compilable	  [FE]  NullPointerException  	20	8	replace
211	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    	compilable	  [FE]  NullPointerException  	20	8	replace
212	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    	compilable	  [FE]  NullPointerException  	20	8	replace
213	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(y[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    	compilable	  [FE]  NullPointerException  	20	8	replace
214	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scale  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scale    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	115	None	replace
215	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance.doubleValue();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance.doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance.doubleValue();	  scalAbsoluteTolerance[i]    =    scale.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
216	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance.doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance.doubleValue();	  scalAbsoluteTolerance[i]    =    scale.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	37	None	replace
217	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(scale,  t);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(scale,  t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(scale,  t);	  scalAbsoluteTolerance[i]    =    t.computeScale(vecAbsoluteTolerance,    scale);    	non-compiled	[CE]  array  required,  but  double  found	130	None	replace
218	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale.computeScale(vecAbsoluteTolerance,  t);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale.computeScale(vecAbsoluteTolerance,  t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale.computeScale(vecAbsoluteTolerance,  t);	  scalAbsoluteTolerance[i]    =    t.computeScale(vecAbsoluteTolerance,    scale);    	non-compiled	[CE]  array  required,  but  double  found	130	None	replace
219	[BUG]  [BUGGY]  scale[i]  =  t.computeScale(vecAbsoluteTolerance,  scale);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t.computeScale(vecAbsoluteTolerance,  scale);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t.computeScale(vecAbsoluteTolerance,  scale);	  scalAbsoluteTolerance[i]    =    t.computeScale(vecAbsoluteTolerance,    scale);    	non-compiled	[CE]  double  cannot  be  dereferenced	130	None	replace
220	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]        NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(x[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    if(scalRelativeTolerance!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  cannot  find  symbol  x	109	None	replace
221	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalDelativeTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  scalDelativeTolerance  [FE]          NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalDelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalDelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    if(scalRelativeTolerance!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  cannot  find  symbol  scalDelativeTolerance	109	None	replace
222	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalVisibleTolerance  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  scalVisibleTolerance  [FE]                NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalVisibleTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalVisibleTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    if(scalRelativeTolerance!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]    	non-compiled	[CE]  cannot  find  symbol  scalVisibleTolerance	69	None	replace
223	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i]  +  error);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i]  +  error);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i]  +  error);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    +    error);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	100	None	replace
224	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  error,  scale[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  error,  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  error,  scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    +    error);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	100	None	replace
225	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  scalRelativeTolerance);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  scalRelativeTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  scalRelativeTolerance);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    +    error);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	100	None	replace
226	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    x[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  array  required,  but  double  found	4	None	replace
227	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scale[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scale[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    scale);    	non-compiled	[CE]  array  required,  but  double  found	11	None	replace
228	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scalAbsoluteTolerance);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scalAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scalAbsoluteTolerance);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    scale);    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
229	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance[i],  scale);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance[i],  scale);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance[i],  scale);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    scale);    	non-compiled	[CE]  array  required,  but  double  found	11	None	replace
230	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  vecAbsoluteTolerance);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  vecAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  vecAbsoluteTolerance);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    scale);    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
231	[BUG]  [BUGGY]  double  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  variable  scalRelativeTolerance  might  not  have  been  initialized  [FE]              NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  double  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	double  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    scalRelativeTolerance    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  variable  scalRelativeTolerance  might  not  have  been  initialized	55	None	replace
232	[BUG]  [BUGGY]  double[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]                NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  double[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	double[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    scalRelativeTolerance    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	55	None	replace
233	[BUG]  [BUGGY]  int  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  possible  loss  of  precision  [FE]                  NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  int  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	int  scalRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    scalRelativeTolerance    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  possible  loss  of  precision	55	None	replace
234	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(x[i]);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
235	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(x[i]);    	compilable	  [FE]  NullPointerException  	56	8	replace
236	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(x[i]);    	compilable	  [FE]  NullPointerException  	56	8	replace
237	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  b[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  b[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);	  scale[i]    =    x[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(vecAbsoluteTolerance[i]);    	compilable	  [FE]  NullPointerException  	95	8	replace
238	[BUG]  [BUGGY]  scale[i]  =  b[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);  [FE]  NullPointerException  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  b[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  b[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);	  scale[i]    =    x[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(vecAbsoluteTolerance[i]);    	compilable	  [FE]  NullPointerException  	95	8	replace
239	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	71	8	add
240	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	71	8	add
241	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  int  i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  int  i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    int  i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  ';'  expected	71	None	add
242	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  not  a  statement	71	None	add
243	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  int  i  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [CE]  variable  i  is  already  defined  in  method  integrate(ExpandableStatefulODE,double)  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  int  i  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    int  i  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  integrate(ExpandableStatefulODE,double)	71	None	add
244	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].doubleValue()  +  vecAbsoluteTolerance[i].doubleValue();  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].doubleValue()  +  vecAbsoluteTolerance[i].doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i].doubleValue()  +  vecAbsoluteTolerance[i].doubleValue();	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].doubleValue()    +    scale[i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	27	None	replace
245	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].doubleValue()  +  scale[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].doubleValue()  +  scale[i].doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].doubleValue()  +  scale[i].doubleValue();	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].doubleValue()    +    scale[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	27	None	replace
246	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].doubleValue()  *  scale[i].doubleValue();  [CE]  array  required,  but  double  found  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].doubleValue()  *  scale[i].doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].doubleValue()  *  scale[i].doubleValue();	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].doubleValue()    +    scale[i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	27	None	replace
247	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i],  y);  [CE]  no  suitable  method  found  for  abs(double,double[])  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i],  y);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i],  y);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y,    i);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double[])	122	None	replace
248	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y,  i);  [CE]  no  suitable  method  found  for  abs(double[],int)  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y,  i);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y,  i);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y,    i);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],int)	122	None	replace
249	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  scale[i],  i);  [CE]  no  suitable  method  found  for  abs(double[],double,int)  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  scale[i],  i);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  scale[i],  i);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y,    i);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double,int)	122	None	replace
250	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	timeout	31	1	replace
251	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  timeout  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	timeout	31	1	replace
252	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  AssertionError  	31	3	replace
253	[BUG]  [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  AssertionError  	31	3	replace
254	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  AssertionError  	31	3	replace
255	[BUG]  [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  AssertionError  	31	3	replace
256	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i],  scale  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i],  scale  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i],  scale  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i],    scale    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	121	None	replace
257	[BUG]  [BUGGY]  scale[i]  =  scale[i],  scale  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i],  scale  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i],  scale  +  vecRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i],    scale    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	121	None	replace
258	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[i],  scale[i]);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[i],  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[i],  scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    Math.abs(yDotK[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	59	None	replace
259	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[i]  *  scale[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[i]  *  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[i]  *  scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    Math.abs(yDotK[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	59	None	replace
260	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[i]  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[i]  -  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[i]  -  1);	  scale[i]    =    vecAbsoluteTolerance[i]    +    Math.abs(yDotK[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	59	None	replace
261	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[0]);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[0]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(yDotK[0]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    Math.abs(yDotK[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	59	None	replace
262	[BUG]  [BUGGY]  double  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  variable  scalRelativeTolerance  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  double  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	double  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    scalRelativeTolerance    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  variable  scalRelativeTolerance  might  not  have  been  initialized	33	None	replace
263	[BUG]  [BUGGY]  int  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  int  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	int  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    scalRelativeTolerance    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
264	[BUG]  [BUGGY]  long  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  long  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	long  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    scalRelativeTolerance    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
265	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
266	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	53	8	replace
267	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	53	8	replace
268	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
269	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	53	None	replace
270	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	19	8	add
271	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	19	8	add
272	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	19	8	add
273	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	19	8	add
274	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(x[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	19	None	add
275	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  [CE]  not  a  statement  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);	  	non-compiled	[CE]  not  a  statement	19	None	add
276	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  vecAbsoluteTolerance.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  vecAbsoluteTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i]  *  vecAbsoluteTolerance.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    scalAbsoluteTolerance.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	128	None	replace
277	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  vecRelativeTolerance.abs(y[i]);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  vecRelativeTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  vecRelativeTolerance.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    scalAbsoluteTolerance.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
278	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	96	8	add
279	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	96	8	add
280	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	96	8	add
281	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	96	8	add
282	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  array  required,  but  double  found  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  array  required,  but  double  found	96	None	add
283	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  vAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	96	None	add
284	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	32	None	replace
285	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	32	None	replace
286	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ')'  expected	32	None	replace
287	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	32	None	replace
288	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale.length  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  scale.length  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    scaledH    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  AssertionError  	24	3	replace
289	[BUG]  [BUGGY]  scale[i]  =  scale.length  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale.length  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale.length  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    scaledH    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  AssertionError  	24	3	replace
290	[BUG]  [BUGGY]  scale[i]  =  vAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    scaledH    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	24	None	replace
291	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[i]);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    Math.abs(yDotK[i]);    	non-compiled	[CE]  array  required,  but  double  found	57	None	replace
292	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i],  scale[i]);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i],  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i],  scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    Math.abs(yDotK[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	57	None	replace
293	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i]  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i]  -  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i]  -  1);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    Math.abs(yDotK[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	57	None	replace
294	[BUG]  [BUGGY]  scale[i]  =  scale  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  scale[i]    =    scale    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	118	None	replace
295	[BUG]  [BUGGY]  scale[i]  =  scaledH  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  scaledH  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scaledH  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scaledH  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  scaledH	23	None	replace
296	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  vecAbsoluteTolerance.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  vecAbsoluteTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  vecAbsoluteTolerance.abs(y[i]);	  scalAbsoluteTolerance[i]    =    y[i]    *    vecAbsoluteTolerance.abs(vecAbsoluteTolerance[i]);    	non-compiled	[CE]  array  required,  but  double  found	7	None	replace
297	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  *  vecAbsoluteTolerance.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  *  vecAbsoluteTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i]  *  vecAbsoluteTolerance.abs(y[i]);	  scalAbsoluteTolerance[i]    =    y[i]    *    vecAbsoluteTolerance.abs(vecAbsoluteTolerance[i]);    	non-compiled	[CE]  array  required,  but  double  found	7	None	replace
298	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  vecAbsoluteTolerance.abs(scale[i]);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  vecAbsoluteTolerance.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  vecAbsoluteTolerance.abs(scale[i]);	  scalAbsoluteTolerance[i]    =    y[i]    *    vecAbsoluteTolerance.abs(vecAbsoluteTolerance[i]);    	non-compiled	[CE]  array  required,  but  double  found	7	None	replace
299	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale.abs(y[i]);	  scalAbsoluteTolerance[i]    =    y[i]    *    vecAbsoluteTolerance.abs(vecAbsoluteTolerance[i]);    	non-compiled	[CE]  array  required,  but  double  found	7	None	replace
300	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  y[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    if(scalRelativeTolerance!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	110	None	replace
301	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scala[i]);  [CE]  cannot  find  symbol  scala  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scala[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scala[i]);	  scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol  scala	116	None	replace
302	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	82	8	add
303	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	82	8	add
304	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	82	8	add
305	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	82	8	add
306	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  size[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  size  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  size[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    size[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  cannot  find  symbol  size	82	None	add
307	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  int  i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  int  i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    int  i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  ';'  expected	82	None	add
308	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scale.length  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scale.length  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  scale.length  *  FastMath.abs(scale[i]);	  scale[i]    =    scale    +    vecAbsoluteTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	87	None	replace
309	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scaleAbsoluteTolerance  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  scaleAbsoluteTolerance  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scaleAbsoluteTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scaleAbsoluteTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    scale    +    vecAbsoluteTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol  scaleAbsoluteTolerance	87	None	replace
310	[BUG]  [BUGGY]  scale[i]  =  scale  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    scale    +    vecAbsoluteTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	87	None	replace
311	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  scale[i]  =  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i];    scale[i]  =  vecAbsoluteTolerance[i];	  	compilable	  [FE]  NullPointerException  	61	8	add
312	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  scale[i]  =  vecAbsoluteTolerance[i];  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  scale[i]  =  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i];    scale[i]  =  vecAbsoluteTolerance[i];	  	compilable	  [FE]  NullPointerException  	61	8	add
313	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i];	  	compilable	  [FE]  NullPointerException  	61	8	add
314	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i];  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i];	  	compilable	  [FE]  NullPointerException  	61	8	add
315	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  int  i]  =  vecAbsoluteTolerance[i];  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  int  i]  =  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i];    int  i]  =  vecAbsoluteTolerance[i];	  	non-compiled	[CE]  ';'  expected	61	None	add
316	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  i]  =  vecAbsoluteTolerance[i];  [CE]  not  a  statement  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  i]  =  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i];    i]  =  vecAbsoluteTolerance[i];	  	non-compiled	[CE]  not  a  statement	61	None	add
317	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  scale[i]  =  vAbsoluteTolerance[i];  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]            NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  scale[i]  =  vAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i];    scale[i]  =  vAbsoluteTolerance[i];	  	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	61	None	add
318	[BUG]  [BUGGY]  scale[i]  =  vAbsoluteTolerance.doubleValue();  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vAbsoluteTolerance.doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vAbsoluteTolerance.doubleValue();	  scalAbsoluteTolerance[i]    =    vAbsoluteTolerance.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	81	None	replace
319	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  vecRelativeTolerance.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  vecRelativeTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i]  *  vecRelativeTolerance.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    scalRelativeTolerance.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	17	None	replace
320	[BUG]  [BUGGY]  scale[i]  =  scalRelativeTolerance[i]  *  vecAbsoluteTolerance.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalRelativeTolerance[i]  *  vecAbsoluteTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalRelativeTolerance[i]  *  vecAbsoluteTolerance.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    scalRelativeTolerance.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	17	None	replace
321	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  scalRelativeTolerance.abs(scale[i]);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  scalRelativeTolerance.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  scalRelativeTolerance.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    scalRelativeTolerance.abs(y[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
322	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	1	8	add
323	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	1	8	add
324	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	1	8	add
325	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	1	8	add
326	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(x[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	1	None	add
327	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  array  required,  but  double  found	1	None	add
328	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	1	8	add
329	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	1	8	add
330	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	92	8	replace
331	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	92	8	replace
332	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  b  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  b  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  b  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	92	None	replace
333	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ')'  expected	92	None	replace
334	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[1]);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[1]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[1]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[0]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	99	None	replace
335	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[0]);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[0]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[0]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[0]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	99	None	replace
336	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	22	8	add
337	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	22	8	add
338	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  t[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  t[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    t[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  array  required,  but  double  found	22	None	add
339	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	22	8	add
340	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	22	8	add
341	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  not  a  statement  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  not  a  statement	22	None	add
342	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]            NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	22	None	add
343	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scalAbsoluteTolerance[i]);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scalAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  y[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scalAbsoluteTolerance[i]);	  scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	3	None	replace
344	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  scale[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	72	8	replace
345	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	72	8	replace
346	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance.abs(scale[i]);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i]  +  vecAbsoluteTolerance.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
347	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);	  scalAbsoluteTolerance[i]    =    y0    +    vecAbsoluteTolerance.length    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	93	None	replace
348	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale.length  +  vecAbsoluteTolerance.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale.length  +  vecAbsoluteTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale.length  +  vecAbsoluteTolerance.abs(y[i]);	  scalAbsoluteTolerance[i]    =    y0    +    vecAbsoluteTolerance.length    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	93	None	replace
349	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);	  scalAbsoluteTolerance[i]    =    y0    +    vecAbsoluteTolerance.length    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	93	8	replace
350	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);	  scalAbsoluteTolerance[i]    =    y0    +    vecAbsoluteTolerance.length    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	93	8	replace
351	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(y[i]);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
352	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scale.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scale.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scale.abs(y[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	43	None	replace
353	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(y,  scale[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(y,  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(y,  scale[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	43	None	replace
354	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  +  vecRelativeTolerance.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  +  vecRelativeTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i]  +  vecRelativeTolerance.abs(y[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	43	None	replace
355	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	85	8	replace
356	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	85	8	replace
357	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	85	8	replace
358	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(scale[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  Math.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	85	8	replace
359	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	36	None	replace
360	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	36	None	replace
361	[BUG]  [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	36	None	replace
362	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.doubleValue()  *  scale.length;  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.doubleValue()  *  scale.length;  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.doubleValue()  *  scale.length;	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance.doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	38	None	replace
363	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	94	8	replace
364	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	94	8	replace
365	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	94	8	replace
366	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	94	8	replace
367	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  i);  [CE]  no  suitable  method  found  for  abs(double[],int)  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  i);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  i);	  y[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],int)	94	None	replace
368	[BUG]  [BUGGY]  timeout  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  b[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  b[i];	  scale[i]    =    vecAbsoluteTolerance[i];    	compilable	timeout	62	1	replace
369	[BUG]  [BUGGY]  scale[i]  =  b[i];  timeout  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  b[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  b[i];	  scale[i]    =    vecAbsoluteTolerance[i];    	compilable	timeout	62	1	replace
370	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecRelativeTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecRelativeTolerance[i];	  scale[i]    =    vecAbsoluteTolerance[i];    	compilable	  [FE]  NullPointerException  	62	8	replace
371	[BUG]  [BUGGY]  scale[i]  =  vecRelativeTolerance[i];  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecRelativeTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecRelativeTolerance[i];	  scale[i]    =    vecAbsoluteTolerance[i];    	compilable	  [FE]  NullPointerException  	62	8	replace
372	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	5	8	add
373	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	5	8	add
374	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	5	8	add
375	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	5	8	add
376	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	5	8	add
377	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	5	8	add
378	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	5	None	add
379	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  filteredNextT  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  filteredNextT  [FE]            NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  filteredNextT  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    filteredNextT  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  cannot  find  symbol  filteredNextT	5	None	add
380	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecRelativeTolerance  *  FastMath.abs(values[i]);  [CE]  cannot  find  symbol  values  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecRelativeTolerance  *  FastMath.abs(values[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  vecRelativeTolerance  *  FastMath.abs(values[i]);	  scale[i]    =    vecAbsoluteTolerance    +    vecRelativeTolerance    *    FastMath.abs(variables[i]);    	non-compiled	[CE]  cannot  find  symbol  values	102	None	replace
381	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  array  required,  but  double  found	15	None	add
382	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecRelativeTolerance  *  FastMath.abs(value[i]);  [CE]  cannot  find  symbol  value  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecRelativeTolerance  *  FastMath.abs(value[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  vecRelativeTolerance  *  FastMath.abs(value[i]);	  scale[i]    =    vecAbsoluteTolerance    +    scaleRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  value	80	None	replace
383	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scala[i]);  [CE]  cannot  find  symbol  scala  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scala[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scala[i]);	  scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol  scala	116	None	replace
384	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i],  scale  +  vecRelativeTolerance  *  FastMath.sin(y[i]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i],  scale  +  vecRelativeTolerance  *  FastMath.sin(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i],  scale  +  vecRelativeTolerance  *  FastMath.sin(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i],    scale    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	121	None	replace
385	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa	  	non-compiled	[CE]  ';'  expected	64	None	add
386	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  b.abs(y[i]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  b.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  b.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    t.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
387	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	5	8	add
388	[BUG]  [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    scale[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  scale[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	5	8	add
389	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);	  scalAbsoluteTolerance[i]    =    scale[i]    +    vecAbsoluteTolerance.length    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	45	None	replace
390	[BUG]  [BUGGY]  vecAbsoluteTolerance[i]  =  scale[i].computeScale(t,  scalAbsoluteTolerance);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  vecAbsoluteTolerance[i]  =  scale[i].computeScale(t,  scalAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	vecAbsoluteTolerance[i]  =  scale[i].computeScale(t,  scalAbsoluteTolerance);	  scalAbsoluteTolerance[i]    =    scale[i].computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	replace
391	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath	  	non-compiled	[CE]  ';'  expected	50	None	add
392	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i]);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  Math.abs(yDotK[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    Math.abs(yDotK[i]);    	non-compiled	[CE]  array  required,  but  double  found	57	None	replace
393	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y0);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y0);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y0);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    y);    	non-compiled	[CE]  array  required,  but  double  found	106	None	replace
394	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	96	None	add
395	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  y[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);  [CE]  array  required,  but  double  found  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  y[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  y[i]  *  FastMath.abs(vecAbsoluteTolerance[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  array  required,  but  double  found	41	None	replace
396	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ';'  expected	66	None	replace
397	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
398	[BUG]  [BUGGY]  scale[i]  =  yAbsoluteTolerance[i]  *  Math.abs(scalAbsoluteTolerance[i]);  [CE]  cannot  find  symbol  yAbsoluteTolerance  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  yAbsoluteTolerance[i]  *  Math.abs(scalAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  yAbsoluteTolerance[i]  *  Math.abs(scalAbsoluteTolerance[i]);	  scale[i]    =    scalAbsoluteTolerance[i]    *    Math.abs(yDotK[i]);    	non-compiled	[CE]  cannot  find  symbol  yAbsoluteTolerance	98	None	replace
399	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	36	None	replace
400	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  int  i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	36	None	replace
401	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecScaleRelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  vecScaleRelativeTolerance  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecScaleRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  vecScaleRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance    +    scaleRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol  vecScaleRelativeTolerance	86	None	replace
402	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecRightTolerance  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  vecRightTolerance  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecRightTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  vecRightTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance    +    scaleRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol  vecRightTolerance	86	None	replace
403	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	32	None	replace
404	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	32	None	replace
405	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	107	None	add
406	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	107	8	add
407	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	107	8	add
408	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  scaleRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  scaleRelativeTolerance  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  scaleRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i]  +  scaleRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  cannot  find  symbol  scaleRelativeTolerance	107	None	add
409	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  vRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  vRelativeTolerance  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  vRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i]  +  vRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  cannot  find  symbol  vRelativeTolerance	107	None	add
410	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.length  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	49	8	replace
411	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.length  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.length  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	49	8	replace
412	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	113	None	replace
413	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
414	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMa	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ';'  expected	92	None	replace
415	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  xDotK[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  xDotK  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  xDotK[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    y[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  xDotK[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  cannot  find  symbol  xDotK	9	None	add
416	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  x[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  x  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  x[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    y[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  x[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	9	None	add
417	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
418	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ')'  expected	65	None	replace
419	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    if(scalRelativeTolerance!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]    	non-compiled	[CE]  ')'  expected	69	None	replace
420	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scal  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  scal  [FE]                  NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scal  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scal  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    if(scalRelativeTolerance!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]    	non-compiled	[CE]  cannot  find  symbol  scal	69	None	replace
421	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  y[i]  *  FastMath.abs(vecAbsoluteTolerance[i],  scale[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  y[i]  *  FastMath.abs(vecAbsoluteTolerance[i],  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  y[i]  *  FastMath.abs(vecAbsoluteTolerance[i],  scale[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i],    scale[i]);    	non-compiled	[CE]  array  required,  but  double  found	8	None	replace
422	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	91	8	add
423	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	91	8	add
424	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [CE]  cannot  find  symbol  scale  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.	  	non-compiled	[CE]  cannot  find  symbol  scale	91	None	add
425	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	112	None	replace
426	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	112	None	replace
427	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  t  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  t  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  t  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	112	None	replace
428	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale  *  FastMath.abs(vecRelativeTolerance[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale  *  FastMath.abs(vecRelativeTolerance[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scale  *  FastMath.abs(vecRelativeTolerance[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	21	None	replace
429	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  y0  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  y0  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  y0  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	44	None	replace
430	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  array  required,  but  double  found  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  array  required,  but  double  found	83	None	replace
431	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scala[i]);  [CE]  cannot  find  symbol  scala  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scala[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scala[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol  scala	83	None	replace
432	[BUG]  [BUGGY]  y[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	94	None	replace
433	[BUG]  [BUGGY]  y[i]  =  vAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	94	None	replace
434	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  +  Math.abs(yDotK[i]);  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  +  Math.abs(yDotK[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i]  +  Math.abs(yDotK[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    Math.abs(yDotK[i]);    	non-compiled	[CE]  array  required,  but  double  found	59	None	replace
435	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[0]);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[0]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[0]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i],    scale[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	58	None	replace
436	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[0]);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[0]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[0]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[0]);    	non-compiled	[CE]  array  required,  but  double  found	99	None	replace
437	[BUG]  [BUGGY]  scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(yDotK[0]);  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(yDotK[0]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(yDotK[0]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[0]);    	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	99	None	replace
438	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  t.computeScale(vecAbsoluteTolerance[i],  scale,  firstTime);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  t.computeScale(vecAbsoluteTolerance[i],  scale,  firstTime);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  t.computeScale(vecAbsoluteTolerance[i],  scale,  firstTime);	  scalAbsoluteTolerance[i]    =    t.computeScale(vecAbsoluteTolerance[i],    scale);    	non-compiled	[CE]  array  required,  but  double  found	13	None	replace
439	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(scale[i],  t);  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(scale[i],  t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(scale[i],  t);	  scalAbsoluteTolerance[i]    =    t.computeScale(vecAbsoluteTolerance[i],    scale);    	non-compiled	[CE]  array  required,  but  double  found	13	None	replace
440	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]            NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i].doubleValue());  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i].doubleValue());	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    if(scalRelativeTolerance!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    }    	non-compiled	[CE]  double  cannot  be  dereferenced	67	None	replace
441	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecDerivativeTolerance  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  vecDerivativeTolerance  [FE]              NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecDerivativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecDerivativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    if(scalRelativeTolerance!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    }    	non-compiled	[CE]  cannot  find  symbol  vecDerivativeTolerance	67	None	replace
442	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scale  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scale  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  scale  *  FastMath.abs(scale[i]);	  scale[i]    =    scale    +    vecAbsoluteTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	87	None	replace
443	[BUG]  [BUGGY]  scale[i]  =  scale  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    scale    +    vecAbsoluteTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	87	None	replace
444	[BUG]  [BUGGY]  scale[i]  =  scale  +  vecAbsoluteTolerance  *  FastMath.abs(scala[i]);  [CE]  cannot  find  symbol  scala  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale  +  vecAbsoluteTolerance  *  FastMath.abs(scala[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale  +  vecAbsoluteTolerance  *  FastMath.abs(scala[i]);	  scale[i]    =    scale    +    vecAbsoluteTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol  scala	87	None	replace
445	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  -  1);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  -  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  -  1);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    -    1);    	non-compiled	[CE]  array  required,  but  double  found	119	None	replace
446	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  double  vecRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	double  vecRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    scalRelativeTolerance    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	55	8	replace
447	[BUG]  [BUGGY]  double  vecRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  double  vecRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	double  vecRelativeTolerance  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    scalRelativeTolerance    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	55	8	replace
448	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance,  scale);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance,  scale);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i].computeScale(vecAbsoluteTolerance,  scale);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    scale);    	non-compiled	[CE]  array  required,  but  double  found	11	None	replace
449	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  vecRelativeTolerance);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  vecRelativeTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  vecRelativeTolerance);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    scale);    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
450	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  firstTime);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  firstTime);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  firstTime);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    scale);    	non-compiled	[CE]  array  required,  but  double  found	11	None	replace
451	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i].getScale();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i].getScale();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i].getScale();	  scalAbsoluteTolerance[i]    =    y[i].getScale();    	non-compiled	[CE]  double  cannot  be  dereferenced	77	None	replace
452	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]  +  scalRelativeTolerance);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]  +  scalRelativeTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]  +  scalRelativeTolerance);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	40	None	replace
453	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i],  scalAbsoluteTolerance);  [CE]  no  suitable  method  found  for  abs(double[],double,double)  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i],  scalAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i],  scalAbsoluteTolerance);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double,double)	40	None	replace
454	[BUG]  [BUGGY]  scale[i]  =  y0  +  vecRelativeTolerance[i]  *  FastMath.abs(scalAbsoluteTolerance[i]);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y0  +  vecRelativeTolerance[i]  *  FastMath.abs(scalAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  y0  +  vecRelativeTolerance[i]  *  FastMath.abs(scalAbsoluteTolerance[i]);	  scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	3	None	replace
455	[BUG]  [BUGGY]  scale[i]  =  yAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  yAbsoluteTolerance  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  yAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  yAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  yAbsoluteTolerance	3	None	replace
456	[BUG]  [BUGGY]  scale[i]  =  y0  +  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y0  +  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  y0  +  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
457	[BUG]  [BUGGY]  scale[i]  =  scaleAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  scaleAbsoluteTolerance  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scaleAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scaleAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    scaledH    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  scaleAbsoluteTolerance	24	None	replace
458	[BUG]  [BUGGY]  scale[i]  =  scaledAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  scaledAbsoluteTolerance  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scaledAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scaledAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    scaledH    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  scaledAbsoluteTolerance	24	None	replace
459	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  vecAbsoluteTolerance[i]  =  scale[i]  +  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	vecAbsoluteTolerance[i]  =  scale[i]  +  vecAbsoluteTolerance[i];	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    scale[i];    	compilable	  [FE]  NullPointerException  	63	8	replace
460	[BUG]  [BUGGY]  vecAbsoluteTolerance[i]  =  scale[i]  +  vecAbsoluteTolerance[i];  [FE]  NullPointerException  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  vecAbsoluteTolerance[i]  =  scale[i]  +  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	vecAbsoluteTolerance[i]  =  scale[i]  +  vecAbsoluteTolerance[i];	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    scale[i];    	compilable	  [FE]  NullPointerException  	63	8	replace
461	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  int  k  =  Math.min(vecAbsoluteTolerance[i],  scale.length  *  FastMath.abs(y[i]);  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  int  k  =  Math.min(vecAbsoluteTolerance[i],  scale.length  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    int  k  =  Math.min(vecAbsoluteTolerance[i],  scale.length  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  ')'  expected	48	None	add
462	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(x[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	48	None	add
463	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  scale[i]);	  y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	90	8	replace
464	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  scale[i]);	  y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	90	8	replace
465	[BUG]  [BUGGY]  y[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	90	None	replace
466	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(x[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	105	None	replace
467	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale.abs(yAbsoluteTolerance[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale.abs(yAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale.abs(yAbsoluteTolerance[i]);	  scalAbsoluteTolerance[i]    =    y[i]    *    vecAbsoluteTolerance.abs(vecAbsoluteTolerance[i]);    	non-compiled	[CE]  array  required,  but  double  found	7	None	replace
468	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale.abs(vecAbsoluteTolerance[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale.abs(vecAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale.abs(vecAbsoluteTolerance[i]);	  scalAbsoluteTolerance[i]    =    y[i]    *    vecAbsoluteTolerance.abs(vecAbsoluteTolerance[i]);    	non-compiled	[CE]  array  required,  but  double  found	7	None	replace
469	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	53	None	replace
470	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	23	8	replace
471	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	23	8	replace
472	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  AssertionError  	34	6	add
473	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  AssertionError  	34	6	add
474	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]	  	non-compiled	[CE]  ')'  expected	34	None	add
475	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(	  	non-compiled	[CE]  ')'  expected	34	None	add
476	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  y.abs(scalRelativeTolerance);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  y.abs(scalRelativeTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  y.abs(scalRelativeTolerance);	  scale[i]    =    vecAbsoluteTolerance[i]    *    scalRelativeTolerance.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
477	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  hNew.abs(y[i]);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  hNew.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  hNew.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    scalRelativeTolerance.abs(y[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
478	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(x[i]);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
479	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  array  required,  but  double  found  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  array  required,  but  double  found	82	None	add
480	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  vAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  vAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	82	None	add
481	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  y[i];  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  y[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  y[i];	  scalAbsoluteTolerance[i]    =    a[i];    	non-compiled	[CE]  array  required,  but  double  found	127	None	replace
482	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i],  y0);  [CE]  no  suitable  method  found  for  abs(double,double[])  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i],  y0);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i],  y0);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y,    i);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double[])	122	None	replace
483	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scala[i],  y);  [CE]  cannot  find  symbol  scala  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scala[i],  y);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scala[i],  y);	  scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y,    i);    	non-compiled	[CE]  cannot  find  symbol  scala	122	None	replace
484	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]  +  2);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]  +  2);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]  +  2);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]    +    1);    	non-compiled	[CE]  array  required,  but  double  found	88	None	replace
485	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  yMath.abs(vecAbsoluteTolerance[i]  +  1);  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  yMath.abs(vecAbsoluteTolerance[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  yMath.abs(vecAbsoluteTolerance[i]  +  1);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]    +    1);    	non-compiled	[CE]  array  required,  but  double  found	88	None	replace
486	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(scale[i]);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
487	[BUG]  [BUGGY]  scale[i]  =  y0  +  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y0  +  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  y0  +  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  scale[i]    =    y0    +    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	103	None	replace
488	[BUG]  [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  error);  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  error);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scalAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  error);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    +    error);    	non-compiled	[CE]  array  required,  but  double  found	100	None	replace
489	[BUG]  [BUGGY]  scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  error);  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  error);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  error);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    +    error);    	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	100	None	replace
490	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  y  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [CE]  cannot  assign  a  value  to  final  variable  y  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  y  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale[i]    *    FastMath.abs(y[i]);    y  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  y	46	None	add
491	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(x[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale[i]    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	46	None	add
492	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance.length  *  FastMath.abs(y[i]);	  scalAbsoluteTolerance[i]    =    y0    +    vecAbsoluteTolerance.length    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	93	None	replace
493	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance  +  vecAbsoluteTolerance.abs(y[i]);	  scalAbsoluteTolerance[i]    =    y0    +    vecAbsoluteTolerance.length    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	93	None	replace
494	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  array  required,  but  double  found	89	None	add
495	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  vAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  vAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	89	None	add
496	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	104	None	replace
497	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	104	None	replace
498	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i];  }  else  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i];  }  [CE]  'else'  without  'if'  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i];  }  else  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i];  }  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i];    if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i];  }  else  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i];  }	  	non-compiled	[CE]  'else'  without  'if'	61	None	add
499	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i];    scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	61	None	add
500	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i];    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	61	8	add
501	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i];    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	61	8	add
502	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i];  }  else  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i];  }  [CE]  'else'  without  'if'  [FE]          NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i];  }  else  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i];  }  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i];    if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i];  }  else  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i];  }	  	non-compiled	[CE]  'else'  without  'if'	61	None	add
503	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(a[i]);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(a[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(a[i]);	  	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	19	None	add
504	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scala[i]);  [CE]  cannot  find  symbol  scala  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scala[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scala[i]);	  	non-compiled	[CE]  cannot  find  symbol  scala	19	None	add
505	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath	  	non-compiled	[CE]  ';'  expected	52	None	add
506	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	84	8	add
507	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	84	8	add
508	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    scale[i]  =  vAbsoluteTolerance[i]  *  Math.abs(scale[i]);	  	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	84	None	add
509	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scala[i]);  [CE]  cannot  find  symbol  scala  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scala[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scala[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  scala	20	None	replace
510	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[0]  =  vecAbsoluteTolerance[0]  +  scalRelativeTolerance  *  FastMath.abs(scale[0]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[0]  =  vecAbsoluteTolerance[0]  +  scalRelativeTolerance  *  FastMath.abs(scale[0]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    if(scalRelativeTolerance    ==    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    }    	compilable	  [FE]  NullPointerException  	124	8	replace
511	[BUG]  [BUGGY]  scale[0]  =  vecAbsoluteTolerance[0]  +  scalRelativeTolerance  *  FastMath.abs(scale[0]);  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[0]  =  vecAbsoluteTolerance[0]  +  scalRelativeTolerance  *  FastMath.abs(scale[0]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[0]  =  vecAbsoluteTolerance[0]  +  scalRelativeTolerance  *  FastMath.abs(scale[0]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    if(scalRelativeTolerance    ==    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    }    	compilable	  [FE]  NullPointerException  	124	8	replace
512	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  t  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  final  parameter  t  may  not  be  assigned  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  t  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    t  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  final  parameter  t  may  not  be  assigned	22	None	add
513	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(x[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	22	None	add
514	[BUG]  [BUGGY]  vecAbsoluteTolerance[i]  =  scale.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  vecAbsoluteTolerance[i]  =  scale.doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	vecAbsoluteTolerance[i]  =  scale.doubleValue();	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
515	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	16	8	replace
516	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	16	8	replace
517	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  1);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	16	8	replace
518	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  1);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]  +  1);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	16	8	replace
519	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	35	None	replace
520	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	35	None	replace
521	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale();    	non-compiled	[CE]  array  required,  but  double  found	125	None	replace
522	[BUG]  [BUGGY]  scale[i]  =  y[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  y[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    1]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	120	None	replace
523	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  scale  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    1]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	120	None	replace
524	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  scale[i]  +  scalRelativeTolerance  *  FastMath.abs	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	54	None	replace
525	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  y[i]  +  vecAbsoluteTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scal	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	54	None	replace
526	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	71	8	add
527	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	71	8	add
528	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }	  	compilable	  [FE]  NullPointerException  	71	8	add
529	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }	  	compilable	  [FE]  NullPointerException  	71	8	add
530	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  	71	8	add
531	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    if(firstTime)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  NullPointerException  	71	8	add
532	[BUG]  [BUGGY]  vecAbsoluteTolerance[i]  =  vecRelativeTolerance[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  vecAbsoluteTolerance[i]  =  vecRelativeTolerance[i].doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	vecAbsoluteTolerance[i]  =  vecRelativeTolerance[i].doubleValue();	  vecAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	117	None	replace
533	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  b[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  b[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    x[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	4	8	replace
534	[BUG]  [BUGGY]  scale[i]  =  b[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [FE]  NullPointerException  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  b[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  b[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    x[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    	compilable	  [FE]  NullPointerException  	4	8	replace
535	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  y0  +  vecRelativeTolerance.abs(vecAbsoluteTolerance[i]);  [CE]  array  required,  but  double  found  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  y0  +  vecRelativeTolerance.abs(vecAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  y0  +  vecRelativeTolerance.abs(vecAbsoluteTolerance[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	43	None	replace
536	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(vecAbsoluteTolerance[i]);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(vecAbsoluteTolerance[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(vecAbsoluteTolerance[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
537	[BUG]  [BUGGY]  timeout  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  b[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  b[i];	  y[i]    =    vecAbsoluteTolerance[i];    	compilable	timeout	108	1	replace
538	[BUG]  [BUGGY]  y[i]  =  b[i];  timeout  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  b[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  b[i];	  y[i]    =    vecAbsoluteTolerance[i];    	compilable	timeout	108	1	replace
539	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	30	None	add
540	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].doubleValue().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].doubleValue().doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].doubleValue().doubleValue();	  scale[i]    =    vecAbsoluteTolerance[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	26	None	replace
541	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance;  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance;  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance;	  scalAbsoluteTolerance[i]    =    t;    	non-compiled	[CE]  array  required,  but  double  found	126	None	replace
542	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(y[i]);	  scalAbsoluteTolerance[i]    =    scale[i]    *    FastMath.abs(vecAbsoluteTolerance[i]);    	non-compiled	[CE]  array  required,  but  double  found	39	None	replace
543	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	add
544	[BUG]  [BUGGY]  scale[i]  =  scale  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance[i]);	  scale[i]    =    vecAbsoluteTolerance    +    vecRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	28	None	replace
545	[BUG]  [BUGGY]  scale[i]  =  scale[i  +  vecAbsoluteTolerance  *  FastMath.abs(vecRelativeTolerance);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i  +  vecAbsoluteTolerance  *  FastMath.abs(vecRelativeTolerance);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i  +  vecAbsoluteTolerance  *  FastMath.abs(vecRelativeTolerance);	  scale[i]    =    vecAbsoluteTolerance    +    vecRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ']'  expected	28	None	replace
546	[BUG]  [BUGGY]  scale[i]  =  scale[i  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale[i  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale[i  +  vecRelativeTolerance  *  FastMath.abs(vecAbsoluteTolerance);	  scale[i]    =    vecAbsoluteTolerance    +    vecRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ']'  expected	28	None	replace
547	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(t,  scale);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(t,  scale);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(t,  scale);	  scalAbsoluteTolerance[i]    =    t.computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  array  required,  but  double  found	131	None	replace
548	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(t,  scale[i]);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(t,  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].computeScale(t,  scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i].getScale();    	non-compiled	[CE]  double  cannot  be  dereferenced	75	None	replace
549	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i]);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].computeScale(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i].getScale();    	non-compiled	[CE]  double  cannot  be  dereferenced	75	None	replace
550	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale[i];  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  scale[i];	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    scale[i];    	non-compiled	[CE]  array  required,  but  double  found	63	None	replace
551	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  t;  [CE]  array  required,  but  double  found  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  t;  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  t;	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    scale[i];    	non-compiled	[CE]  array  required,  but  double  found	63	None	replace
552	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath	  	non-compiled	[CE]  ';'  expected	91	None	add
553	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  array  required,  but  double  found  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    y[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  array  required,  but  double  found	9	None	add
554	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  y[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  array  required,  but  double  found  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  y[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    y[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    y[i]  =  scalAbsoluteTolerance[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  array  required,  but  double  found	9	None	add
555	[BUG]  [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  xTmp  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  xTmp  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y[i]  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scale[i]  =  xTmp  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    y[i]    +    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    scale[i]  =  xTmp  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  cannot  find  symbol  xTmp	9	None	add
556	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
557	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ';'  expected	66	None	replace
558	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [CE]  array  required,  but  double  found  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);	  	non-compiled	[CE]  array  required,  but  double  found	84	None	add
559	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.sin(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  Math.sin(scale[i]);	  	compilable	  [FE]  NullPointerException  	84	8	add
560	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.sin(scale[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.sin(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  Math.sin(scale[i]);	  	compilable	  [FE]  NullPointerException  	84	8	add
561	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y0,  scale[i]);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y0,  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y0,  scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	40	None	replace
562	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale,  y[i]);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale,  y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale,  y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	40	None	replace
563	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecRelativeTolerance  *  FastMath.abs(variables[i],  scale[i]);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  vecRelativeTolerance  *  FastMath.abs(variables[i],  scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  vecRelativeTolerance  *  FastMath.abs(variables[i],  scale[i]);	  scale[i]    =    vecAbsoluteTolerance    +    vecRelativeTolerance    *    FastMath.abs(variables[i]);    	non-compiled	[CE]  cannot  find  symbol  	102	None	replace
564	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.abs(scale[i]);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scale.abs(scale[i]);	  scale[i]    =    scale[i]    +    vecAbsoluteTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
565	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalVisibleTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  scalVisibleTolerance  [FE]          NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalVisibleTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalVisibleTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    if(scalRelativeTolerance!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]    	non-compiled	[CE]  cannot  find  symbol  scalVisibleTolerance	110	None	replace
566	[BUG]  [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  final  parameter  t  may  not  be  assigned  [FE]        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  final  parameter  t  may  not  be  assigned	104	None	replace
567	[BUG]  [BUGGY]  scale[i]  =  scale  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scale  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scale  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	104	None	replace
568	[BUG]  [BUGGY]  vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y,  scale[i]);	  scalAbsoluteTolerance[i]    =    scale[i]    *    FastMath.abs(y,    vecAbsoluteTolerance[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	129	None	replace
569	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  x[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  x  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  x[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        y[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    x[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	34	None	add
570	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecAbsoluteTolerance.abs(y[i]);	  scalAbsoluteTolerance[i]    =    y0    +    vecAbsoluteTolerance.length    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	93	None	replace
571	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i  +  1]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i  +  1]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i  +  1]  *  FastMath.abs(y[i]);	  scalAbsoluteTolerance[i]    =    y0    +    vecAbsoluteTolerance.length    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	93	None	replace
572	[BUG]  [BUGGY]  scale[i]  =  y0  +  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y0  +  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  y0  +  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  scale[i]    =    y0    +    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	103	None	replace
573	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scale.abs(scale[i]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance  +  scale.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance  +  scale.abs(scale[i]);	  scale[i]    =    scale    +    vecAbsoluteTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
574	[BUG]  [BUGGY]  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  t[i]  =  t  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    t[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	32	None	replace
575	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scale[i],  t);  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scale[i],  t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scale[i],  t);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    t);    	non-compiled	[CE]  array  required,  but  double  found	12	None	replace
576	[BUG]  [BUGGY]  vecAbsoluteTolerance[i]  =  t.computeScale(scale,  t);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  vecAbsoluteTolerance[i]  =  t.computeScale(scale,  t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	vecAbsoluteTolerance[i]  =  t.computeScale(scale,  t);	  scalAbsoluteTolerance[i]    =    t.computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  double  cannot  be  dereferenced	131	None	replace
577	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
578	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  scalRelativeTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scalRelativeTolerance[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	54	None	replace
579	[BUG]  [BUGGY]  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  [CE]  cannot  find  symbol  x  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(x[i]);    	non-compiled	[CE]  cannot  find  symbol  x	105	None	replace
580	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  t  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i]  +  t  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	112	8	replace
581	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  t  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  t  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  t  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	112	8	replace
582	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  vecAbsoluteTolerance[i  +  1]  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	112	8	replace
583	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  1]  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    vecAbsoluteTolerance    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	112	8	replace
584	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  x[i]  =  vecAbsoluteTolerance[i];  [CE]  cannot  find  symbol  x  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i];  x[i]  =  vecAbsoluteTolerance[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]    =    vecAbsoluteTolerance[i];    x[i]  =  vecAbsoluteTolerance[i];	  	non-compiled	[CE]  cannot  find  symbol  x	107	None	add
585	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(yDotK[i]  +  error);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(yDotK[i]  +  error);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(yDotK[i]  +  error);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    +    error);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	100	None	replace
586	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  scalAbsoluteTolerance);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  scalAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  +  scalAbsoluteTolerance);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    +    error);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	100	None	replace
587	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalFactor  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  scalFactor  [FE]                NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalFactor  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalFactor  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    if(scalRelativeTolerance!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]    	non-compiled	[CE]  cannot  find  symbol  scalFactor	69	None	replace
588	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scale  *  FastMath.abs(y[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  +  scale  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  +  scale  *  FastMath.abs(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	94	None	replace
589	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i].doubleValue());  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i].doubleValue());	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i],    scale[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	58	None	replace
590	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t;  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]  =  t;	  scale[i]    =    vecAbsoluteTolerance[i];    	compilable	  [FE]  AssertionError  	62	2	replace
591	[BUG]  [BUGGY]  scale[i]  =  t;  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t;  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  t;	  scale[i]    =    vecAbsoluteTolerance[i];    	compilable	  [FE]  AssertionError  	62	2	replace
592	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1  *  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1  *  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  1  *  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	113	None	replace
593	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  2  *  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  2  *  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  2  *  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	113	None	replace
594	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  11  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  11  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  11  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	113	None	replace
595	[BUG]  [BUGGY]  vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  t);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  t);	  scalAbsoluteTolerance[i]    =    scale[i].computeScale(t,    vecAbsoluteTolerance);    	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	replace
596	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	61	8	add
597	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i];  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i];    y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	compilable	  [FE]  NullPointerException  	61	8	add
598	[BUG]  [BUGGY]  Double  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  variable  scalRelativeTolerance  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  Double  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	Double  scalRelativeTolerance  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    scalRelativeTolerance    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  variable  scalRelativeTolerance  might  not  have  been  initialized	33	None	replace
599	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  array  required,  but  double  found  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(scale[i]);    scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  	non-compiled	[CE]  array  required,  but  double  found	82	None	add
600	[BUG]  [BUGGY]  scale[i]  =  scaled[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  scaled  [FE]          AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scaled[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scaled[i]  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    scaledH    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  scaled	24	None	replace
601	[BUG]  [BUGGY]  scale[i]  =  scaled[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  scaled  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  scaled[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  scaled[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    scaledH    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol  scaled	24	None	replace
602	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i],  scale  +  vecRelativeTolerance  *  FastMath.sqrt(y[i]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i],  scale  +  vecRelativeTolerance  *  FastMath.sqrt(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i],  scale  +  vecRelativeTolerance  *  FastMath.sqrt(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i],    scale    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ';'  expected	121	None	replace
603	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y,  t);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y,  t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  y,  t);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    y);    	non-compiled	[CE]  array  required,  but  double  found	106	None	replace
604	[BUG]  [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  cannot  find  symbol  x  [FE]    AssertionError    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        t        +        scalRelativeTolerance        *        FastMath.abs(y[i]);        scale[i]    =    t    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  scale[i]  =  t  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  cannot  find  symbol  x	30	None	add
605	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(scale[i]);  [CE]  array  required,  but  double  found  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance.abs(scale[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	43	None	replace
606	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [CE]  <identifier>  expected  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
607	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  scalAbsoluteTolerance.abs(scale[i]);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  scalAbsoluteTolerance.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  scalAbsoluteTolerance.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    *    scalAbsoluteTolerance.abs(y[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	128	None	replace
608	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(t);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i].computeScale(t);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i].computeScale(t);	  scale[i]    =    vecAbsoluteTolerance[i].getScale();    	non-compiled	[CE]  double  cannot  be  dereferenced	75	None	replace
609	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  }  [CE]  'else'  without  'if'  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  }  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  }	  	non-compiled	[CE]  'else'  without  'if'	48	None	add
610	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]	  	non-compiled	[CE]  ')'  expected	48	None	add
611	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(y[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(y[i]);    if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(	  	non-compiled	[CE]  ')'  expected	48	None	add
612	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i]  -  1);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i]  -  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i],  scale[i]  -  1);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	119	None	replace
613	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  -  1,  scalAbsoluteTolerance);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  -  1,  scalAbsoluteTolerance);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(yDotK[i]  -  1,  scalAbsoluteTolerance);	  scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(yDotK[i]    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	119	None	replace
614	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }  [CE]  'else'  without  'if'  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  }	  	non-compiled	[CE]  'else'  without  'if'	71	None	add
615	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]	  	non-compiled	[CE]  ')'  expected	71	None	add
616	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs(scale[i]);  if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale.length    *    FastMath.abs(scale[i]);    if(vecAbsoluteTolerance[i]  <  scale.length)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.length  *  FastMath.abs	  	non-compiled	[CE]  ';'  expected	71	None	add
617	[BUG]  [BUGGY]  scale[i]  =  y0  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y0  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  y0  +  vecRelativeTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
618	[BUG]  [BUGGY]  scale[i]  =  y0  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  y0  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  y0  +  vecAbsoluteTolerance[i]  *  FastMath.abs(scale[i]);	  scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
619	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scale,  firstTime);  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scale,  firstTime);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i].computeScale(scale,  scale,  firstTime);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].computeScale(scale,    scale);    	non-compiled	[CE]  array  required,  but  double  found	11	None	replace
620	[BUG]  [BUGGY]  vecAbsoluteTolerance[i]  =  vAbsoluteTolerance[i].doubleValue();  [CE]  cannot  find  symbol  vAbsoluteTolerance  [FE]                AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  vecAbsoluteTolerance[i]  =  vAbsoluteTolerance[i].doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	vecAbsoluteTolerance[i]  =  vAbsoluteTolerance[i].doubleValue();	  vecAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  vAbsoluteTolerance	117	None	replace
621	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(variables[i],  scale);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(variables[i],  scale);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance.computeScale(variables[i],  scale);	  scalAbsoluteTolerance[i]    =    t.computeScale(vecAbsoluteTolerance[i],    scale);    	non-compiled	[CE]  array  required,  but  double  found	13	None	replace
622	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecTmp  *  FastMath.abs(scale[i]);  [CE]  cannot  find  symbol  vecTmp  [FE]              NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecTmp  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecTmp  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scaleRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  cannot  find  symbol  vecTmp	74	None	replace
623	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i],  scale[i]);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i],  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i],  scale[i]);	  y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	90	None	replace
624	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.sqrt(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.sqrt(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	90	8	replace
625	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.sqrt(y[i]);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.sqrt(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  *  FastMath.sqrt(y[i]);	  y[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    	compilable	  [FE]  NullPointerException  	90	8	replace
626	[BUG]  [BUGGY]  vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance.doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance.doubleValue();	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
627	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [CE]  <identifier>  expected  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
628	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [CE]  <identifier>  expected  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  y[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    y[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
629	[BUG]  [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [CE]  cannot  find  symbol  scale  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]        =        vecAbsoluteTolerance[i]        +        scalRelativeTolerance        *        FastMath.abs(scale[i]);        scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.	  	non-compiled	[CE]  cannot  find  symbol  scale	64	None	add
630	[BUG]  [BUGGY]  double  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]              NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  double  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	double  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    scalRelativeTolerance    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	55	None	replace
631	[BUG]  [BUGGY]  double  vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [CE]  ']'  expected  [FE]                NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  double  vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	double  vecAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    int    scalRelativeTolerance    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  ']'  expected	55	None	replace
632	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(y,  vecAbsoluteTolerance[i]  +  1);  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(y,  vecAbsoluteTolerance[i]  +  1);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  scale[i]  *  FastMath.abs(y,  vecAbsoluteTolerance[i]  +  1);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    *    FastMath.abs(y,    scale[i]    +    1);    	non-compiled	[CE]  array  required,  but  double  found	88	None	replace
633	[BUG]  [BUGGY]  double  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [CE]  ']'  expected  [FE]              NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  double  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	double  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    int    scalRelativeTolerance    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(scale[i]);    	non-compiled	[CE]  ']'  expected	68	None	replace
634	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  if(t  >  0)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  'else'  without  'if'  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  if(t  >  0)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    if(t  >  0)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  	non-compiled	[CE]  'else'  without  'if'	22	None	add
635	[BUG]  [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  else  {  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [CE]  'else'  without  'if'  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  else  {  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    t    +    vecAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  else  {  scale[i]  =  t  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  'else'  without  'if'	22	None	add
636	[BUG]  [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  scale[i]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scalAbsoluteTolerance[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y,  scale[i]);	  scalAbsoluteTolerance[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  array  required,  but  double  found	44	None	replace
637	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  array  required,  but  double  found  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  y[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    y[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  array  required,  but  double  found	1	None	add
638	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	19	8	add
639	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(y[i]);  scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    *    Math.abs(y[i]);    scale[i]  =  vecAbsoluteTolerance[i]  *  Math.abs(scale[i]);	  	compilable	  [FE]  NullPointerException  	19	8	add
640	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  int  k  =  Math.min(vecAbsoluteTolerance[i],  scale[i]  *  FastMath.abs(y[i]);  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale[i]  *  FastMath.abs(y[i]);  int  k  =  Math.min(vecAbsoluteTolerance[i],  scale[i]  *  FastMath.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]    =    vecAbsoluteTolerance[i]    +    scale[i]    *    FastMath.abs(y[i]);    int  k  =  Math.min(vecAbsoluteTolerance[i],  scale[i]  *  FastMath.abs(y[i]);	  	non-compiled	[CE]  ')'  expected	46	None	add
641	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(y,  i);  [CE]  no  suitable  method  found  for  abs(double[],int)  [FE]            AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(y,  i);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(y,  i);	  scale[i]    =    vecAbsoluteTolerance[i    +    1]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],int)	120	None	replace
642	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(y[i],  scale[i]);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]              AssertionError      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(y[i],  scale[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i  +  1]  +  vecRelativeTolerance  *  FastMath.abs(y[i],  scale[i]);	  scale[i]    =    vecAbsoluteTolerance[i    +    1]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	120	None	replace
643	[BUG]  [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.abs(y[i]);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  scale[i]  =  vecAbsoluteTolerance[i]  +  scale.abs(y[i]);  [BUGGY]      }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	scale[i]  =  vecAbsoluteTolerance[i]  +  scale.abs(y[i]);	  scale[i]    =    scale[i]    +    vecAbsoluteTolerance    *    FastMath.abs(y[i]);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
644	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i].doubleValue();  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i].doubleValue();	  y[i]    =    vecAbsoluteTolerance[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	108	None	replace
645	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  scale[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	y[i]  =  vecAbsoluteTolerance[i]  *  scale[i];	  y[i]    =    vecAbsoluteTolerance[i];    	compilable	  [FE]  NullPointerException  	108	8	replace
646	[BUG]  [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  scale[i];  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {      [BUGGY]  y[i]  =  vecAbsoluteTolerance[i]  *  scale[i];  [BUGGY]      scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	y[i]  =  vecAbsoluteTolerance[i]  *  scale[i];	  y[i]    =    vecAbsoluteTolerance[i];    	compilable	  [FE]  NullPointerException  	108	8	replace
