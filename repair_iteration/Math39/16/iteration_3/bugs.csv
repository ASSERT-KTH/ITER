bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  doublehNew);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(error,  stepStart,  doublehNew);	  filteredNextIsLast    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
2	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  isLastStep);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(error,  stepStart,  isLastStep);	  filteredNextIsLast    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
3	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(expr,  error,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(expr,  error,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(expr,  error,  stepStart);	  filteredNextIsLast    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
4	[BUG]  [BUGGY]  double  firstTime  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  double  firstTime  =  true;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	double  firstTime  =  true;	  double    firstTime    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
5	[BUG]  [BUGGY]  filteredNextIsLast  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  false;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  false;	  double    firstTime    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
6	[BUG]  [BUGGY]  double  firstTime  =  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  double  firstTime  =  null;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	double  firstTime  =  null;	  double    firstTime    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
7	[BUG]  [BUGGY]  filteredNextIsLast  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  true;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  true;	  double    firstTime    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
8	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  error,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  error,  doublehNew);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  error,  doublehNew);	  filteredNextIsLast    =    Math.min(stepStart,    doublehNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
9	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  doublehNew);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  doublehNew);	  filteredNextIsLast    =    Math.min(stepStart,    doublehNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
10	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(doublehNew,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(doublehNew,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(doublehNew,  stepStart);	  filteredNextIsLast    =    Math.min(stepStart,    doublehNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
11	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepStep,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepStep,  doublehNew);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  stepStep,  doublehNew);	  filteredNextIsLast    =    Math.min(stepStart,    doublehNew);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
12	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  stepEnd);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  stepEnd);	  initIntegration(equations.getTime(),    y0,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
13	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  stepEnd);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  stepEnd);	  initIntegration(equations.getTime(),    y0,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
14	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  stepEnd);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  error,  stepEnd);	  initIntegration(equations.getTime(),    y0,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
15	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  error);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  error);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y0,    stepStart,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
16	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y0,    stepStart,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
17	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  stepStart);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  stepStart);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  error,  stepStart);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y0,    stepStart,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
18	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y0,    stepStart,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
19	[BUG]  [BUGGY]  Boolean  firstTime  =  filteredNextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Boolean  firstTime  =  filteredNextIsLast;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Boolean  firstTime  =  filteredNextIsLast;	  Boolean    firstTime    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
20	[BUG]  [BUGGY]  Boolean  firstTime  =  getFirstTime();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Boolean  firstTime  =  getFirstTime();  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Boolean  firstTime  =  getFirstTime();	  Boolean    firstTime    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
21	[BUG]  [BUGGY]  t  =  equations.getSecondaryMappers()  -  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  t  =  equations.getSecondaryMappers()  -  stepStart;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	t  =  equations.getSecondaryMappers()  -  stepStart;	  t    =    equations.getSecondaryMappers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
22	[BUG]  [BUGGY]  t  =  equations.getSecondaryMappers()  +  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  t  =  equations.getSecondaryMappers()  +  stepStart;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	t  =  equations.getSecondaryMappers()  +  stepStart;	  t    =    equations.getSecondaryMappers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
23	[BUG]  [BUGGY]  t  =  equations.getSecondaryMappers(),  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  t  =  equations.getSecondaryMappers(),  stepStart;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	t  =  equations.getSecondaryMappers(),  stepStart;	  t    =    equations.getSecondaryMappers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
24	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  error,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  error,  isLastStep);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  error,  isLastStep);	  filteredNextIsLast    =    Math.min(stepStart,    isLastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
25	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  firstTime);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  firstTime);	  filteredNextIsLast    =    Math.min(stepStart,    isLastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
26	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  t);	  filteredNextIsLast    =    Math.min(stepStart,    isLastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
27	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  error);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  isLastStep,  error);	  filteredNextIsLast    =    Math.min(stepStart,    isLastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
28	[BUG]  [BUGGY]  t  =  equations.getSecondaryMapper()  -  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  t  =  equations.getSecondaryMapper()  -  stepStart;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	t  =  equations.getSecondaryMapper()  -  stepStart;	  t    =    equations.getSecondaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
29	[BUG]  [BUGGY]  t  =  equations.getSecondaryMapper()  +  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  t  =  equations.getSecondaryMapper()  +  stepStart;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	t  =  equations.getSecondaryMapper()  +  stepStart;	  t    =    equations.getSecondaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
30	[BUG]  [BUGGY]  t  =  equations.getSecondaryMapper(),  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  t  =  equations.getSecondaryMapper(),  stepStart;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	t  =  equations.getSecondaryMapper(),  stepStart;	  t    =    equations.getSecondaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
31	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  error);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  error);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y0,    stepStart,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
32	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y0,    stepStart,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
33	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y0,    stepStart,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
34	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  stepStart);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  stepStart);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  error,  stepStart);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y0,    stepStart,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
35	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  doublehNew,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  doublehNew,  error);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  doublehNew,  error);	  filteredNextIsLast    =    Math.min(stepStart,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
36	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  test);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  test);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  test);	  filteredNextIsLast    =    Math.min(test,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
37	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(test,  isLastStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(test,  isLastStep,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(test,  isLastStep,  stepStart);	  filteredNextIsLast    =    Math.min(test,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
38	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(test,  stepStart,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(test,  stepStart,  doublehNew);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(test,  stepStart,  doublehNew);	  filteredNextIsLast    =    Math.min(test,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
39	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMapper();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  stepStart  =  equations.getSecondaryMapper();  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	stepStart  =  equations.getSecondaryMapper();	  initIntegration(equations.getTime(),    y0,    error);    stepStart    =    equations.getSecondaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
40	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  stepStart  =  equations.getSecondaryMapper();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  stepStart  =  equations.getSecondaryMapper();  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  error);  stepStart  =  equations.getSecondaryMapper();	  initIntegration(equations.getTime(),    y0,    error);    stepStart    =    equations.getSecondaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
41	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  doublehNew);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(exp,  stepStart,  doublehNew);	  filteredNextIsLast    =    Math.min(exp,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
42	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(exp,  error,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(exp,  error,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(exp,  error,  stepStart);	  filteredNextIsLast    =    Math.min(exp,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
43	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(exp,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(exp,  isLastStep);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(exp,  isLastStep);	  filteredNextIsLast    =    Math.min(exp,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
44	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  isLastStep);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  isLastStep);	  filteredNextIsLast    =    Math.min(stepStart,    isLastStep,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
45	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepEnd,  isLastStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepEnd,  isLastStep,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepEnd,  isLastStep,  stepStart);	  filteredNextIsLast    =    Math.min(stepStart,    isLastStep,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
46	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew,  error);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  doublehNew,  error);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
47	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  error);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  hNew,  error);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
48	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  error);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepStart,  error);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
49	[BUG]  [BUGGY]  boolean  firstTime  =  error  ||  filteredNextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  error  ||  filteredNextIsLast;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  error  ||  filteredNextIsLast;	  boolean    firstTime    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
50	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  t);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepStart,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y1,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
51	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y1,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
52	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  error,  t);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  error,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y1,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
53	[BUG]  [BUGGY]  boolean  firstTime  =  filteredNextIsLast  &&  isLastStep;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  filteredNextIsLast  &&  isLastStep;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  filteredNextIsLast  &&  isLastStep;	  boolean    firstTime    =    filteredNextIsLast;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
54	[BUG]  [BUGGY]  boolean  firstTime  =  filteredNextIsLast  &&  stepStart  <  =  Math.min(stepStart,  stepStart));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  filteredNextIsLast  &&  stepStart  <  =  Math.min(stepStart,  stepStart));  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  filteredNextIsLast  &&  stepStart  <  =  Math.min(stepStart,  stepStart));	  boolean    firstTime    =    filteredNextIsLast;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
55	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  error,  stepStart);	  initIntegration(equations.getTime(),    y0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
56	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepStart);	  initIntegration(equations.getTime(),    y0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
57	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew);	  initIntegration(equations.getTime(),    y0,    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
58	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  error,  t);	  initIntegration(equations.getTime(),    y0,    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
59	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  t,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  t,  stepStart);	  initIntegration(equations.getTime(),    y0,    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
60	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  t);	  initIntegration(equations.getTime(),    y0,    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
61	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepStart,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
62	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  doublehNew,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
63	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  error);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepStart,  error);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y1,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
64	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y1,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
65	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error,  stepStart);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  error,  stepStart);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  error,  stepStart);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y1,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
66	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(expr,  error,  stepStart,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(expr,  error,  stepStart,  stepEnd);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(expr,  error,  stepStart,  stepEnd);	  filteredNextIsLast    =    Math.min(error,    stepStart,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
67	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepEnd,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepEnd,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepEnd,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepEnd,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
68	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepEnd,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepEnd,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepEnd,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepEnd,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
69	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  stepEnd);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepEnd,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
70	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  stepEnd,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepEnd,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
71	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  hNew,  t);	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
72	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepStart,  t);	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
73	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew,  error);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  doublehNew,  error);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
74	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  error,  stepEnd,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  error,  stepEnd,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  error,  stepEnd,  t);	  filteredNextIsLast    =    Math.min(stepStart,    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
75	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  t,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  t,  isLastStep);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  t,  isLastStep);	  filteredNextIsLast    =    Math.min(stepStart,    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
76	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(t,  stepEnd,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(t,  stepEnd,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(t,  stepEnd,  stepStart);	  filteredNextIsLast    =    Math.min(stepStart,    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
77	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  doublehNew);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  doublehNew);	  filteredNextIsLast    =    Math.min(stepStart,    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
78	[BUG]  [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  false;	  filteredNextIsLast    =    initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
79	[BUG]  [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  stepStart,  y0,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  stepStart,  y0,  error);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  initIntegration(equations.getTime(),  stepStart,  y0,  error);  isLastStep  =  false;	  filteredNextIsLast    =    initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
80	[BUG]  [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  false;	  filteredNextIsLast    =    initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
81	[BUG]  [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;	  filteredNextIsLast    =    initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
82	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  stepStart  =  equations.getSecondaryMappers();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  stepStart  =  equations.getSecondaryMappers();  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  error);  stepStart  =  equations.getSecondaryMappers();	  initIntegration(equations.getTime(),    y0,    error);    stepStart    =    equations.getSecondaryMappers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
83	[BUG]  [BUGGY]  stepStart  =  equations.getSecondaryMappers();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  stepStart  =  equations.getSecondaryMappers();  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	stepStart  =  equations.getSecondaryMappers();	  initIntegration(equations.getTime(),    y0,    error);    stepStart    =    equations.getSecondaryMappers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
84	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  stepEnd);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  stepEnd);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  stepEnd);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y0,    stepEnd);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
85	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepEnd);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepEnd);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepEnd);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y0,    stepEnd);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
86	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepStart);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y1,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
87	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  error,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  error,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y1,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
88	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  x,  stepStart,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  x,  stepStart,  t);	  initIntegration(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
89	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepEnd,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepEnd,  t);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepEnd,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepEnd,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
90	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepEnd,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepEnd,  t);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepEnd,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepEnd,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
91	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  stepEnd);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepEnd,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
92	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y2,  stepEnd,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y2,  stepEnd,  t);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y2,  stepEnd,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepEnd,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
93	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  hNew,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
94	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  y0,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  doublehNew,  y0,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
95	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error,  stepStart);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  error,  stepStart);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  error,  stepStart);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y1,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
96	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y2,  error);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y1,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
97	[BUG]  [BUGGY]  Boolean  firstTime  =  true,  filteredNextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Boolean  firstTime  =  true,  filteredNextIsLast;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Boolean  firstTime  =  true,  filteredNextIsLast;	  Boolean    firstTime    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
98	[BUG]  [BUGGY]  Boolean  firstTime  =  true,  filteredNextIsLast.booleanValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Boolean  firstTime  =  true,  filteredNextIsLast.booleanValue();  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Boolean  firstTime  =  true,  filteredNextIsLast.booleanValue();	  Boolean    firstTime    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
99	[BUG]  [BUGGY]  Boolean  firstTime  =  true,  stepStart  =  filteredNextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Boolean  firstTime  =  true,  stepStart  =  filteredNextIsLast;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Boolean  firstTime  =  true,  stepStart  =  filteredNextIsLast;	  Boolean    firstTime    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
100	[BUG]  [BUGGY]  boolean  firstTime  =  isLastStep  &&  isLastStep;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  isLastStep  &&  isLastStep;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  isLastStep  &&  isLastStep;	  boolean    firstTime    =    isLastStep;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
101	[BUG]  [BUGGY]  boolean  firstTime  =  isLastStep  ||  isLastStep;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  isLastStep  ||  isLastStep;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  isLastStep  ||  isLastStep;	  boolean    firstTime    =    isLastStep;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
102	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  doublehNew);  stepStart  =  equations.getSecondaryMappers();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  doublehNew);  stepStart  =  equations.getSecondaryMappers();  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  error,  doublehNew);  stepStart  =  equations.getSecondaryMappers();	  initIntegration(equations.getTime(),    y0,    doublehNew);    stepStart    =    equations.getSecondaryMappers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
103	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  error);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  stepEnd,  error);	  filteredNextIsLast    =    Math.min(stepStart,    error,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
104	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepEnd,  error,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepEnd,  error,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepEnd,  error,  stepStart);	  filteredNextIsLast    =    Math.min(stepStart,    error,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
105	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t,  error);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  t,  error);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
106	[BUG]  [BUGGY]  Boolean  firstTime  =  false,  filteredNextIsLast,  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Boolean  firstTime  =  false,  filteredNextIsLast,  stepStart;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Boolean  firstTime  =  false,  filteredNextIsLast,  stepStart;	  Boolean    firstTime    =    false,    filteredNextIsLast;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
107	[BUG]  [BUGGY]  Boolean  firstTime  =  false,  isLastStep;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Boolean  firstTime  =  false,  isLastStep;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Boolean  firstTime  =  false,  isLastStep;	  Boolean    firstTime    =    false,    filteredNextIsLast;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
108	[BUG]  [BUGGY]  Boolean  firstTime  =  false,  stepStart,  filteredNextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Boolean  firstTime  =  false,  stepStart,  filteredNextIsLast;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Boolean  firstTime  =  false,  stepStart,  filteredNextIsLast;	  Boolean    firstTime    =    false,    filteredNextIsLast;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
109	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew,  t);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  doublehNew,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
110	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  y0,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  y0,  t);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  doublehNew,  y0,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
111	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t,  error);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  t,  error);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
112	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  doublehNew);  stepStart  =  equations.getSecondaryMapper();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  doublehNew);  stepStart  =  equations.getSecondaryMapper();  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  error,  doublehNew);  stepStart  =  equations.getSecondaryMapper();	  initIntegration(equations.getTime(),    y0,    doublehNew);    stepStart    =    equations.getSecondaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
113	[BUG]  [BUGGY]  t  =  equations.getTime();  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  t  =  equations.getTime();  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	t  =  equations.getTime();  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
114	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x,  stepStart,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  x,  stepStart,  error);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  x,  stepStart,  error);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
115	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  hNew,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  hNew,  error);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  hNew,  error);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
116	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(error,  isLastStep,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(error,  isLastStep,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(error,  isLastStep,  stepStart);	  filteredNextIsLast    =    Math.min(error,    stepStart,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
117	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepEnd,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepEnd,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(error,  stepEnd,  stepStart);	  filteredNextIsLast    =    Math.min(error,    stepStart,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
118	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  error);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  error);	  initIntegration(equations.getTime(),    y0,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
119	[BUG]  [BUGGY]  boolean  firstTime  =  filteredNextIsLast  ||  filteredNextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  filteredNextIsLast  ||  filteredNextIsLast;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  filteredNextIsLast  ||  filteredNextIsLast;	  boolean    firstTime    =    filteredNextIsLast;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
120	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  error);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  error);	  initIntegration(equations.getTime(),    stepStart,    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
121	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(error,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(error,  isLastStep);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(error,  isLastStep);	  filteredNextIsLast    =    Math.min(stepStart,    isLastStep);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
122	[BUG]  [BUGGY]  t  =  equations.getSecondaryMapper(stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  t  =  equations.getSecondaryMapper(stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	t  =  equations.getSecondaryMapper(stepStart);	  t    =    equations.getSecondaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
123	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  hNew,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  hNew,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  hNew,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
124	[BUG]  [BUGGY]  Double  firstTime  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Double  firstTime  =  true;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Double  firstTime  =  true;	  double    firstTime    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
125	[BUG]  [BUGGY]  t  =  equations.getSecondaryMappers()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  t  =  equations.getSecondaryMappers()  -  1;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	t  =  equations.getSecondaryMappers()  -  1;	  t    =    equations.getSecondaryMappers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
126	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  hNew);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  hNew);	  initIntegration(equations.getTime(),    y0,    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
127	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  hNew);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  hNew);  isLastStep  =  false;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  hNew);  isLastStep  =  false;	  initIntegration(equations.getTime(),    y0,    stepStart);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
128	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(exp,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(exp,  error);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(exp,  error);	  filteredNextIsLast    =    Math.min(stepStart,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
129	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.max(error,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.max(error,  stepStart);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.max(error,  stepStart);	  filteredNextIsLast    =    Math.min(stepStart,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
130	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(error,  stepStart,  t);	  filteredNextIsLast    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
131	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  doublehNew,  t);  stepStart  =  equations.getSecondaryMappers();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  doublehNew,  t);  stepStart  =  equations.getSecondaryMappers();  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  doublehNew,  t);  stepStart  =  equations.getSecondaryMappers();	  initIntegration(equations.getTime(),    y0,    doublehNew);    stepStart    =    equations.getSecondaryMappers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
132	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  hNew,  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  hNew,  y0,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  hNew,  y0,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
133	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  isLastStep);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(exp,  stepStart,  isLastStep);	  filteredNextIsLast    =    Math.min(exp,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
134	[BUG]  [BUGGY]  boolean  firstTime  =  error  &&  isLastStep;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  error  &&  isLastStep;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  error  &&  isLastStep;	  boolean    firstTime    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
135	[BUG]  [BUGGY]  boolean  firstTime  =  error  +  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  error  +  stepStart;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  error  +  stepStart;	  boolean    firstTime    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
136	[BUG]  [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  false;	  filteredNextIsLast    =    initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
137	[BUG]  [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;	  filteredNextIsLast    =    initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
138	[BUG]  [BUGGY]  Boolean  firstTime  =  false,  filteredNextIsLast,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Boolean  firstTime  =  false,  filteredNextIsLast,  stepStart);  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Boolean  firstTime  =  false,  filteredNextIsLast,  stepStart);	  Boolean    firstTime    =    false,    filteredNextIsLast;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
139	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  stepEnd,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  stepEnd,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(error,  stepStart,  stepEnd,  t);	  filteredNextIsLast    =    Math.min(stepStart,    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
140	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  stepEnd,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  stepEnd,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(exp,  stepStart,  stepEnd,  t);	  filteredNextIsLast    =    Math.min(stepStart,    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
141	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  hNew);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  hNew);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  hNew);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
142	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(test,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(test,  isLastStep);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(test,  isLastStep);	  filteredNextIsLast    =    Math.min(test,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
143	[BUG]  [BUGGY]  boolean  firstTime  =  isLastStep  ||  filteredNextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  isLastStep  ||  filteredNextIsLast;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  isLastStep  ||  filteredNextIsLast;	  boolean    firstTime    =    isLastStep;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
144	[BUG]  [BUGGY]  boolean  firstTime  =  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  isLastStep  =  true;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  isLastStep  =  true;	  boolean    firstTime    =    isLastStep;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
145	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y1,  stepEnd);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y1,  stepEnd);	  initIntegration(equations.getTime(),    y0,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
146	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  hNew,  y0,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  hNew,  y0,  error);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  hNew,  y0,  error);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
147	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  doublehNew,  t);  stepStart  =  equations.getSecondaryMapper();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  doublehNew,  t);  stepStart  =  equations.getSecondaryMapper();  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  doublehNew,  t);  stepStart  =  equations.getSecondaryMapper();	  initIntegration(equations.getTime(),    y0,    doublehNew);    stepStart    =    equations.getSecondaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
148	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  error,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  error,  stepEnd);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(exp,  stepStart,  error,  stepEnd);	  filteredNextIsLast    =    Math.min(stepStart,    error,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
149	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  doublehNew);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  doublehNew);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  doublehNew);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y0,    stepStart);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
150	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart,  t);  isLastStep  =  false;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  x0,  stepStart,  t);  isLastStep  =  false;	  initIntegration(equations.getTime(),    stepStart,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
151	[BUG]  [BUGGY]  boolean  firstTime  =  filteredNextIsLast  &&  filteredNextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  filteredNextIsLast  &&  filteredNextIsLast;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  filteredNextIsLast  &&  filteredNextIsLast;	  boolean    firstTime    =    filteredNextIsLast;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
152	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  error);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  doublehNew,  error);	  initIntegration(equations.getTime(),    y0,    stepStart,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
153	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  stepEnd);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(exp,  stepStart,  stepEnd);	  filteredNextIsLast    =    Math.min(stepStart,    isLastStep,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
154	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  hNew,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  hNew,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  hNew,  t);	  initIntegration(equations.getTime(),    y0,    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
155	[BUG]  [BUGGY]  boolean  firstTime  =  isLastStep  &&  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  isLastStep  &&  isLastStep);  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  isLastStep  &&  isLastStep);	  boolean    firstTime    =    isLastStep;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
156	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  error);  stepStart  =  equations.getSecondaryMappers();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  error);  stepStart  =  equations.getSecondaryMappers();  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  doublehNew,  error);  stepStart  =  equations.getSecondaryMappers();	  initIntegration(equations.getTime(),    y0,    error);    stepStart    =    equations.getSecondaryMappers();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
157	[BUG]  [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  true;	  initIntegration(equations.getTime(),    y1,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
158	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd,  t);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  stepEnd,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepEnd,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
159	[BUG]  [BUGGY]  double  firstTime  =  t;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  double  firstTime  =  t;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	double  firstTime  =  t;	  double    firstTime    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
160	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  stepEnd,  stepStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  stepEnd,  stepStep);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(error,  stepStart,  stepEnd,  stepStep);	  filteredNextIsLast    =    Math.min(error,    stepStart,    stepEnd);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
161	[BUG]  [BUGGY]  Boolean  firstTime  =  t;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Boolean  firstTime  =  t;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Boolean  firstTime  =  t;	  Boolean    firstTime    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
162	[BUG]  [BUGGY]  Boolean  firstTime  =  error;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  Boolean  firstTime  =  error;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	Boolean  firstTime  =  error;	  Boolean    firstTime    =    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
163	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  error,  stepStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(stepStart,  error,  stepStep);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(stepStart,  error,  stepStep);	  filteredNextIsLast    =    Math.min(stepStart,    error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
164	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(exp,  stepStart,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(exp,  stepStart,  t);	  filteredNextIsLast    =    Math.min(exp,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
165	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  error);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  hNew,  error);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
166	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart,  t);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  x0,  stepStart,  t);	  initIntegration(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
167	[BUG]  [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
168	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  error);  stepStart  =  equations.getSecondaryMapper();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  error);  stepStart  =  equations.getSecondaryMapper();  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  doublehNew,  error);  stepStart  =  equations.getSecondaryMapper();	  initIntegration(equations.getTime(),    y0,    error);    stepStart    =    equations.getSecondaryMapper();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
169	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart,  t);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  x0,  stepStart,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
170	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  t);  isLastStep  =  true;  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	initIntegration(equations.getTime(),  stepStart,  hNew,  t);  isLastStep  =  true;	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
171	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  stepStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  filteredNextIsLast  =  Math.min(error,  stepStart,  stepStep);  [BUGGY]      boolean  firstTime  =  true;  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	filteredNextIsLast  =  Math.min(error,  stepStart,  stepStep);	  filteredNextIsLast    =    Math.min(error,    stepStart);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
172	[BUG]  [BUGGY]  boolean  firstTime  =  error  >  t;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]        final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;      [BUGGY]  boolean  firstTime  =  error  >  t;  [BUGGY]      initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	boolean  firstTime  =  error  >  t;	  boolean    firstTime    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
