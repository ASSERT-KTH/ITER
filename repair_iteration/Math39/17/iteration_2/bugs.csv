bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd,  t);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  stepEnd,  t);	  initIntegration(equations.getTime(),    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
2	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  stepEnd);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  stepEnd);	  initIntegration(equations.getTime(),    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
3	[BUG]  [BUGGY]  initIntegration(t.getTime(),  stepEnd,  equations);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(t.getTime(),  stepEnd,  equations);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(t.getTime(),  stepEnd,  equations);	  initIntegration(equations.getTime(),    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
4	[BUG]  [BUGGY]  initIntegration(t.getTime(),  stepEnd,  equations.getSecondaryMapper());  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(t.getTime(),  stepEnd,  equations.getSecondaryMapper());  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(t.getTime(),  stepEnd,  equations.getSecondaryMapper());	  initIntegration(equations.getTime(),    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
5	[BUG]  [BUGGY]  initInteger(equations.getTime(),  stepStart,  doublehNew,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initInteger(equations.getTime(),  stepStart,  doublehNew,  t);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initInteger(equations.getTime(),  stepStart,  doublehNew,  t);	  initInteger(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
6	[BUG]  [BUGGY]  initInteger(t.getTime(),  stepStart,  equations.getSecondaryMapper());  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initInteger(t.getTime(),  stepStart,  equations.getSecondaryMapper());  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initInteger(t.getTime(),  stepStart,  equations.getSecondaryMapper());	  initInteger(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
7	[BUG]  [BUGGY]  initInteger(equations.getTime(),  stepStart,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initInteger(equations.getTime(),  stepStart,  doublehNew);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initInteger(equations.getTime(),  stepStart,  doublehNew);	  initInteger(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
8	[BUG]  [BUGGY]  initInteger(t.getTime(),  stepStart,  equations.getSecondaryMappers());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initInteger(t.getTime(),  stepStart,  equations.getSecondaryMappers());  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initInteger(t.getTime(),  stepStart,  equations.getSecondaryMappers());	  initInteger(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
9	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  true;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
10	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  true;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
11	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  t);  isLastStep  =  true;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepEnd,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
12	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  false;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
13	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  false;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
14	[BUG]  [BUGGY]  if(stepStart)  {  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  if(stepStart)  {  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  }  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	if(stepStart)  {  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  }	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
15	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  t);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
16	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew,  t);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  doublehNew,  t);	  initIntegration(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
17	[BUG]  [BUGGY]  initIntegration(t.getTime(),  stepStart,  equations.getSecondaryMapper());  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(t.getTime(),  stepStart,  equations.getSecondaryMapper());  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(t.getTime(),  stepStart,  equations.getSecondaryMapper());	  initIntegration(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
18	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  doublehNew);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  doublehNew);	  initIntegration(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
19	[BUG]  [BUGGY]  initIntegration(t.getTime(),  stepStart,  equations);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(t.getTime(),  stepStart,  equations);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(t.getTime(),  stepStart,  equations);	  initIntegration(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
20	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  firstTime;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  t);  isLastStep  =  firstTime;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    firstTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
21	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  firstTime;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  t);  isLastStep  =  firstTime;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    firstTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
22	[BUG]  [BUGGY]  initLong(equations.getTime(),  y0,  t);  isLastStep  =  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initLong(equations.getTime(),  y0,  t);  isLastStep  =  firstTime;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initLong(equations.getTime(),  y0,  t);  isLastStep  =  firstTime;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    firstTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
23	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  true;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
24	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  error);  isLastStep  =  true;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  error);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
25	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  true;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
26	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  true;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
27	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  y0,  error);  isLastStep  =  false;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  y0,  error);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
28	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  false;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
29	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  false;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  error);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
30	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
31	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  x0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  x0,  t);  isLastStep  =  false;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  x0,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    x0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
32	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  hNew,  t);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  hNew,  t);	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
33	[BUG]  [BUGGY]  initIntegration(t.getTime(),  stepStart,  y0,  equations.getSecondaryMapper());  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(t.getTime(),  stepStart,  y0,  equations.getSecondaryMapper());  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(t.getTime(),  stepStart,  y0,  equations.getSecondaryMapper());	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
34	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  error,  y0,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  error,  y0,  stepStart);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  error,  y0,  stepStart);	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
35	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  equations.getSecondaryMapper());  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  equations.getSecondaryMapper());  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  equations.getSecondaryMapper());	  initIntegration(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
36	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y0,  stepStart);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
37	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y1,  t);  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y1,  t);	      initIntegration(equations.getTime(),    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
38	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  true;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
39	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  false;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
40	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  phaseStart,  stepEnd,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  phaseStart,  stepEnd,  t);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  phaseStart,  stepEnd,  t);	  initIntegration(equations.getTime(),    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
41	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  hNew,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  hNew,  t);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepEnd,  hNew,  t);	  initIntegration(equations.getTime(),    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
42	[BUG]  [BUGGY]  initInteger(equations.getTime(),  stepStart,  equations.getSecondaryMappers());  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initInteger(equations.getTime(),  stepStart,  equations.getSecondaryMappers());  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initInteger(equations.getTime(),  stepStart,  equations.getSecondaryMappers());	  initInteger(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
43	[BUG]  [BUGGY]  initInteger(equations.getTime(),  stepStart,  equations.getSecondaryMapper());  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initInteger(equations.getTime(),  stepStart,  equations.getSecondaryMapper());  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initInteger(equations.getTime(),  stepStart,  equations.getSecondaryMapper());	  initInteger(equations.getTime(),    stepStart,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
44	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  true;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
45	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y1,  t);  isLastStep  =  true;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y1,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
46	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  yNew,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  yNew,  t);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  yNew,  t);	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
47	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  hNew);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  hNew);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  hNew);	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
48	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart);  isLastStep  =  false;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  x0,  stepStart);  isLastStep  =  false;	      initIntegration(equations.getTime(),    x0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
49	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  x0,  stepStart,  t);  isLastStep  =  false;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  x0,  stepStart,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    x0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
50	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  firstTime;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  y0,  stepStart);  isLastStep  =  firstTime;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    firstTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
51	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  t);  isLastStep  =  firstTime;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  doublehNew,  t);  isLastStep  =  firstTime;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  doublehNew,  t);  isLastStep  =  firstTime;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    firstTime;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
52	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepStart,  yTmp,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepStart,  yTmp,  t);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepStart,  yTmp,  t);	  initIntegration(equations.getTime(),    stepStart,    y0,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
53	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  stepEnd,  t);  isLastStep  =  false;  [BUGGY]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  stepEnd,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
54	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  steps,  stepEnd,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initIntegration(equations.getTime(),  steps,  stepEnd,  t);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initIntegration(equations.getTime(),  steps,  stepEnd,  t);	  initIntegration(equations.getTime(),    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
55	[BUG]  [BUGGY]  initInteger(equations.getTime(),  stepStart,  stepEnd,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      final  RungeKuttaStepInterpolator  interpolator  =  (RungeKuttaStepInterpolator)  prototype.copy();  interpolator.reinitialize(this,  yTmp,  yDotK,  forward,  equations.getPrimaryMapper(),  equations.getSecondaryMappers());  interpolator.storeTime(equations.getTime());  stepStart  =  equations.getTime();  doublehNew=  0;  boolean  firstTime  =  true;    [BUGGY]  initInteger(equations.getTime(),  stepStart,  stepEnd,  t);  [BUGGY]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	initInteger(equations.getTime(),  stepStart,  stepEnd,  t);	  initIntegration(equations.getTime(),    stepEnd,    t);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
