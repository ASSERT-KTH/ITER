bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {	  for(int    k    =    0;    k    <    stages;    ++k)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
2	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  0;  k  <  stages.length;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  stages.length;  ++k)  {	  for(int    k    =    0;    k    <    stages;    ++k)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
3	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stageSize;  ++k)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  0;  k  <  stageSize;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  stageSize;  ++k)  {	  for(int    k    =    0;    k    <    stages;    ++k)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
4	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	8	None	replace
5	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	8	None	replace
6	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	7	None	replace
7	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	7	None	replace
8	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	7	None	replace
9	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  =  0;  ++k)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  1;  k  <  =  0;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  =  0;  ++k)  {	  for(int    k    =    1;    k    <    0;    ++k)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
10	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  2;  ++k)  {  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  1;  k  <  2;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  2;  ++k)  {	  for(int    k    =    1;    k    <    0;    ++k)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
11	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	11	None	replace
12	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	11	None	replace
13	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	11	None	replace
14	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yDotK.length;  ++k)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  1;  k  <  yDotK.length;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  yDotK.length;  ++k)  {	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
15	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  hNew.length;  ++k)  {	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
16	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  scale.length;  ++k)  {  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  1;  k  <  scale.length;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  scale.length;  ++k)  {	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
17	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	12	None	replace
18	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	12	None	replace
19	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  yDotK[0],  yTmp,  yDotK[1]);	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	13	None	replace
20	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
21	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
22	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
23	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
24	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	10	None	replace
25	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	10	None	replace
26	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	9	None	replace
27	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(x,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	9	None	replace
28	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	9	None	replace
29	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	5	None	replace
30	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	5	None	replace
31	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	6	None	replace
32	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	6	None	replace
33	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	12	None	replace
34	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	5	None	replace
35	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	5	None	replace
36	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	10	None	replace
37	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	10	None	replace
38	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	11	None	replace
39	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	7	None	replace
40	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);	      filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	13	None	replace
41	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	6	None	replace
43	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	6	None	replace
44	[BUG]  [BUGGY]  for(int  k  =  1;  k  >=  0;  ++k)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  1;  k  >=  0;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  >=  0;  ++k)  {	  for(int    k    =    1;    k    <    0;    ++k)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
45	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stage,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stage,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stage,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	8	None	replace
46	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  2)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  1;  k  <  2)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  2)  {	  for(int    k    =    1;    k    <    0;    ++k)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
47	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stepSize;  ++k)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  1;  k  <  stepSize;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  stepSize;  ++k)  {	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
48	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      	non-compiled	[CE]  ';'  expected	4	None	replace
49	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      	non-compiled	[CE]  ';'  expected	4	None	replace
50	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yTmp,  yDotK[1]);	      filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	8	None	replace
51	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  0;  k  <  1;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  1;  ++k)  {	  for(int    k    =    0;    k    <    stages;    ++k)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
52	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  2;  ++k)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  for(int  k  =  0;  k  <  2;  ++k)  {  [BUGGY]      for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  2;  ++k)  {	  for(int    k    =    0;    k    <    stages;    ++k)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
53	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(stepSize,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;      [BUGGY]  filteredNextT  =  initializeStep(stepSize,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]    for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(stepSize,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	      filteredNextT    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	9	None	replace
