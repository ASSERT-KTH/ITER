bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	42	None	replace
2	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	42	None	replace
3	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	27	None	replace
4	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(forward,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	27	None	replace
5	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	37	None	replace
6	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    hNew[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	39	None	replace
7	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    hNew[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	39	None	replace
8	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepEnd,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	13	None	replace
9	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	29	None	replace
10	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  yDotK[0],  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	29	None	replace
11	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(hNew,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	26	None	replace
12	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	32	None	replace
13	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	32	None	replace
14	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	6	None	replace
15	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  0)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  0)  {	  for(int    k    =    1;    k    <    2)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
16	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  1)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  1)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  1)  {	  for(int    k    =    1;    k    <    2)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
17	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	24	None	replace
18	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	24	None	replace
19	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
20	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
21	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y1[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y1[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y1[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
22	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
23	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	31	None	replace
24	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	31	None	replace
25	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	49	None	replace
26	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	49	None	replace
27	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	49	None	replace
28	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	49	None	replace
29	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
30	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  true;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
31	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
32	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
33	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepEnd,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	7	None	replace
34	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(nextIsLast,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(nextIsLast,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(nextIsLast,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(forward,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	28	None	replace
35	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  yDotK.length;  ++k)  {	  for(int    k    =    1;    k    <    yDotK.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
36	[BUG]  [BUGGY]  for(int  k  =  2;  k  <  yDotK.length;  ++k)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  2;  k  <  yDotK.length;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  2;  k  <  yDotK.length;  ++k)  {	  for(int    k    =    1;    k    <    yDotK.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
37	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	30	None	replace
38	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	30	None	replace
39	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  =  2;  ++k)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  =  2;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  =  2;  ++k)  {	  for(int    k    =    1;    k    <    2;    ++k)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
40	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  3;  ++k)  {  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  3;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  3;  ++k)  {	  for(int    k    =    1;    k    <    2;    ++k)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
41	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	50	None	replace
42	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yDotK[1]);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	50	None	replace
43	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  hNew.length;  ++k)  {	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
44	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y.length;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y.length;  ++k)  {	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
45	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  stages.length;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  stages.length;  ++k)  {	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
46	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  steps.length;  ++k)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  steps.length;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  steps.length;  ++k)  {	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
47	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stageSize.length;  ++k)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  stageSize.length;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  stageSize.length;  ++k)  {	  for(int    k    =    0;    k    <    stages.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
48	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  scale.length;  ++k)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  scale.length;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  scale.length;  ++k)  {	  for(int    k    =    1;    k    <    scale.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
49	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	36	None	replace
50	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	36	None	replace
51	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	40	None	replace
52	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	40	None	replace
53	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	11	None	replace
54	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	11	None	replace
55	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	43	None	replace
56	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stages[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stages[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stages[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	43	None	replace
57	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	34	None	replace
58	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [CE]  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  	34	None	replace
59	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);  [CE]  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  	33	None	replace
60	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	33	None	replace
61	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	33	None	replace
62	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	17	None	replace
63	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	17	None	replace
64	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(hNew))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
65	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  yDotK.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(hNew))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
66	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextT.equals(hNew))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(hNew))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
67	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  y.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  y.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(hNew))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
68	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	4	None	replace
69	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stage,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	45	None	replace
70	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    hNew[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	38	None	replace
71	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	48	None	replace
72	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	48	None	replace
73	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  stepStart,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	48	None	replace
74	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stepSize;  ++k)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  stepSize;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  stepSize;  ++k)  {	  for(int    k    =    1;    k    <    stepSize;    ++k)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
75	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  =  stepSize;  ++k)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  =  stepSize;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  =  stepSize;  ++k)  {	  for(int    k    =    1;    k    <    stepSize;    ++k)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
76	[BUG]  [BUGGY]  for(int  k  =  2;  k  <  y0.length;  ++k)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  2;  k  <  y0.length;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  2;  k  <  y0.length;  ++k)  {	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
78	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
79	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
80	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y1[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y1[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y1[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
81	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  3;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  3;  ++k)  {	  for(int    k    =    0;    k    <    1;    ++k)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
82	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	8	None	replace
83	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	35	None	replace
84	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	25	None	replace
85	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(hNew,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	41	None	replace
86	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(error,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(error,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(error,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	41	None	replace
87	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  stage,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	12	None	replace
88	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	12	None	replace
89	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	18	None	replace
90	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	18	None	replace
91	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  stageSize;  ++k)  {	  for(int    k    =    0;    k    <    stageSize;    ++k)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
92	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  y0.length)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  y0.length)  {	  for(int    k    =    1;    k    <    2)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
93	[BUG]  [BUGGY]  for(int  k  =  1;  k!=  0;  ++k)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k!=  0;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k!=  0;  ++k)  {	  for(int    k    =    1;    k    >=    0;    ++k)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
94	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	34	None	replace
95	[BUG]  [BUGGY]  if(filteredNextT!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  if(filteredNextT!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	if(filteredNextT!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
96	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
97	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
98	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  steps[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  steps[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  steps[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	42	None	replace
99	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  ySize[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  ySize[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  ySize[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	42	None	replace
100	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	32	None	replace
101	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepEnd,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	7	None	replace
102	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  factor,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	18	None	replace
103	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yTmp[0],  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yTmp[0],  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  yTmp[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	17	None	replace
104	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	25	None	replace
105	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  4;  ++k)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  4;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  4;  ++k)  {	  for(int    k    =    0;    k    <    2;    ++k)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
106	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  stage,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  stage,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  stage,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	6	None	replace
107	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(x,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	49	None	replace
108	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(minReduction,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(minReduction,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(minReduction,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	49	None	replace
109	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	33	None	replace
110	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	4	None	replace
111	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
112	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
113	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(error,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(error,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(error,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(stepSize,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	53	None	replace
114	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  steps[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  steps[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  y,  steps[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	12	None	replace
115	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  y1,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  y1,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  y1,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	35	None	replace
116	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  steps[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  steps[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  steps[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	8	None	replace
117	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stage,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stage,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stage,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stage,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	45	None	replace
118	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepEnd,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	13	None	replace
119	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(next,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	48	None	replace
120	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(first,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(first,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(first,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(next,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	48	None	replace
121	[BUG]  [BUGGY]  for(int  k  =  1;  k  ==  0;  ++k)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  ==  0;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  ==  0;  ++k)  {	  for(int    k    =    1;    k    <    =    0;    ++k)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
122	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  true;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y[k]))  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
123	[BUG]  [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
124	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	29	None	replace
125	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	29	None	replace
126	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  y,  hNew[0],  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	43	None	replace
127	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(x,  getOrder(),  scale,  error,  y,  hNew[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	41	None	replace
128	[BUG]  [BUGGY]  if(filteredNextT!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  if(filteredNextT!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	if(filteredNextT!=  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(hNew))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
129	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(hNew))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
130	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  y1,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  y1,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  y1,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    errors,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	37	None	replace
131	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepStart,  y,  stage,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    y,    stage,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	24	None	replace
132	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	30	None	replace
133	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	30	None	replace
134	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  hNew,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	31	None	replace
135	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(stepSize,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(stepSize,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(stepSize,  getOrder(),  scale,  stepSize,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    stepSize,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	27	None	replace
136	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(stepSize,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(stepSize,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(stepSize,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	41	None	replace
137	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(stage,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(stage,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(stage,  getOrder(),  scale,  error,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(x,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	41	None	replace
138	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	if(hNew  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
139	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
140	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  hSize.length;  ++k)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  hSize.length;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  hSize.length;  ++k)  {	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
141	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(second,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(second,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(second,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(stepSize,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	53	None	replace
142	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	18	None	replace
143	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	31	None	replace
144	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
145	[BUG]  [BUGGY]  if(filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  if(filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	if(filteredNextT.equals(y0[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
146	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  errors,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    error,    y,    yDotK[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	17	None	replace
147	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  stepEnd,  y,  hNew[0],  yTmp,  yDotK[1]);	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepSize,    y,    hNew[0],    yTmp,    yDotK[1]);    	non-compiled	[CE]  ';'  expected	50	None	replace
148	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	25	None	replace
149	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(t,  getOrder(),  scale,  stepSize,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextIsLast    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	25	None	replace
150	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.equals(hNew))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.equals(hNew))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
151	[BUG]  [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [BUGGY]      for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextT  =  initializeStep(t,  getOrder(),  scale,  error,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;	  filteredNextT    =    initializeStep(t,    getOrder(),    scale,    stepStart,    hNew,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	30	None	replace
152	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  steps.length;  ++k)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  for(int  k  =  1;  k  <  steps.length;  ++k)  {  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	for(int  k  =  1;  k  <  steps.length;  ++k)  {	  for(int    k    =    1;    k    <    scale.length;    ++k)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
153	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	if(hNew  ==  null)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
154	[BUG]  [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextT.contains(y0[k]))  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    if(!filteredNextT.contains(y0[k]))    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
155	[BUG]  [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  }  stepSize  =  hNew;        [BUGGY]  filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]        for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	filteredNextIsLast  =  initializeStep(firstTime,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	  filteredNextIsLast    =    initializeStep(x,    getOrder(),    scale,    stepStart,    y,    yDotK[0],    yTmp,    yDotK[1]);    firstTime    =    false;    	non-compiled	[CE]  ';'  expected	49	None	replace
