bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  filteredNextIsLast  =  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextIsLast  =  null;  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextIsLast  =  null;	      filteredNextIsLast    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
2	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotK.length);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotK.length);	      int    stepStart    =    Math.min(error,    yDotTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
3	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  -  1);	      int    stepStart    =    Math.min(error,    yDotTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
4	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  +  1);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  +  1);	      int    stepStart    =    Math.min(error,    yDotTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
5	[BUG]  [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[0],  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[0],  error);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	double  firstTime  =  Math.min(error,  yDotK[0],  error);	      double    firstTime    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
6	[BUG]  [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[0],  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[0],  t);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	double  firstTime  =  Math.min(error,  yDotK[0],  t);	      double    firstTime    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
7	[BUG]  [BUGGY]  filteredNextIsLast  =  error  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextIsLast  =  error  +  1;  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextIsLast  =  error  +  1;	      filteredNextIsLast    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
8	[BUG]  [BUGGY]  filteredNextIsLast  =  error  +  nextIsLast;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextIsLast  =  error  +  nextIsLast;  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextIsLast  =  error  +  nextIsLast;	      filteredNextIsLast    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
9	[BUG]  [BUGGY]  filteredNextIsLast  =  error  +  stepStart;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextIsLast  =  error  +  stepStart;  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextIsLast  =  error  +  stepStart;	      filteredNextIsLast    =    error;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
10	[BUG]  [BUGGY]  filteredNextT  =  Math.min(stepStart,  error,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.min(stepStart,  error,  yDotK[0]);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.min(stepStart,  error,  yDotK[0]);	      filteredNextT    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
11	[BUG]  [BUGGY]  filteredNextT  =  Math.min(error,  y,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.min(error,  y,  yDotK[0]);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.min(error,  y,  yDotK[0]);	      filteredNextT    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
12	[BUG]  [BUGGY]  filteredNextT  =  Math.min(error,  yDotK[0],  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.min(error,  yDotK[0],  t);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.min(error,  yDotK[0],  t);	      filteredNextT    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
13	[BUG]  [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[0],  yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[0],  yDotK[1]);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	double  firstTime  =  Math.min(error,  yDotK[0],  yDotK[1]);	      double    firstTime    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
14	[BUG]  [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[1]  +  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[1]  +  error);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	double  firstTime  =  Math.min(error,  yDotK[1]  +  error);	      double    firstTime    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
15	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  yDotK[1]);	      int    stepStart    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
16	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1],  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1],  error);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotK[1],  error);	      int    stepStart    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
17	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  error);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  error);	      int    stepStart    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
18	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  t);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  t);	      int    stepStart    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
19	[BUG]  [BUGGY]  if(!filteredNextIsLast  &&!fsal)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if(!filteredNextIsLast  &&!fsal)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if(!filteredNextIsLast  &&!fsal)  {	  if(!filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
20	[BUG]  [BUGGY]  if(!filteredNextIsLast  ||!error)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if(!filteredNextIsLast  ||!error)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if(!filteredNextIsLast  ||!error)  {	  if(!filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
21	[BUG]  [BUGGY]  if(!filteredNextIsLast  ||!false)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if(!filteredNextIsLast  ||!false)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if(!filteredNextIsLast  ||!false)  {	  if(!filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
22	[BUG]  [BUGGY]  if(!filteredNextIsLast  ||!isLastStep)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if(!filteredNextIsLast  ||!isLastStep)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if(!filteredNextIsLast  ||!isLastStep)  {	  if(!filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
23	[BUG]  [BUGGY]  filteredNextT  =  Math.abs(error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.abs(error,  firstTime);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.abs(error,  firstTime);	      filteredNextT    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
24	[BUG]  [BUGGY]  filteredNextT  =  Math.abs(error,  secondTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.abs(error,  secondTime);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.abs(error,  secondTime);	      filteredNextT    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
25	[BUG]  [BUGGY]  filteredNextT  =  Math.abs(error  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.abs(error  +  1);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.abs(error  +  1);	      filteredNextT    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
26	[BUG]  [BUGGY]  if  (filteredNextIsLast  &&!fsal)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if  (filteredNextIsLast  &&!fsal)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if  (filteredNextIsLast  &&!fsal)  {	  if    (filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
27	[BUG]  [BUGGY]  if  (filteredNextIsLast  ||!error)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if  (filteredNextIsLast  ||!error)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if  (filteredNextIsLast  ||!error)  {	  if    (filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
28	[BUG]  [BUGGY]  if  (filteredNextIsLast  ||!false)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if  (filteredNextIsLast  ||!false)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if  (filteredNextIsLast  ||!false)  {	  if    (filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
29	[BUG]  [BUGGY]  if  (isLastStep  ||!fsal)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if  (isLastStep  ||!fsal)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if  (isLastStep  ||!fsal)  {	  if    (filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
30	[BUG]  [BUGGY]  if  (isLastStep  ||  filteredNextIsLast)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if  (isLastStep  ||  filteredNextIsLast)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if  (isLastStep  ||  filteredNextIsLast)  {	  if    (error    ||!filteredNextIsLast)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
31	[BUG]  [BUGGY]  if  (isLastStep  ||!filteredNextIsLast)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if  (isLastStep  ||!filteredNextIsLast)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if  (isLastStep  ||!filteredNextIsLast)  {	  if    (error    ||!filteredNextIsLast)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
32	[BUG]  [BUGGY]  if  (error  ||!filteredNextIsLast  &&  isLastStep)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if  (error  ||!filteredNextIsLast  &&  isLastStep)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if  (error  ||!filteredNextIsLast  &&  isLastStep)  {	  if    (error    ||!filteredNextIsLast)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
33	[BUG]  [BUGGY]  yDotK[0]  =  Math.min(yDotK[0],  error.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.min(yDotK[0],  error.length);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.min(yDotK[0],  error.length);	      yDotK[0]    =    Math.min(error,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
34	[BUG]  [BUGGY]  yDotK[0]  =  Math.min(yDotK,  error.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.min(yDotK,  error.length);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.min(yDotK,  error.length);	      yDotK[0]    =    Math.min(error,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
35	[BUG]  [BUGGY]  yDotK[0]  =  Math.min(y,  error.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.min(y,  error.length);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.min(y,  error.length);	      yDotK[0]    =    Math.min(error,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
36	[BUG]  [BUGGY]  yDotK[0]  =  Math.min(error,  yTmp.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.min(error,  yTmp.length  -  1);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.min(error,  yTmp.length  -  1);	      yDotK[0]    =    Math.min(error,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
37	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(error,  firstTime);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.abs(error,  firstTime);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.abs(error,  firstTime);	      yDotK[0]    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
38	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(error  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.abs(error  +  1);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.abs(error  +  1);	      yDotK[0]    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
39	[BUG]  [BUGGY]  yDotK[1]  =  Math.abs(error);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[1]  =  Math.abs(error);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[1]  =  Math.abs(error);	      yDotK[0]    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
40	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(error,  yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.abs(error,  yTmp);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.abs(error,  yTmp);	      yDotK[0]    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
41	[BUG]  [BUGGY]  if  (error  &&!fsal)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if  (error  &&!fsal)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if  (error  &&!fsal)  {	  if    (error    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
42	[BUG]  [BUGGY]  if  (isLastTime  &&!fsal)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if  (isLastTime  &&!fsal)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if  (isLastTime  &&!fsal)  {	  if    (error    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
43	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(error,  yTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.abs(error,  yTolerance);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.abs(error,  yTolerance);	      yDotK[0]    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
44	[BUG]  [BUGGY]  if(!isLastStep  ||!filteredNextIsLast)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if(!isLastStep  ||!filteredNextIsLast)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if(!isLastStep  ||!filteredNextIsLast)  {	  if(!filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
45	[BUG]  [BUGGY]  if(!filteredNextIsLast  ||!fsal  &&  isLastStep)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if(!filteredNextIsLast  ||!fsal  &&  isLastStep)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if(!filteredNextIsLast  ||!fsal  &&  isLastStep)  {	  if(!filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
46	[BUG]  [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[1]  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[1]  -  error);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	double  firstTime  =  Math.min(error,  yDotK[1]  -  error);	      double    firstTime    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
47	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  -  error);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  -  error);	      int    stepStart    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
48	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[1]  +  error);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotK[1]  +  error);	      int    stepStart    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
49	[BUG]  [BUGGY]  filteredNextT  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);	      filteredNextT    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
50	[BUG]  [BUGGY]  filteredNextT  =  Math.min(error,  yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.min(error,  yDotK[1]);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.min(error,  yDotK[1]);	      filteredNextT    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
51	[BUG]  [BUGGY]  filteredNextT  =  Math.min(error,  yDotK[0],  scale);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.min(error,  yDotK[0],  scale);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.min(error,  yDotK[0],  scale);	      filteredNextT    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
52	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);	      int    stepStart    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
53	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0]  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0]  -  error);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotK[0]  -  error);	      int    stepStart    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
54	[BUG]  [BUGGY]  yDotK[0]  =  Math.min(error,  yTmp.length  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.min(error,  yTmp.length  -  2);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.min(error,  yTmp.length  -  2);	      yDotK[0]    =    Math.min(error,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
55	[BUG]  [BUGGY]  yDotK[0]  =  Math.min(error,  yTmp.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.min(error,  yTmp.length  +  1);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.min(error,  yTmp.length  +  1);	      yDotK[0]    =    Math.min(error,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
56	[BUG]  [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	double  firstTime  =  Math.min(error,  yDotK[0],  vecAbsoluteTolerance);	      double    firstTime    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
57	[BUG]  [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[0]  -  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  double  firstTime  =  Math.min(error,  yDotK[0]  -  error);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	double  firstTime  =  Math.min(error,  yDotK[0]  -  error);	      double    firstTime    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
58	[BUG]  [BUGGY]  if  (error  &&!filteredNextIsLast)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if  (error  &&!filteredNextIsLast)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if  (error  &&!filteredNextIsLast)  {	  if    (error    ||!filteredNextIsLast)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
59	[BUG]  [BUGGY]  filteredNextT  =  Math.abs(error,  nextIsLast);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.abs(error,  nextIsLast);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.abs(error,  nextIsLast);	      filteredNextT    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
60	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotK[0],  yDotTmp.length);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotK[0],  yDotTmp.length);	      int    stepStart    =    Math.min(error,    yDotTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
61	[BUG]  [BUGGY]  if(!isLastStep  ||!fsal)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if(!isLastStep  ||!fsal)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if(!isLastStep  ||!fsal)  {	  if(!filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
62	[BUG]  [BUGGY]  if(filteredNextIsLast  ||!isLastStep)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if(filteredNextIsLast  ||!isLastStep)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if(filteredNextIsLast  ||!isLastStep)  {	  if    (filteredNextIsLast    ||!fsal)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
63	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if(!filteredNextIsLast)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if(!filteredNextIsLast)  {	  if    (error    ||!filteredNextIsLast)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
64	[BUG]  [BUGGY]  if(isLastStep)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  if(isLastStep)  {  [BUGGY]      computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	if(isLastStep)  {	  if    (error    ||!filteredNextIsLast)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
65	[BUG]  [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  int  stepStart  =  Math.min(error,  yDotTmp.length  -  2);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	int  stepStart  =  Math.min(error,  yDotTmp.length  -  2);	      int    stepStart    =    Math.min(error,    yDotTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
66	[BUG]  [BUGGY]  double  firstTime  =  Math.min(relativeTolerance,  yDotK[0]);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  double  firstTime  =  Math.min(relativeTolerance,  yDotK[0]);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	double  firstTime  =  Math.min(relativeTolerance,  yDotK[0]);	      double    firstTime    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
67	[BUG]  [BUGGY]  yDotK[0]  =  Math.min(x,  yTmp.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.min(x,  yTmp.length);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.min(x,  yTmp.length);	      yDotK[0]    =    Math.min(error,    yTmp.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
68	[BUG]  [BUGGY]  filteredNextT  =  Math.min(error,  yDotK[0],  tmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.min(error,  yDotK[0],  tmp);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.min(error,  yDotK[0],  tmp);	      filteredNextT    =    Math.min(error,    yDotK[0]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
69	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(yTmp);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.abs(yTmp);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.abs(yTmp);	      yDotK[0]    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
70	[BUG]  [BUGGY]  yDotK[0]  =  Math.abs(error,  isLastStep);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  yDotK[0]  =  Math.abs(error,  isLastStep);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	yDotK[0]  =  Math.abs(error,  isLastStep);	      yDotK[0]    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
71	[BUG]  [BUGGY]  double  firstTime  =  Math.min(relativeTolerance,  yDotK[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  double  firstTime  =  Math.min(relativeTolerance,  yDotK[1]);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	double  firstTime  =  Math.min(relativeTolerance,  yDotK[1]);	      double    firstTime    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
72	[BUG]  [BUGGY]  double  firstTime  =  Math.min(yDotK,  error[1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  double  firstTime  =  Math.min(yDotK,  error[1]);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	double  firstTime  =  Math.min(yDotK,  error[1]);	      double    firstTime    =    Math.min(error,    yDotK[1]);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
73	[BUG]  [BUGGY]  filteredNextT  =  Math.abs(error,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.abs(error,  t);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.abs(error,  t);	      filteredNextT    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
74	[BUG]  [BUGGY]  filteredNextT  =  Math.abs(error,  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]      isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;  while  (error  >=  1.0)  {    [BUGGY]  filteredNextT  =  Math.abs(error,  stepStart);  [BUGGY]    if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	filteredNextT  =  Math.abs(error,  stepStart);	      filteredNextT    =    Math.abs(error);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
