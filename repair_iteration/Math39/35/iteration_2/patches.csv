bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(j  <  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
2	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
3	[BUG]  [BUGGY]  if(j  ==  0)  {  if(j  >  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  0)  {  if(j  >  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  0)  {  if(j  >  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
4	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  +  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  +  1;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  +  1;	  yTmp[j]    =    y[j]    +    sum    +    error;    	non-compiled	[CE]  ';'  expected	12	None	replace
5	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  sum  +  error;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  sum  +  error;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  sum  +  error;	  yTmp[j]    =    y[j]    +    sum    +    error;    	non-compiled	[CE]  ';'  expected	12	None	replace
6	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  +  2;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  +  2;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  +  2;	  yTmp[j]    =    y[j]    +    sum    +    error;    	non-compiled	[CE]  ';'  expected	12	None	replace
7	[BUG]  [BUGGY]  if(j  <  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	65	None	replace
8	[BUG]  [BUGGY]  int  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  int  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	int  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  int    stepSize    =    b[hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	96	None	replace
9	[BUG]  [BUGGY]  boolean  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  int    stepSize    =    b[hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	96	None	replace
10	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
11	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[1]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
12	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  stepStart  *  yDotK[l];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  stepStart  *  yDotK[l];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  stepStart  *  yDotK[l];	  yTmp[j]    =    sum[j]    +    stepStart    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	50	None	replace
13	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  stepStart  *  yDotK[k];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  stepStart  *  yDotK[k];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  stepStart  *  yDotK[k];	  yTmp[j]    =    sum[j]    +    stepStart    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	50	None	replace
14	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  stepStart  *  sum;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  stepStart  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  stepStart  *  sum;	  yTmp[j]    =    sum[j]    +    stepStart    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	50	None	replace
15	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  hNew;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  hNew;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepSize  *  hNew;	  yTmp[j]    =    sum    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	45	None	replace
16	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  t;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  t;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepSize  *  t;	  yTmp[j]    =    sum    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	45	None	replace
17	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepStart  *  y0;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepStart  *  y0;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepStart  *  y0;	  yTmp[j]    =    sum    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	45	None	replace
18	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  k;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  k;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepSize  *  k;	  yTmp[j]    =    sum    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	45	None	replace
19	[BUG]  [BUGGY]  Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	85	None	replace
20	[BUG]  [BUGGY]  Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	85	None	replace
21	[BUG]  [BUGGY]  Integer  stepSize  =  a[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  a[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  a[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	85	None	replace
22	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    a[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	11	None	replace
23	[BUG]  [BUGGY]  if(j  <  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    a[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	11	None	replace
24	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    a[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	11	None	replace
25	[BUG]  [BUGGY]  int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  int    stepSize    =    y0.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	6	None	replace
26	[BUG]  [BUGGY]  boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  int    stepSize    =    y0.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	6	None	replace
27	[BUG]  [BUGGY]  int  stepSize  =  hNew;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  int  stepSize  =  hNew;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	int  stepSize  =  hNew;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  int    stepSize    =    y0.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	52	None	replace
28	[BUG]  [BUGGY]  boolean  stepSize  =  y0.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  y0.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  y0.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  int    stepSize    =    y0.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	52	None	replace
29	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepStart  *  yDotK[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepStart  *  yDotK[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepStart  *  yDotK[0];	  yTmp[j]    =    sum    +    stepSize    *    yDotK[0];    	non-compiled	[CE]  ';'  expected	36	None	replace
30	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  yDotK[1];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  yDotK[1];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepSize  *  yDotK[1];	  yTmp[j]    =    sum    +    stepSize    *    yDotK[0];    	non-compiled	[CE]  ';'  expected	36	None	replace
31	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  hNew[0];  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  hNew[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepSize  *  hNew[0];	  yTmp[j]    =    sum    +    stepSize    *    yDotK[0];    	non-compiled	[CE]  ';'  expected	36	None	replace
32	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
33	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
34	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
35	[BUG]  [BUGGY]  if(j!=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j!=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j!=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	72	None	replace
36	[BUG]  [BUGGY]  double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	103	None	replace
37	[BUG]  [BUGGY]  if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	105	None	replace
38	[BUG]  [BUGGY]  boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	105	None	replace
39	[BUG]  [BUGGY]  boolean  stepSize  =  yTmp.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  yTmp.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  yTmp.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	105	None	replace
40	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	7	None	replace
41	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	7	None	replace
42	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	7	None	replace
43	[BUG]  [BUGGY]  int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	7	None	replace
44	[BUG]  [BUGGY]  Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	60	None	replace
45	[BUG]  [BUGGY]  Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	60	None	replace
46	[BUG]  [BUGGY]  Integer  stepSize  =  b[1][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b[1][0]  *  yDotK[0][j];  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b[1][0]  *  yDotK[0][j];	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	60	None	replace
47	[BUG]  [BUGGY]  int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  int    stepSize    =    b.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	57	None	replace
48	[BUG]  [BUGGY]  boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  int    stepSize    =    b.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	57	None	replace
49	[BUG]  [BUGGY]  if(j  ==  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	87	None	replace
50	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	16	None	replace
51	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	16	None	replace
52	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	16	None	replace
53	[BUG]  [BUGGY]  if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	102	None	replace
54	[BUG]  [BUGGY]  boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	102	None	replace
55	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	26	None	replace
56	[BUG]  [BUGGY]  for(int  k  =  1;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	26	None	replace
57	[BUG]  [BUGGY]  Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	81	None	replace
58	[BUG]  [BUGGY]  Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	81	None	replace
59	[BUG]  [BUGGY]  Integer  stepSize  =  b[0][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b[0][0]  *  yDotK[0][j];  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b[0][0]  *  yDotK[0][j];	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	81	None	replace
60	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  yDotK[l];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  yDotK[l];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  error  *  yDotK[l];	  yTmp[j]    =    sum[j]    +    error    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
61	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  error  *  yDotK[j];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  error  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  error  *  yDotK[j];	  yTmp[j]    =    sum[j]    +    error    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
62	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  yDotK[k];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  yDotK[k];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  error  *  yDotK[k];	  yTmp[j]    =    sum[j]    +    error    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
63	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  yDotK[0];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  yDotK[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  error  *  yDotK[0];	  yTmp[j]    =    sum[j]    +    error    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
64	[BUG]  [BUGGY]  boolean  stepSize  =  b.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  b.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  b.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  int    stepSize    =    b.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	53	None	replace
65	[BUG]  [BUGGY]  double  stepSize  =  b.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  int    stepSize    =    b.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	53	None	replace
66	[BUG]  [BUGGY]  if(j  >  0)  {  if(j  >=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >  0)  {  if(j  >=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >  0)  {  if(j  >=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    >=    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	69	None	replace
67	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  t;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  t;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  error  *  t;	  yTmp[j]    =    sum[j]    +    error    *    y0;    	non-compiled	[CE]  ';'  expected	88	None	replace
68	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  l;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  l;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  error  *  l;	  yTmp[j]    =    sum[j]    +    error    *    y0;    	non-compiled	[CE]  ';'  expected	88	None	replace
69	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  hNew;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  hNew;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  error  *  hNew;	  yTmp[j]    =    sum[j]    +    error    *    y0;    	non-compiled	[CE]  ';'  expected	88	None	replace
70	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  error  *  y0[j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  error  *  y0[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  error  *  y0[j];	  yTmp[j]    =    y0[j]    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	78	None	replace
71	[BUG]  [BUGGY]  yTmp[j]  =  t[j]  +  sum  *  yDotK[j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  t[j]  +  sum  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  t[j]  +  sum  *  yDotK[j];	  yTmp[j]    =    t[j]    +    stepSize    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	104	None	replace
72	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  stepSize  *  yDotK[j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  stepSize  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  stepSize  *  yDotK[j];	  yTmp[j]    =    t[j]    +    stepSize    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	104	None	replace
73	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  yDotK[j];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepSize  *  yDotK[j];	  yTmp[j]    =    t[j]    +    stepSize    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	104	None	replace
74	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
75	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
76	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
77	[BUG]  [BUGGY]  if(j  >  0)  {  if(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >  0)  {  if(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >  0)  {  if(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	107	None	replace
78	[BUG]  [BUGGY]  while(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  while(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	while(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	107	None	replace
79	[BUG]  [BUGGY]  if(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	107	None	replace
80	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  y0[0];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  y0[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepSize  *  y0[0];	  yTmp[j]    =    sum    +    stepSize    *    y[0];    	non-compiled	[CE]  ';'  expected	35	None	replace
81	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepStart  *  y[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepStart  *  y[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepStart  *  y[0];	  yTmp[j]    =    sum    +    stepSize    *    y[0];    	non-compiled	[CE]  ';'  expected	35	None	replace
82	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  hNew;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  hNew;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  stepSize  *  hNew;	  yTmp[j]    =    sum[j]    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	77	None	replace
83	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  t;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  t;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  stepSize  *  t;	  yTmp[j]    =    sum[j]    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	77	None	replace
84	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  k;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  k;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  stepSize  *  k;	  yTmp[j]    =    sum[j]    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	77	None	replace
85	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  l;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  l;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  stepSize  *  l;	  yTmp[j]    =    sum[j]    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	77	None	replace
86	[BUG]  [BUGGY]  double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	99	None	replace
87	[BUG]  [BUGGY]  int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  int    stepSize    =    a.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
88	[BUG]  [BUGGY]  boolean  stepSize  =  a.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  a.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  a.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  int    stepSize    =    a.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
89	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  int    stepSize    =    a.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
90	[BUG]  [BUGGY]  if(j  ==  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
91	[BUG]  [BUGGY]  boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  int    stepSize    =    b.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
92	[BUG]  [BUGGY]  double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  int    stepSize    =    b.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
93	[BUG]  [BUGGY]  yTmp[j]  =  error[j]  *  yDotK[j];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  error[j]  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  error[j]  *  yDotK[j];	  yTmp[j]    =    sum    +    error[j]    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	14	None	replace
94	[BUG]  [BUGGY]  yTmp[j]  =  error  +  sum[j]  *  yDotK[j];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  error  +  sum[j]  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  error  +  sum[j]  *  yDotK[j];	  yTmp[j]    =    sum    +    error[j]    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	14	None	replace
95	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  error[j]  *  yDotK[l];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  error[j]  *  yDotK[l];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  error[j]  *  yDotK[l];	  yTmp[j]    =    sum    +    error[j]    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	14	None	replace
96	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  error[j]  *  yDotK[0];  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  error[j]  *  yDotK[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  error[j]  *  yDotK[0];	  yTmp[j]    =    sum    +    error[j]    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	14	None	replace
97	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  yDotK[j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  sum  *  yDotK[j];	  yTmp[j]    =    y0[j]    +    stepSize    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	66	None	replace
98	[BUG]  [BUGGY]  yTmp[j]  =  y1[j]  +  stepSize  *  yDotK[j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y1[j]  +  stepSize  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y1[j]  +  stepSize  *  yDotK[j];	  yTmp[j]    =    y0[j]    +    stepSize    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	66	None	replace
99	[BUG]  [BUGGY]  if(j  ==  k)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  k)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  k)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
100	[BUG]  [BUGGY]  if(j  <  k)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  k)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  k)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
101	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  y0[j]  *  stepSize;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  y0[j]  *  stepSize;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  y0[j]  *  stepSize;	  yTmp[j]    =    y0[j]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	22	None	replace
102	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  hNew;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  hNew;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  sum  *  hNew;	  yTmp[j]    =    y0[j]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	22	None	replace
103	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  k;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  k;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  sum  *  k;	  yTmp[j]    =    y0[j]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	22	None	replace
104	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  1;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  1;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  sum  *  1;	  yTmp[j]    =    y0[j]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	22	None	replace
105	[BUG]  [BUGGY]  yTmp[j]  =  y[0]  +  sum  *  hNew;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[0]  +  sum  *  hNew;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[0]  +  sum  *  hNew;	  yTmp[j]    =    y[0]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	34	None	replace
106	[BUG]  [BUGGY]  yTmp[j]  =  y0[0]  +  sum  *  hNew;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[0]  +  sum  *  hNew;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[0]  +  sum  *  hNew;	  yTmp[j]    =    y[0]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	34	None	replace
107	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  y[0]  *  stepSize;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  y[0]  *  stepSize;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  y[0]  *  stepSize;	  yTmp[j]    =    y[0]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	34	None	replace
108	[BUG]  [BUGGY]  yTmp[j]  =  y0[0]  +  sum  *  k;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[0]  +  sum  *  k;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[0]  +  sum  *  k;	  yTmp[j]    =    y[0]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	34	None	replace
109	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepStart  *  y0[j];  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepStart  *  y0[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepStart  *  y0[j];	  yTmp[j]    =    sum    +    stepSize    *    y0[j];    	non-compiled	[CE]  ';'  expected	44	None	replace
110	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  y0[l];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  y0[l];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepSize  *  y0[l];	  yTmp[j]    =    sum    +    stepSize    *    y0[j];    	non-compiled	[CE]  ';'  expected	44	None	replace
111	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	48	None	replace
112	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	48	None	replace
113	[BUG]  [BUGGY]  if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	100	None	replace
114	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  /  2;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  /  2;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  /  2;	  yTmp[j]    =    y[j]    +    sum    *    2;    	non-compiled	[CE]  ';'  expected	21	None	replace
115	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  y[j]  *  2;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  y[j]  *  2;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  y[j]  *  2;	  yTmp[j]    =    y[j]    +    sum    *    2;    	non-compiled	[CE]  ';'  expected	21	None	replace
116	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum;	  yTmp[j]    =    y[j]    +    sum    *    2;    	non-compiled	[CE]  ';'  expected	21	None	replace
117	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	27	None	replace
118	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	27	None	replace
119	[BUG]  [BUGGY]  for(int  j  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	27	None	replace
120	[BUG]  [BUGGY]  if(j  <  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	10	None	replace
121	[BUG]  [BUGGY]  if(j  <  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	10	None	replace
122	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
123	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
124	[BUG]  [BUGGY]  boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  int    stepSize    =    y0.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	58	None	replace
125	[BUG]  [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	86	None	replace
126	[BUG]  [BUGGY]  yTmp[j]  =  y[1]  +  sum  *  stepSize;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[1]  +  sum  *  stepSize;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[1]  +  sum  *  stepSize;	  yTmp[j]    =    y[1]    +    stepSize    *    sum;    	non-compiled	[CE]  ';'  expected	84	None	replace
127	[BUG]  [BUGGY]  yTmp[j]  =  y0[1]  +  stepSize  *  sum;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[1]  +  stepSize  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[1]  +  stepSize  *  sum;	  yTmp[j]    =    y[1]    +    stepSize    *    sum;    	non-compiled	[CE]  ';'  expected	84	None	replace
128	[BUG]  [BUGGY]  yTmp[j]  =  sum[1]  +  stepSize  *  yDotK[l];  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[1]  +  stepSize  *  yDotK[l];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[1]  +  stepSize  *  yDotK[l];	  yTmp[j]    =    y[1]    +    stepSize    *    sum;    	non-compiled	[CE]  ';'  expected	84	None	replace
129	[BUG]  [BUGGY]  Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	61	None	replace
130	[BUG]  [BUGGY]  Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	61	None	replace
131	[BUG]  [BUGGY]  Integer  stepSize  =  b[0][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b[0][0]  *  yDotK[1][j];  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b[0][0]  *  yDotK[1][j];	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	61	None	replace
132	[BUG]  [BUGGY]  if(j  ==  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	79	None	replace
133	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  stepSize  *  yDotK[k];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  stepSize  *  yDotK[k];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  stepSize  *  yDotK[k];	  yTmp[j]    =    sum[j]    +    stepSize    *    yDotK[k];    	non-compiled	[CE]  ';'  expected	51	None	replace
134	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
135	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
136	[BUG]  [BUGGY]  if(j  >  0)  {  if(j  ==  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >  0)  {  if(j  ==  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >  0)  {  if(j  ==  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	68	None	replace
137	[BUG]  [BUGGY]  if(j  <  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	25	None	replace
138	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	25	None	replace
139	[BUG]  [BUGGY]  if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	25	None	replace
140	[BUG]  [BUGGY]  if(j  >  0)  {  if(j  <  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >  0)  {  if(j  <  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >  0)  {  if(j  <  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	97	None	replace
141	[BUG]  [BUGGY]  int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	int  stepSize  =  hNew;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  int    stepSize    =    b.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	46	None	replace
142	[BUG]  [BUGGY]  boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  int    stepSize    =    b.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	46	None	replace
143	[BUG]  [BUGGY]  double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  int    stepSize    =    b.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	46	None	replace
144	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  y[j]  *  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  y[j]  *  1;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  y[j]  *  1;	  yTmp[j]    =    y[j]    +    sum    *    1;    	non-compiled	[CE]  ';'  expected	20	None	replace
145	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  /  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  /  1;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  /  1;	  yTmp[j]    =    y[j]    +    sum    *    1;    	non-compiled	[CE]  ';'  expected	20	None	replace
146	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  stepSize  *  yDotK[l];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  stepSize  *  yDotK[l];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  stepSize  *  yDotK[l];	  yTmp[j]    =    sum[j]    +    stepSize    *    yDotK[l];    	non-compiled	[CE]  ';'  expected	49	None	replace
147	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  y0[0]  *  stepSize;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  y0[0]  *  stepSize;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  y0[0]  *  stepSize;	  yTmp[j]    =    y0[0]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	82	None	replace
148	[BUG]  [BUGGY]  yTmp[j]  =  y0[0]  +  sum  *  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[0]  +  sum  *  1;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[0]  +  sum  *  1;	  yTmp[j]    =    y0[0]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	82	None	replace
149	[BUG]  [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	73	None	replace
150	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	24	None	replace
151	[BUG]  [BUGGY]  if(j  >  0)  {  if(j  ==  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >  0)  {  if(j  ==  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >  0)  {  if(j  ==  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	70	None	replace
152	[BUG]  [BUGGY]  if(k  ==  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(k  ==  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(k  ==  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(k    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	108	None	replace
153	[BUG]  [BUGGY]  if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	94	None	replace
154	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    a[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	30	None	replace
155	[BUG]  [BUGGY]  if(j  <  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    a[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	30	None	replace
156	[BUG]  [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    a[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	30	None	replace
157	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  sum;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  sum  *  sum;	  yTmp[j]    =    y[j]    +    sum    *    sum;    	non-compiled	[CE]  ';'  expected	92	None	replace
158	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  yDotK[j]  *  sum;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  yDotK[j]  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  yDotK[j]  *  sum;	  yTmp[j]    =    y[j]    +    sum    *    sum;    	non-compiled	[CE]  ';'  expected	92	None	replace
159	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  t;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  t;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  *  t;	  yTmp[j]    =    y[j]    +    sum    *    sum;    	non-compiled	[CE]  ';'  expected	92	None	replace
160	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  y[j]  *  sum;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  y[j]  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  y[j]  *  sum;	  yTmp[j]    =    y[j]    +    sum    *    sum;    	non-compiled	[CE]  ';'  expected	92	None	replace
161	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  y[j]  *  3;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  y[j]  *  3;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  y[j]  *  3;	  yTmp[j]    =    y[j]    +    sum    *    3;    	non-compiled	[CE]  ';'  expected	75	None	replace
162	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  /  3;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  /  3;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  /  3;	  yTmp[j]    =    y[j]    +    sum    *    3;    	non-compiled	[CE]  ';'  expected	75	None	replace
163	[BUG]  [BUGGY]  if(j  >  0)  {  if(j  >=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >  0)  {  if(j  >=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >  0)  {  if(j  >=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    >=    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	71	None	replace
164	[BUG]  [BUGGY]  boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  int    stepSize    =    b.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
165	[BUG]  [BUGGY]  double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  int    stepSize    =    b.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
166	[BUG]  [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
167	[BUG]  [BUGGY]  if(j  >  0)  {  if(j  <  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >  0)  {  if(j  <  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >  0)  {  if(j  <  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	90	None	replace
168	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  error  *  yDotK[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  error  *  yDotK[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  error  *  yDotK[0];	  yTmp[j]    =    y[0]    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	89	None	replace
169	[BUG]  [BUGGY]  yTmp[j]  =  y0[0]  +  error  *  sum;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[0]  +  error  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[0]  +  error  *  sum;	  yTmp[j]    =    y[0]    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	89	None	replace
170	[BUG]  [BUGGY]  yTmp[j]  =  y[0]  +  sum  +  error;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[0]  +  sum  +  error;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[0]  +  sum  +  error;	  yTmp[j]    =    y[0]    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	89	None	replace
171	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  1  *  y0[j];  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  1  *  y0[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  1  *  y0[j];	  yTmp[j]    =    y0[j]    +    1    *    sum;    	non-compiled	[CE]  ';'  expected	91	None	replace
172	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  1  *  yDotK[j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  1  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  1  *  yDotK[j];	  yTmp[j]    =    y0[j]    +    1    *    sum;    	non-compiled	[CE]  ';'  expected	91	None	replace
173	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  1;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  1;	  yTmp[j]    =    y0[j]    +    1    *    sum;    	non-compiled	[CE]  ';'  expected	91	None	replace
174	[BUG]  [BUGGY]  double  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[1][0]  *  yDotK[0][j];  }	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	95	None	replace
175	[BUG]  [BUGGY]  double  stepSize  =  y0.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  y0.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  y0.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  double    stepSize    =    hNew.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	101	None	replace
176	[BUG]  [BUGGY]  if(j  <  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	43	None	replace
177	[BUG]  [BUGGY]  if(j  <  0)  {  if(sum  >  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  if(sum  >  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  if(sum  >  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	43	None	replace
178	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  stepSize  *  hNew[j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  stepSize  *  hNew[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  stepSize  *  hNew[j];	  yTmp[j]    =    hNew[j]    +    stepSize    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	67	None	replace
179	[BUG]  [BUGGY]  yTmp[j]  =  hNew[j]  +  sum  *  yDotK[j];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  hNew[j]  +  sum  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  hNew[j]  +  sum  *  yDotK[j];	  yTmp[j]    =    hNew[j]    +    stepSize    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	67	None	replace
180	[BUG]  [BUGGY]  yTmp[j]  =  yDotK[j]  +  stepSize  *  hNew[j];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  yDotK[j]  +  stepSize  *  hNew[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  yDotK[j]  +  stepSize  *  hNew[j];	  yTmp[j]    =    hNew[j]    +    stepSize    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	67	None	replace
181	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  l;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  l;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  *  l;	  yTmp[j]    =    y[j]    +    sum    *    hNew;    	non-compiled	[CE]  ';'  expected	19	None	replace
182	[BUG]  [BUGGY]  Integer  stepSize  =  y0.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  y0.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  y0.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	76	None	replace
183	[BUG]  [BUGGY]  Integer  stepSize  =  b.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	76	None	replace
184	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	59	None	replace
185	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	59	None	replace
186	[BUG]  [BUGGY]  int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	59	None	replace
187	[BUG]  [BUGGY]  if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(hNew!=  null)  {  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	98	None	replace
188	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  sum  +  error  *  sum;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  sum  +  error  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  sum  +  error  *  sum;	  yTmp[j]    =    y[j]    +    sum    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	93	None	replace
189	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  +  error  *  t;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  +  error  *  t;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  +  error  *  t;	  yTmp[j]    =    y[j]    +    sum    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	93	None	replace
190	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  +  error  *  k;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  +  error  *  k;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  +  error  *  k;	  yTmp[j]    =    y[j]    +    sum    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	93	None	replace
191	[BUG]  [BUGGY]  if(j!=  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j!=  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j!=  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	64	None	replace
192	[BUG]  [BUGGY]  if(j  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    a[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	11	None	replace
193	[BUG]  [BUGGY]  if(j  >=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0][0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    a[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	11	None	replace
194	[BUG]  [BUGGY]  if(j  ==  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	18	None	replace
195	[BUG]  [BUGGY]  if(j  >=  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	18	None	replace
196	[BUG]  [BUGGY]  if(j  >=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	74	None	replace
197	[BUG]  [BUGGY]  if(j!=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j!=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j!=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	74	None	replace
198	[BUG]  [BUGGY]  if(j  >=  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	42	None	replace
199	[BUG]  [BUGGY]  if(j  >=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	37	None	replace
200	[BUG]  [BUGGY]  yTmp[j]  =  y0[0]  +  sum  *  2;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[0]  +  sum  *  2;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[0]  +  sum  *  2;	  yTmp[j]    =    y0[0]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	82	None	replace
201	[BUG]  [BUGGY]  if(j!=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j!=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j!=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	70	None	replace
202	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  error;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  error;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  error;	  yTmp[j]    =    y[j]    +    sum    +    error;    	non-compiled	[CE]  ';'  expected	12	None	replace
203	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  1  *  y0;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  1  *  y0;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  1  *  y0;	  yTmp[j]    =    y0[j]    +    1    *    sum;    	non-compiled	[CE]  ';'  expected	91	None	replace
204	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  1  *  y0;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  1  *  y0;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  1  *  y0;	  yTmp[j]    =    y0[j]    +    1    *    sum;    	non-compiled	[CE]  ';'  expected	91	None	replace
205	[BUG]  [BUGGY]  int  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  int  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	int  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[1][0]  *  yDotK[0][j];  }	  int    stepSize    =    b[hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	96	None	replace
206	[BUG]  [BUGGY]  double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  int    stepSize    =    y0.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	6	None	replace
207	[BUG]  [BUGGY]  if(j  ==  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
208	[BUG]  [BUGGY]  if(j  >=  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
209	[BUG]  [BUGGY]  yTmp[j]  =  hNew  +  stepSize  *  y[0];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  hNew  +  stepSize  *  y[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  hNew  +  stepSize  *  y[0];	  yTmp[j]    =    sum    +    stepSize    *    y[0];    	non-compiled	[CE]  ';'  expected	35	None	replace
210	[BUG]  [BUGGY]  yTmp[j]  =  error  +  stepSize  *  y[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  error  +  stepSize  *  y[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  error  +  stepSize  *  y[0];	  yTmp[j]    =    sum    +    stepSize    *    y[0];    	non-compiled	[CE]  ';'  expected	35	None	replace
211	[BUG]  [BUGGY]  yTmp[j]  =  t  +  stepSize  *  y[0];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  t  +  stepSize  *  y[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  t  +  stepSize  *  y[0];	  yTmp[j]    =    sum    +    stepSize    *    y[0];    	non-compiled	[CE]  ';'  expected	35	None	replace
212	[BUG]  [BUGGY]  if(j  >=  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	65	None	replace
213	[BUG]  [BUGGY]  double  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	105	None	replace
214	[BUG]  [BUGGY]  if(j  ==  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    <    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
215	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[1]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	27	None	replace
216	[BUG]  [BUGGY]  double  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	95	None	replace
217	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
218	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	38	None	replace
219	[BUG]  [BUGGY]  double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	99	None	replace
220	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  factor;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  factor;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  error  *  factor;	  yTmp[j]    =    sum[j]    +    error    *    y0;    	non-compiled	[CE]  ';'  expected	88	None	replace
221	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  3;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  3;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  error  *  3;	  yTmp[j]    =    sum[j]    +    error    *    y0;    	non-compiled	[CE]  ';'  expected	88	None	replace
222	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  2;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  2;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  error  *  2;	  yTmp[j]    =    sum[j]    +    error    *    y0;    	non-compiled	[CE]  ';'  expected	88	None	replace
223	[BUG]  [BUGGY]  if(j  <  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	3	None	replace
224	[BUG]  [BUGGY]  if(j  ==  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	43	None	replace
225	[BUG]  [BUGGY]  if(j  >=  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	43	None	replace
226	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  4;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  4;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  *  4;	  yTmp[j]    =    y[j]    +    sum    *    3;    	non-compiled	[CE]  ';'  expected	75	None	replace
227	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  yDotK[j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  *  yDotK[j];	  yTmp[j]    =    t[j]    +    stepSize    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	104	None	replace
228	[BUG]  [BUGGY]  yTmp[j]  =  y[1]  +  error  *  sum;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[1]  +  error  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[1]  +  error  *  sum;	  yTmp[j]    =    y[1]    +    stepSize    *    sum;    	non-compiled	[CE]  ';'  expected	84	None	replace
229	[BUG]  [BUGGY]  yTmp[j]  =  error  +  stepSize  *  y0[j];  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  error  +  stepSize  *  y0[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  error  +  stepSize  *  y0[j];	  yTmp[j]    =    sum    +    stepSize    *    y0[j];    	non-compiled	[CE]  ';'  expected	44	None	replace
230	[BUG]  [BUGGY]  yTmp[j]  =  hNew  +  stepSize  *  y0[j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  hNew  +  stepSize  *  y0[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  hNew  +  stepSize  *  y0[j];	  yTmp[j]    =    sum    +    stepSize    *    y0[j];    	non-compiled	[CE]  ';'  expected	44	None	replace
231	[BUG]  [BUGGY]  yTmp[j]  =  error  *  y0[j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  error  *  y0[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  error  *  y0[j];	  yTmp[j]    =    sum    +    stepSize    *    y0[j];    	non-compiled	[CE]  ';'  expected	44	None	replace
232	[BUG]  [BUGGY]  yTmp[j]  =  error  +  stepSize  *  y0;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  error  +  stepSize  *  y0;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  error  +  stepSize  *  y0;	  yTmp[j]    =    sum    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	45	None	replace
233	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  error  *  y0;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  error  *  y0;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  error  *  y0;	  yTmp[j]    =    y[0]    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	89	None	replace
234	[BUG]  [BUGGY]  yTmp[j]  =  error  +  sum  *  yDotK[j];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  error  +  sum  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  error  +  sum  *  yDotK[j];	  yTmp[j]    =    sum    +    error[j]    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	14	None	replace
235	[BUG]  [BUGGY]  yTmp[j]  =  error  +  b[j]  *  yDotK[j];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  error  +  b[j]  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  error  +  b[j]  *  yDotK[j];	  yTmp[j]    =    sum    +    error[j]    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	14	None	replace
236	[BUG]  [BUGGY]  yTmp[j]  =  error  +  a[j]  *  yDotK[j];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  error  +  a[j]  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  error  +  a[j]  *  yDotK[j];	  yTmp[j]    =    sum    +    error[j]    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	14	None	replace
237	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  2;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  2;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  sum  *  2;	  yTmp[j]    =    y0[j]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	22	None	replace
238	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y1;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  y1;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  y1;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	7	None	replace
239	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  1;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	7	None	replace
240	[BUG]  [BUGGY]  if(k  >  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(k  >  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(k  >  0)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(k    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	108	None	replace
241	[BUG]  [BUGGY]  if(j  <  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	48	None	replace
242	[BUG]  [BUGGY]  if(j  >=  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  for(int  k  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
243	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  yDotK[k-1];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  yDotK[k-1];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  stepSize  *  yDotK[k-1];	  yTmp[j]    =    sum[j]    +    stepSize    *    yDotK[k];    	non-compiled	[CE]  ';'  expected	51	None	replace
244	[BUG]  [BUGGY]  double  stepSize  =  t.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  t.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  t.length;  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  double    stepSize    =    hNew.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	101	None	replace
245	[BUG]  [BUGGY]  yTmp[j]  =  hNew[j]  +  stepSize  *  yDotK[l];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  hNew[j]  +  stepSize  *  yDotK[l];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  hNew[j]  +  stepSize  *  yDotK[l];	  yTmp[j]    =    sum[j]    +    stepSize    *    yDotK[l];    	non-compiled	[CE]  ';'  expected	49	None	replace
246	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  yDotK[0];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  yDotK[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  stepSize  *  yDotK[0];	  yTmp[j]    =    sum[j]    +    stepSize    *    yDotK[l];    	non-compiled	[CE]  ';'  expected	49	None	replace
247	[BUG]  [BUGGY]  if(j  <  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	17	None	replace
248	[BUG]  [BUGGY]  if(j  >=  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	17	None	replace
249	[BUG]  [BUGGY]  if(j  <  0)  {  for(int  j  =  0;  j  <  k.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  for(int  j  =  0;  j  <  k.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  for(int  j  =  0;  j  <  k.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
250	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
251	[BUG]  [BUGGY]  yTmp[j]  =  error  +  stepSize  *  yDotK[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  error  +  stepSize  *  yDotK[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  error  +  stepSize  *  yDotK[0];	  yTmp[j]    =    sum    +    stepSize    *    yDotK[0];    	non-compiled	[CE]  ';'  expected	36	None	replace
252	[BUG]  [BUGGY]  yTmp[j]  =  hNew  +  stepSize  *  yDotK[0];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  hNew  +  stepSize  *  yDotK[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  hNew  +  stepSize  *  yDotK[0];	  yTmp[j]    =    sum    +    stepSize    *    yDotK[0];    	non-compiled	[CE]  ';'  expected	36	None	replace
253	[BUG]  [BUGGY]  yTmp[j]  =  y0  +  stepSize  *  yDotK[0];  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0  +  stepSize  *  yDotK[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0  +  stepSize  *  yDotK[0];	  yTmp[j]    =    sum    +    stepSize    *    yDotK[0];    	non-compiled	[CE]  ';'  expected	36	None	replace
254	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
255	[BUG]  [BUGGY]  if(j!=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j!=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j!=  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
256	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  k;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  k;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  *  k;	  yTmp[j]    =    y[j]    +    sum    *    sum;    	non-compiled	[CE]  ';'  expected	92	None	replace
257	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	26	None	replace
258	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	26	None	replace
259	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  int    stepSize    =    a.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
260	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  k  =  1;  k  <  y0.length;  ++k)  {  sum  +=  b[1]  *  yDotK[1][j];  }	  for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	16	None	replace
261	[BUG]  [BUGGY]  if(j  ==  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  ==  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  ==  0)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	10	None	replace
262	[BUG]  [BUGGY]  int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
263	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[1]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  k;  ++j)  {  sum  +=  b[1]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
264	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  2;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  stepSize  *  2;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  stepSize  *  2;	  yTmp[j]    =    sum[j]    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	77	None	replace
265	[BUG]  [BUGGY]  double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  y0.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  int    stepSize    =    y0.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
266	[BUG]  [BUGGY]  if(j  >=  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	25	None	replace
267	[BUG]  [BUGGY]  yTmp[j]  =  y[0]  +  sum  +  error  *  sum;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[0]  +  sum  +  error  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[0]  +  sum  +  error  *  sum;	  yTmp[j]    =    y[j]    +    sum    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	93	None	replace
268	[BUG]  [BUGGY]  if(j  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    a[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	30	None	replace
269	[BUG]  [BUGGY]  if(j  >=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  a[0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    a[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	30	None	replace
270	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	24	None	replace
271	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  1;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	24	None	replace
272	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	24	None	replace
273	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  2  +  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  2  +  1;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  *  2  +  1;	  yTmp[j]    =    y[j]    +    sum    *    2;    	non-compiled	[CE]  ';'  expected	21	None	replace
274	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  amount  *  yDotK[j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  amount  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  amount  *  yDotK[j];	  yTmp[j]    =    y0[j]    +    stepSize    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	66	None	replace
275	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  *  sum;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  *  sum;	  yTmp[j]    =    y0[j]    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	78	None	replace
276	[BUG]  [BUGGY]  yTmp[j]  =  b[j]  +  error  *  sum;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  b[j]  +  error  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  b[j]  +  error  *  sum;	  yTmp[j]    =    y0[j]    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	78	None	replace
277	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  stepStart  *  yDotK[j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  stepStart  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  stepStart  *  yDotK[j];	  yTmp[j]    =    sum[j]    +    stepStart    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	50	None	replace
278	[BUG]  [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  yDotK[j-1];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum[j]  +  error  *  yDotK[j-1];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum[j]  +  error  *  yDotK[j-1];	  yTmp[j]    =    sum[j]    +    error    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
279	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  y1;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  y1;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  y1;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	59	None	replace
280	[BUG]  [BUGGY]  boolean  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	98	None	replace
281	[BUG]  [BUGGY]  boolean  stepSize  =  yTmp.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  yTmp.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  yTmp.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	98	None	replace
282	[BUG]  [BUGGY]  if(j  <  2)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  2)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  2)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	73	None	replace
283	[BUG]  [BUGGY]  yTmp[j]  =  a[j]  +  1  *  sum;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  a[j]  +  1  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  a[j]  +  1  *  sum;	  yTmp[j]    =    y0[j]    +    1    *    sum;    	non-compiled	[CE]  ';'  expected	91	None	replace
284	[BUG]  [BUGGY]  yTmp[j]  =  t[j]  +  stepSize  *  yDotK[l];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  t[j]  +  stepSize  *  yDotK[l];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  t[j]  +  stepSize  *  yDotK[l];	  yTmp[j]    =    sum[j]    +    stepSize    *    yDotK[l];    	non-compiled	[CE]  ';'  expected	49	None	replace
285	[BUG]  [BUGGY]  yTmp[j]  =  a[j]  +  stepSize  *  yDotK[l];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  a[j]  +  stepSize  *  yDotK[l];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  a[j]  +  stepSize  *  yDotK[l];	  yTmp[j]    =    sum[j]    +    stepSize    *    yDotK[l];    	non-compiled	[CE]  ';'  expected	49	None	replace
286	[BUG]  [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	107	None	replace
287	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
288	[BUG]  [BUGGY]  if(j  <  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
289	[BUG]  [BUGGY]  yTmp[j]  =  t  +  stepSize  *  y0[0];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  t  +  stepSize  *  y0[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  t  +  stepSize  *  y0[0];	  yTmp[j]    =    sum    +    stepSize    *    y[0];    	non-compiled	[CE]  ';'  expected	35	None	replace
290	[BUG]  [BUGGY]  yTmp[j]  =  a[j]  +  error  *  yDotK[j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  a[j]  +  error  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  a[j]  +  error  *  yDotK[j];	  yTmp[j]    =    sum[j]    +    error    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
291	[BUG]  [BUGGY]  yTmp[j]  =  b[j]  +  error  *  yDotK[j];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  b[j]  +  error  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  b[j]  +  error  *  yDotK[j];	  yTmp[j]    =    sum[j]    +    error    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	13	None	replace
292	[BUG]  [BUGGY]  if(j  >=  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	3	None	replace
293	[BUG]  [BUGGY]  yTmp[j]  =  b[0]  +  sum  *  stepSize;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  b[0]  +  sum  *  stepSize;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  b[0]  +  sum  *  stepSize;	  yTmp[j]    =    y0[0]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	82	None	replace
294	[BUG]  [BUGGY]  double  stepSize  =  a.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  a.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  a.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  int    stepSize    =    a.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
295	[BUG]  [BUGGY]  yTmp[j]  =  b[0]  +  stepSize  *  sum;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  b[0]  +  stepSize  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  b[0]  +  stepSize  *  sum;	  yTmp[j]    =    y0[0]    +    stepSize    *    sum;    	non-compiled	[CE]  ';'  expected	83	None	replace
296	[BUG]  [BUGGY]  if(j  <  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	1	None	replace
297	[BUG]  [BUGGY]  if(j!=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j!=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j!=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	79	None	replace
298	[BUG]  [BUGGY]  yTmp[j]  =  y[0]  +  sum  *  2;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[0]  +  sum  *  2;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[0]  +  sum  *  2;	  yTmp[j]    =    y[0]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	34	None	replace
299	[BUG]  [BUGGY]  yTmp[j]  =  y[0]  +  sum  *  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[0]  +  sum  *  1;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[0]  +  sum  *  1;	  yTmp[j]    =    y[0]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	34	None	replace
300	[BUG]  [BUGGY]  if(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  k)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	26	None	replace
301	[BUG]  [BUGGY]  for(int  j  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
302	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
303	[BUG]  [BUGGY]  double  stepSize  =  b[k-1][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b[k-1][0]  *  yDotK[0][j];  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b[k-1][0]  *  yDotK[0][j];	  double    stepSize    =    hNew.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	101	None	replace
304	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  for(int  j  =  0;  j  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	for(int  j  =  0;  j  <  stages;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	27	None	replace
305	[BUG]  [BUGGY]  boolean  stepSize  =  y.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  y.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  y.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	105	None	replace
306	[BUG]  [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	7	None	replace
307	[BUG]  [BUGGY]  if(j  <  2)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  2)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  2)  {  for(int  j  =  0;  j  <  y0.length;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    j    =    0;    j    <    y0.length;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
308	[BUG]  [BUGGY]  Integer  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	60	None	replace
309	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  /  sum;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  /  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  /  sum;	  yTmp[j]    =    y[j]    +    sum    *    sum;    	non-compiled	[CE]  ';'  expected	92	None	replace
310	[BUG]  [BUGGY]  yTmp[j]  =  b[j]  +  sum  *  sum;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  b[j]  +  sum  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  b[j]  +  sum  *  sum;	  yTmp[j]    =    y[j]    +    sum    *    sum;    	non-compiled	[CE]  ';'  expected	92	None	replace
311	[BUG]  [BUGGY]  if(j  <  1)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	18	None	replace
312	[BUG]  [BUGGY]  if(j  <  2)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  2)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  2)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	18	None	replace
313	[BUG]  [BUGGY]  yTmp[j]  =  a[j]  +  error  *  sum;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  a[j]  +  error  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  a[j]  +  error  *  sum;	  yTmp[j]    =    y0[j]    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	78	None	replace
314	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  *  yDotK[j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  *  yDotK[j];	  yTmp[j]    =    y0[j]    +    stepSize    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	66	None	replace
315	[BUG]  [BUGGY]  int  stepSize  =  b[hNew.length  -  1][j;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  int  stepSize  =  b[hNew.length  -  1][j;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	int  stepSize  =  b[hNew.length  -  1][j;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  int    stepSize    =    b[hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	96	None	replace
316	[BUG]  [BUGGY]  if(j  <  1)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    <    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
317	[BUG]  [BUGGY]  if(j  <  2)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  2)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  2)  {  if(sum  >  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    <    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
318	[BUG]  [BUGGY]  boolean  stepSize  =  b[0][0]  *  hNew[0][j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  b[0][0]  *  hNew[0][j];  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  b[0][0]  *  hNew[0][j];	  boolean    stepSize    =    hNew.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	100	None	replace
319	[BUG]  [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  3;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0[j]  +  sum  *  3;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0[j]  +  sum  *  3;	  yTmp[j]    =    y0[j]    +    sum    *    stepSize;    	non-compiled	[CE]  ';'  expected	22	None	replace
320	[BUG]  [BUGGY]  yTmp[j]  =  b[0]  +  error  *  sum;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  b[0]  +  error  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  b[0]  +  error  *  sum;	  yTmp[j]    =    y[0]    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	89	None	replace
321	[BUG]  [BUGGY]  yTmp[j]  =  y[0]  +  sum  *  sum;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[0]  +  sum  *  sum;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[0]  +  sum  *  sum;	  yTmp[j]    =    y[0]    +    error    *    sum;    	non-compiled	[CE]  ';'  expected	89	None	replace
322	[BUG]  [BUGGY]  if(j!=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j!=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j!=  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
323	[BUG]  [BUGGY]  if(j  <  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	106	None	replace
324	[BUG]  [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  hNew  +  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y[j]  +  sum  *  hNew  +  1;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y[j]  +  sum  *  hNew  +  1;	  yTmp[j]    =    y[j]    +    sum    *    hNew;    	non-compiled	[CE]  ';'  expected	19	None	replace
325	[BUG]  [BUGGY]  yTmp[j]  =  t  +  stepSize  *  y0[j];  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  t  +  stepSize  *  y0[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  t  +  stepSize  *  y0[j];	  yTmp[j]    =    sum    +    stepSize    *    y0[j];    	non-compiled	[CE]  ';'  expected	44	None	replace
326	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  y0[k];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  y0[k];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepSize  *  y0[k];	  yTmp[j]    =    sum    +    stepSize    *    y0[j];    	non-compiled	[CE]  ';'  expected	44	None	replace
327	[BUG]  [BUGGY]  double  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	103	None	replace
328	[BUG]  [BUGGY]  double  stepSize  =  b[0][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b[0][0]  *  yDotK[0][j];  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b[0][0]  *  yDotK[0][j];	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	103	None	replace
329	[BUG]  [BUGGY]  Integer  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	81	None	replace
330	[BUG]  [BUGGY]  double  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	99	None	replace
331	[BUG]  [BUGGY]  double  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	99	None	replace
332	[BUG]  [BUGGY]  double  stepSize  =  b[0][0]  *  yDotK[1][j];  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b[0][0]  *  yDotK[1][j];  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b[0][0]  *  yDotK[1][j];	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	99	None	replace
333	[BUG]  [BUGGY]  yTmp[j]  =  t  +  error[j]  *  yDotK[j];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  t  +  error[j]  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  t  +  error[j]  *  yDotK[j];	  yTmp[j]    =    sum    +    error[j]    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	14	None	replace
334	[BUG]  [BUGGY]  yTmp[j]  =  y0  +  error[j]  *  yDotK[j];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  y0  +  error[j]  *  yDotK[j];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  y0  +  error[j]  *  yDotK[j];	  yTmp[j]    =    sum    +    error[j]    *    yDotK[j];    	non-compiled	[CE]  ';'  expected	14	None	replace
335	[BUG]  [BUGGY]  Integer  stepSize  =  b[k-1][0]  *  yDotK[0][j];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b[k-1][0]  *  yDotK[0][j];  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b[k-1][0]  *  yDotK[0][j];	  Integer    stepSize    =    hNew.length;    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	76	None	replace
336	[BUG]  [BUGGY]  if(j  <  2)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  2)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  2)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	86	None	replace
337	[BUG]  [BUGGY]  boolean  stepSize  =  yTmp.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  yTmp.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  yTmp.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	102	None	replace
338	[BUG]  [BUGGY]  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	102	None	replace
339	[BUG]  [BUGGY]  yTmp[j]  =  b[j]  +  stepSize  *  y0;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  b[j]  +  stepSize  *  y0;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  b[j]  +  stepSize  *  y0;	  yTmp[j]    =    sum[j]    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	77	None	replace
340	[BUG]  [BUGGY]  if(j  <  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
341	[BUG]  [BUGGY]  if(k  <  1)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(k  <  1)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(k  <  1)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
342	[BUG]  [BUGGY]  if(j  <  1)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
343	[BUG]  [BUGGY]  if(k  <  1)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(k  <  1)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(k  <  1)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(k    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	108	None	replace
344	[BUG]  [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	59	None	replace
345	[BUG]  [BUGGY]  Integer  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0][0]  *  yDotK[1][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0][0]    *    yDotK[1][j];    }    	non-compiled	[CE]  ';'  expected	61	None	replace
346	[BUG]  [BUGGY]  if(j  <  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	97	None	replace
347	[BUG]  [BUGGY]  if(j  <  2)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  2)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  2)  {  for(int  k  =  0;  k  <  y0.length;  ++k)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    k    =    0;    k    <    y0.length;    ++k)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	97	None	replace
348	[BUG]  [BUGGY]  if(j  <  2)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  2)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  2)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	65	None	replace
349	[BUG]  [BUGGY]  boolean  stepSize  =  b[0][0]  *  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  b[0][0]  *  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  b[0][0]  *  hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	94	None	replace
350	[BUG]  [BUGGY]  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	boolean  stepSize  =  hNew.length;  for(int  j  =  0;  j  <  stage.length;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  boolean    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	94	None	replace
351	[BUG]  [BUGGY]  yTmp[j]  =  t[j]  +  stepSize  *  yDotK[k];  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  t[j]  +  stepSize  *  yDotK[k];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  t[j]  +  stepSize  *  yDotK[k];	  yTmp[j]    =    sum[j]    +    stepSize    *    yDotK[k];    	non-compiled	[CE]  ';'  expected	51	None	replace
352	[BUG]  [BUGGY]  double  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b[hNew.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	95	None	replace
353	[BUG]  [BUGGY]  double  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  double  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	double  stepSize  =  b[0].length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[1][0]  *  yDotK[0][j];  }	  double    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	95	None	replace
354	[BUG]  [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  2;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  sum  +  stepSize  *  2;  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  sum  +  stepSize  *  2;	  yTmp[j]    =    sum    +    stepSize    *    y0;    	non-compiled	[CE]  ';'  expected	45	None	replace
355	[BUG]  [BUGGY]  if(k  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(k  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(k  >  0)  {  for(int  j  =  0;  j  <  k;  ++j)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    >    0)    {    for(int    j    =    0;    j    <    k;    ++j)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	25	None	replace
356	[BUG]  [BUGGY]  yTmp[j]  =  t  +  stepSize  *  yDotK[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  yTmp[j]  =  t  +  stepSize  *  yDotK[0];  [BUGGY]      }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	yTmp[j]  =  t  +  stepSize  *  yDotK[0];	  yTmp[j]    =    sum    +    stepSize    *    yDotK[0];    	non-compiled	[CE]  ';'  expected	36	None	replace
357	[BUG]  [BUGGY]  Integer  stepSize  =  a.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  Integer  stepSize  =  a.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	Integer  stepSize  =  a.length;  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  a[k-1][0]  *  yDotK[0][j];  }	  Integer    stepSize    =    hNew.length;    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    a[k-1][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	85	None	replace
358	[BUG]  [BUGGY]  if(k  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(k  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(k  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	43	None	replace
359	[BUG]  [BUGGY]  if(j  <  1)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  1)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  1)  {  if(j  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[0][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	43	None	replace
360	[BUG]  [BUGGY]  if(j  <  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  <  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  <  0)  {  if(sum  >  0)  {  for(int  j  =  0;  j  <  stages;  ++j)  {  sum  +=  b[0]  *  yDotK[1][j];  }	  if(j    <    k)    {    if(sum    >    0)    {    for(int    j    =    0;    j    <    stages;    ++j)    {    sum    +=    b[0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	43	None	replace
361	[BUG]  [BUGGY]  if(j  >=  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  sum  +=  a[k-1][l]  *  yDotK[l][j];  }      [BUGGY]  if(j  >=  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }  [BUGGY]      yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  computeDerivatives(stepStart  +  c[k-1]  *  stepSize,  yTmp,  yDotK[k]);  }  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	if(j  >=  0)  {  if(sum  >  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  b[0][0]  *  yDotK[0][j];  }	  if(j    ==    0)    {    if(sum    >    0)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    b[0][0]    *    yDotK[0][j];    }    	non-compiled	[CE]  ';'  expected	10	None	replace
