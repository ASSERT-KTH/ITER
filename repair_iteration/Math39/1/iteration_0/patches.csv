bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  [BUGGY]  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {	for  (int  i  =  0;  i  <  scale.length;  ++i)  {  	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  for(int  i  =  0;  i  <  mainSetDimension;  ++i)  {  [BUGGY]  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	add	for(int  i  =  0;  i  <  mainSetDimension;  ++i)  {	for  (int  i  =  0;  i  <  scale.length;  ++i)  {  	compilable	  [FE]  AssertionError  	1	1	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  mainSetDimension;  ++i)  {  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  for(int  i  =  0;  i  <  mainSetDimension;  ++i)  {  [BUGGY]  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	for(int  i  =  0;  i  <  mainSetDimension;  ++i)  {	for  (int  i  =  0;  i  <  scale.length;  ++i)  {  	compilable	  [FE]  AssertionError  	1	1	replace
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  for(int  i  =  0;  i  <  yDotK.length;  ++i)  {  [BUGGY]  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	add	for(int  i  =  0;  i  <  yDotK.length;  ++i)  {	for  (int  i  =  0;  i  <  scale.length;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	8	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yDotK.length;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  for(int  i  =  0;  i  <  yDotK.length;  ++i)  {  [BUGGY]  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	for(int  i  =  0;  i  <  yDotK.length;  ++i)  {	for  (int  i  =  0;  i  <  scale.length;  ++i)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	8	replace
6	[BUG]  [BUGGY]    [CE]  while  expected  [FE]          AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    [BUGGY]  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	  	for  (int  i  =  0;  i  <  scale.length;  ++i)  {  	non-compiled	[CE]  while  expected	1	None	replace
7	[BUG]  [BUGGY]    double[][]  scale  =  new  double[mainSetDimension];  [CE]  variable  scale  is  already  defined  in  method  integrate(ExpandableStatefulODE,double)  [FE]    AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scale  =  new  double[mainSetDimension];  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scale  =  new  double[mainSetDimension];		non-compiled	[CE]  variable  scale  is  already  defined  in  method  integrate(ExpandableStatefulODE,double)	2	None	add
8	[BUG]  [BUGGY]    double[][]  scaledH  =  filteredNextIsLast.doubleValue();  [CE]  cannot  find  symbol  filteredNextIsLast  [FE]      AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scaledH  =  filteredNextIsLast.doubleValue();  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scaledH  =  filteredNextIsLast.doubleValue();		non-compiled	[CE]  cannot  find  symbol  filteredNextIsLast	2	None	add
9	[BUG]  [BUGGY]    double[][]  scaledH  =  vecAbsoluteTolerance.getScale();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scaledH  =  vecAbsoluteTolerance.getScale();  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scaledH  =  vecAbsoluteTolerance.getScale();		non-compiled	[CE]  cannot  find  symbol	2	None	add
10	[BUG]  [BUGGY]    double[][]  scaledH  =  vecAbsoluteTolerance.doubleValue();  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scaledH  =  vecAbsoluteTolerance.doubleValue();  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scaledH  =  vecAbsoluteTolerance.doubleValue();		non-compiled	[CE]  cannot  find  symbol	2	None	add
11	[BUG]  [BUGGY]    double[][]  scaledH  =  vecAbsoluteTolerance.getScaleDimension();  [CE]  cannot  find  symbol  [FE]            AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scaledH  =  vecAbsoluteTolerance.getScaleDimension();  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scaledH  =  vecAbsoluteTolerance.getScaleDimension();		non-compiled	[CE]  cannot  find  symbol	2	None	add
12	[BUG]  [BUGGY]    filteredNextIsLast  =  false;  [CE]  cannot  find  symbol  filteredNextIsLast  [FE]    AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    filteredNextIsLast  =  false;  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    filteredNextIsLast  =  false;		non-compiled	[CE]  cannot  find  symbol  filteredNextIsLast	2	None	add
13	[BUG]  [BUGGY]    double[][]  scalAbsoluteTolerance  =  computeDerivatives(t,  y,  yDotK[0],  scale);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]      AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scalAbsoluteTolerance  =  computeDerivatives(t,  y,  yDotK[0],  scale);  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scalAbsoluteTolerance  =  computeDerivatives(t,  y,  yDotK[0],  scale);		non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	2	None	add
14	[BUG]  [BUGGY]    double[][]  scale  =  new  double[mainSetDimension][scale.length];  [CE]  variable  scale  is  already  defined  in  method  integrate(ExpandableStatefulODE,double)  [FE]        AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scale  =  new  double[mainSetDimension][scale.length];  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scale  =  new  double[mainSetDimension][scale.length];		non-compiled	[CE]  variable  scale  is  already  defined  in  method  integrate(ExpandableStatefulODE,double)	2	None	add
15	[BUG]  [BUGGY]    double[][]  scalAbsoluteTolerance  =  computeDerivatives(t,  y,  yDotK[0]);  [CE]  incompatible  types  [FE]          AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scalAbsoluteTolerance  =  computeDerivatives(t,  y,  yDotK[0]);  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scalAbsoluteTolerance  =  computeDerivatives(t,  y,  yDotK[0]);		non-compiled	[CE]  incompatible  types	2	None	add
16	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  [BUGGY]  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	add	for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {	for  (int  i  =  0;  i  <  scale.length;  ++i)  {  	compilable	  [FE]  NullPointerException  	1	8	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  [FE]  NullPointerException  [FE]    AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  [BUGGY]  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {	for  (int  i  =  0;  i  <  scale.length;  ++i)  {  	compilable	  [FE]  NullPointerException  	1	8	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  MainSetDimension.length;  ++i)  {  [CE]  cannot  find  symbol  MainSetDimension  [FE]    AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  for(int  i  =  0;  i  <  MainSetDimension.length;  ++i)  {  [BUGGY]  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	for(int  i  =  0;  i  <  MainSetDimension.length;  ++i)  {	for  (int  i  =  0;  i  <  scale.length;  ++i)  {  	non-compiled	[CE]  cannot  find  symbol  MainSetDimension	1	None	replace
19	[BUG]  [BUGGY]  timeout  [FE]      AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  [BUGGY]  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	add	for(int  i  =  1;  i  <  scale.length;  ++i)  {	for  (int  i  =  0;  i  <  scale.length;  ++i)  {  	compilable	timeout	1	1	replace
20	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  timeout  [FE]      AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  [BUGGY]  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {	for  (int  i  =  0;  i  <  scale.length;  ++i)  {  	compilable	timeout	1	1	replace
21	[BUG]  [BUGGY]    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t,  scale);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t,  scale);  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t,  scale);		non-compiled	[CE]  cannot  find  symbol	2	None	add
22	[BUG]  [BUGGY]    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t,  getOrder());  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t,  getOrder());  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t,  getOrder());		non-compiled	[CE]  cannot  find  symbol	2	None	add
23	[BUG]  [BUGGY]    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t);  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsoluteTolerance(t);		non-compiled	[CE]  cannot  find  symbol	2	None	add
24	[BUG]  [BUGGY]    scalAbsoluteTolerance  =  Math.abs(scale);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    scalAbsoluteTolerance  =  Math.abs(scale);  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    scalAbsoluteTolerance  =  Math.abs(scale);		non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	2	None	add
25	[BUG]  [BUGGY]    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsolute(t,  scale);  [CE]  cannot  find  symbol  [FE]            AssertionError  [CONTEXT]  while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  [BUGGY]    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsolute(t,  scale);  [BUGGY]  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  firstTime  =  false;  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	    double[][]  scalAbsoluteTolerance  =  calculateScaleAbsolute(t,  scale);		non-compiled	[CE]  cannot  find  symbol	2	None	add
