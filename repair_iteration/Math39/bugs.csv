bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] for (int i = 0; i < scale.length; ++i) { [FE] AssertionError [CONTEXT] while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { [BUGGY] for (int i = 0; i < scale.length; ++i) { [BUGGY] scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { [BUGGY] [BUGGY] for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	236	236	1	add	
3	[BUG] [BUGGY] scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); [FE] AssertionError [CONTEXT] if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { [BUGGY] scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); [BUGGY] } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { [BUGGY] [BUGGY] scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.35355339059327373	237	237	1	add	
5	[BUG] [BUGGY] setEquations(equations); [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); [BUGGY] setEquations(equations); [BUGGY] final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	195	195	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); [BUGGY] [BUGGY] setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	195	195	1	add	
7	[BUG] [BUGGY] final boolean forward = t > equations.getTime(); [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); [BUGGY] final boolean forward = t > equations.getTime(); [BUGGY]   final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	196	196	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); [BUGGY] [BUGGY] final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	196	196	1	add	
9	[BUG] [BUGGY] final double[] y0= equations.getCompleteState(); [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  [BUGGY] final double[] y0= equations.getCompleteState(); [BUGGY] final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	199	199	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  [BUGGY] [BUGGY] final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	199	199	1	add	
11	[BUG] [BUGGY] final double[] y = y0.clone(); [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); [BUGGY] final double[] y = y0.clone(); [BUGGY] final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime()); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	200	200	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); [BUGGY] [BUGGY] final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime()); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	200	200	1	add	
13	[BUG] [BUGGY] final int stages = c.length + 1; [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); [BUGGY] final int stages = c.length + 1; [BUGGY] final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	201	201	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); [BUGGY] [BUGGY] final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	201	201	1	add	
15	[BUG] [BUGGY] final double[][] yDotK = new double[stages][y.length]; [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; [BUGGY] final double[][] yDotK = new double[stages][y.length]; [BUGGY] final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	202	202	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; [BUGGY] [BUGGY] final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	202	202	1	add	
17	[BUG] [BUGGY] final double[] yTmp= y0.clone(); [FE] AssertionError [CONTEXT] sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; [BUGGY] final double[] yTmp= y0.clone(); [BUGGY] final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	203	203	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; [BUGGY] [BUGGY] final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	203	203	1	add	
19	[BUG] [BUGGY] final double[] yDotTmp = new double[y.length]; [FE] AssertionError [CONTEXT] sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); [BUGGY] final double[] yDotTmp = new double[y.length]; [BUGGY]   final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	204	204	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); [BUGGY] [BUGGY] final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	204	204	1	add	
21	[BUG] [BUGGY] final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); [FE] AssertionError [CONTEXT]  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  [BUGGY] final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); [BUGGY] interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	207	207	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  [BUGGY] [BUGGY] final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	207	207	1	add	
23	[BUG] [BUGGY] interpolator.reinitialize(this, yTmp, yDotK, forward,  equations.getPrimaryMapper(), equations.getSecondaryMappers()); [FE] AssertionError [CONTEXT]  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); [BUGGY] interpolator.reinitialize(this, yTmp, yDotK, forward,        equations.getPrimaryMapper(), equations.getSecondaryMappers()); [BUGGY] equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	208	209	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); [BUGGY] [BUGGY] interpolator.reinitialize(this, yTmp, yDotK, forward,        equations.getPrimaryMapper(), equations.getSecondaryMappers()); equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	208	209	1	add	
25	[BUG] [BUGGY] interpolator.storeTime(equations.getTime()); [FE] AssertionError [CONTEXT] final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); [BUGGY] interpolator.storeTime(equations.getTime()); [BUGGY]   stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); [BUGGY] [BUGGY] interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	210	210	1	add	
27	[BUG] [BUGGY] stepStart = equations.getTime(); [FE] AssertionError [CONTEXT] final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  [BUGGY] stepStart = equations.getTime(); [BUGGY] doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { interpolator.shift();  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  [BUGGY] [BUGGY] stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { interpolator.shift();  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	213	213	1	add	
29	[BUG] [BUGGY] doublehNew= 0; [FE] AssertionError [CONTEXT] final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); [BUGGY] doublehNew= 0; [BUGGY] boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { interpolator.shift();   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	214	214	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] yDotTmp = new double[y.length];  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); [BUGGY] [BUGGY] doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { interpolator.shift();   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	214	214	1	add	
31	[BUG] [BUGGY] boolean firstTime = true; [FE] AssertionError [CONTEXT]  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; [BUGGY] boolean firstTime = true; [BUGGY] initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { interpolator.shift();  double error = 10; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; [BUGGY] [BUGGY] boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { interpolator.shift();  double error = 10; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	215	215	1	add	
33	[BUG] [BUGGY] initIntegration(equations.getTime(), y0, t); [FE] AssertionError [CONTEXT]  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; [BUGGY] initIntegration(equations.getTime(), y0, t); [BUGGY]   isLastStep = false; do { interpolator.shift();  double error = 10; while (error >= 1.0) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy(); interpolator.reinitialize(this, yTmp, yDotK, forward, equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; [BUGGY] [BUGGY] initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { interpolator.shift();  double error = 10; while (error >= 1.0) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	216	216	1	add	
35	[BUG] [BUGGY] isLastStep = false; [FE] AssertionError [CONTEXT] equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  [BUGGY] isLastStep = false; [BUGGY] do { interpolator.shift();  double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] equations.getPrimaryMapper(), equations.getSecondaryMappers()); interpolator.storeTime(equations.getTime());  stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  [BUGGY] [BUGGY] isLastStep = false; do { interpolator.shift();  double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	219	219	1	add	
37	[BUG] [BUGGY] interpolator.shift(); [FE] AssertionError [CONTEXT]  stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { [BUGGY] interpolator.shift(); [BUGGY]   double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); }  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	222	222	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  stepStart = equations.getTime(); doublehNew= 0; boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { [BUGGY] [BUGGY] interpolator.shift();  double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); }  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	222	222	1	add	
39	[BUG] [BUGGY] double error = 10; [FE] AssertionError [CONTEXT] boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { interpolator.shift();  [BUGGY] double error = 10; [BUGGY] while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	225	225	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] boolean firstTime = true; initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { interpolator.shift();  [BUGGY] [BUGGY] double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	225	225	1	add	
41	[BUG] [BUGGY] while (error >= 1.0) { [FE] AssertionError [CONTEXT] initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { interpolator.shift();  double error = 10; [BUGGY] while (error >= 1.0) { [BUGGY]  if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] initIntegration(equations.getTime(), y0, t);  isLastStep = false; do { interpolator.shift();  double error = 10; [BUGGY] [BUGGY] while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	add	
43	[BUG] [BUGGY] if (firstTime || !fsal) { [FE] AssertionError [CONTEXT]  isLastStep = false; do { interpolator.shift();  double error = 10; while (error >= 1.0) { [BUGGY] if (firstTime || !fsal) { [BUGGY]  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  isLastStep = false; do { interpolator.shift();  double error = 10; while (error >= 1.0) { [BUGGY] [BUGGY] if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	228	228	1	add	
45	[BUG] [BUGGY] computeDerivatives(stepStart, y, yDotK[0]); [FE] AssertionError [CONTEXT] do { interpolator.shift();  double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  [BUGGY] computeDerivatives(stepStart, y, yDotK[0]); [BUGGY] } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] do { interpolator.shift();  double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  [BUGGY] [BUGGY] computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	230	230	1	add	
47	[BUG] [BUGGY] if (firstTime) { [FE] AssertionError [CONTEXT]  double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } [BUGGY] if (firstTime) { [BUGGY] final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	233	233	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } [BUGGY] [BUGGY] if (firstTime) { final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	233	233	1	add	
49	[BUG] [BUGGY] final double[] scale = new double[mainSetDimension]; [FE] AssertionError [CONTEXT]  double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { [BUGGY] final double[] scale = new double[mainSetDimension]; [BUGGY] if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	234	234	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { [BUGGY] [BUGGY] final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	234	234	1	add	
51	[BUG] [BUGGY] if (vecAbsoluteTolerance == null) { [FE] AssertionError [CONTEXT] double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; [BUGGY] if (vecAbsoluteTolerance == null) { [BUGGY] for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double error = 10; while (error >= 1.0) { if (firstTime || !fsal) {  computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale = new double[mainSetDimension]; [BUGGY] [BUGGY] if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	235	235	1	add	
53	[BUG] [BUGGY] hNew = initializeStep(forward, getOrder(), scale,  stepStart, y, yDotK[0], yTmp, yDotK[1]); [FE] AssertionError [CONTEXT] final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } [BUGGY] hNew = initializeStep(forward, getOrder(), scale,        stepStart, y, yDotK[0], yTmp, yDotK[1]); [BUGGY] stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] scale = new double[mainSetDimension]; if (vecAbsoluteTolerance == null) { for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } [BUGGY] [BUGGY] hNew = initializeStep(forward, getOrder(), scale,        stepStart, y, yDotK[0], yTmp, yDotK[1]); stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	244	245	1	add	
55	[BUG] [BUGGY] firstTime = false; [FE] AssertionError [CONTEXT] for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); [BUGGY] firstTime = false; [BUGGY] } stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]); } } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); [BUGGY] [BUGGY] firstTime = false; } stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	add	
57	[BUG] [BUGGY] stepSize = hNew; [FE] AssertionError [CONTEXT] } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } [BUGGY] stepSize = hNew; [BUGGY]   for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else { for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]); } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } [BUGGY] [BUGGY] stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	249	249	1	add	
59	[BUG] [BUGGY] for (int k = 1; k < stages; ++k) { [FE] AssertionError [CONTEXT] } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew;  [BUGGY] for (int k = 1; k < stages; ++k) { [BUGGY]  for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } } hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew;  [BUGGY] [BUGGY] for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	252	252	1	add	
61	[BUG] [BUGGY] for (int j = 0; j < y0.length; ++j) { [FE] AssertionError [CONTEXT] hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew;  for (int k = 1; k < stages; ++k) { [BUGGY] for (int j = 0; j < y0.length; ++j) { [BUGGY] double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	254	254	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] hNew = initializeStep(forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew;  for (int k = 1; k < stages; ++k) { [BUGGY] [BUGGY] for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	254	254	1	add	
63	[BUG] [BUGGY] double sum = a[k-1][0] * yDotK[0][j]; [FE] AssertionError [CONTEXT] stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { [BUGGY] double sum = a[k-1][0] * yDotK[0][j]; [BUGGY] for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { [BUGGY] [BUGGY] double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	255	255	1	add	
65	[BUG] [BUGGY] for (int l = 1; l < k; ++l) { [FE] AssertionError [CONTEXT] firstTime = false; } stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; [BUGGY] for (int l = 1; l < k; ++l) { [BUGGY] sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	256	256	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] firstTime = false; } stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; [BUGGY] [BUGGY] for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	256	256	1	add	
67	[BUG] [BUGGY] sum += a[k-1][l] * yDotK[l][j]; [FE] AssertionError [CONTEXT] } stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { [BUGGY] sum += a[k-1][l] * yDotK[l][j]; [BUGGY] } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	257	257	1	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { [BUGGY] [BUGGY] sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	257	257	1	add	
69	[BUG] [BUGGY] yTmp[j] = y[j] + stepSize * sum; [FE] AssertionError [CONTEXT] stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } [BUGGY] yTmp[j] = y[j] + stepSize * sum; [BUGGY] } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] stepSize = hNew;  for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } [BUGGY] [BUGGY] yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	259	259	1	add	
71	[BUG] [BUGGY] computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); [FE] AssertionError [CONTEXT] for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } [BUGGY] computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); [BUGGY]  }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } [BUGGY] [BUGGY] computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); }  for (int j = 0; j < y0.length; ++j) { double sum= b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum+= b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	262	262	1	add	
73	[BUG] [BUGGY] super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { [BUGGY] super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); [BUGGY]  this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	115	115	1	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { [BUGGY] [BUGGY] super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();   [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	115	115	1	add	
75	[BUG] [BUGGY] this.fsal= fsal; [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); [BUGGY] this.fsal= fsal; [BUGGY] this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	117	117	1	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); [BUGGY] [BUGGY] this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	117	117	1	add	
77	[BUG] [BUGGY] this.c = c; [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; [BUGGY] this.c = c; [BUGGY] this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	118	118	1	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; [BUGGY] [BUGGY] this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	118	118	1	add	
79	[BUG] [BUGGY] this.a = a; [FE] AssertionError [CONTEXT] final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; [BUGGY] this.a = a; [BUGGY] this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0);  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	119	119	1	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; [BUGGY] [BUGGY] this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0);  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	119	119	1	add	
81	[BUG] [BUGGY] this.b = b; [FE] AssertionError [CONTEXT] final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; [BUGGY] this.b = b; [BUGGY] this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	120	120	1	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; [BUGGY] [BUGGY] this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	120	120	1	add	
83	[BUG] [BUGGY] this.prototype = prototype; [FE] AssertionError [CONTEXT] final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; this.b = b; [BUGGY] this.prototype = prototype; [BUGGY]  exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	121	121	1	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; this.b = b; [BUGGY] [BUGGY] this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	121	121	1	add	
85	[BUG] [BUGGY] exp = -1.0 / getOrder(); [FE] AssertionError [CONTEXT] final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; [BUGGY] exp = -1.0 / getOrder(); [BUGGY]   setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	123	123	1	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; [BUGGY] [BUGGY] exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	123	123	1	add	
87	[BUG] [BUGGY] setSafety(0.9); [FE] AssertionError [CONTEXT] this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  [BUGGY] setSafety(0.9); [BUGGY] setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	126	126	1	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  [BUGGY] [BUGGY] setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	126	126	1	add	
89	[BUG] [BUGGY] setMinReduction(0.2); [FE] AssertionError [CONTEXT] this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); [BUGGY] setMinReduction(0.2); [BUGGY] setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	127	127	1	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] this.fsal= fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); [BUGGY] [BUGGY] setMinReduction(0.2); setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	127	127	1	add	
91	[BUG] [BUGGY] setMaxGrowth(10.0); [FE] AssertionError [CONTEXT] this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); [BUGGY] setMaxGrowth(10.0); [BUGGY]  } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	128	128	1	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); [BUGGY] [BUGGY] setMaxGrowth(10.0); } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	128	128	1	add	
93	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); [BUGGY] } [BUGGY]  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	130	130	1	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] this.b = b; this.prototype = prototype; exp = -1.0 / getOrder();  setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); [BUGGY] [BUGGY] } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] <init> [RETURN_TYPE] RungeKuttaStepInterpolator,double,double,double,double)  String name final boolean fsal final double[] c final double[][] a final double[] b RungeKuttaStepInterpolator prototype final double minStep final double maxStep final double scalAbsoluteTolerance final double scalRelativeTolerance [VARIABLES] double[][] a boolean fsal String name double[] b c RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	130	130	1	add	
95	[BUG] [BUGGY] sanityChecks(equations, t); [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { [BUGGY] sanityChecks(equations, t); [BUGGY] setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length]; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	194	194	1	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { [BUGGY] [BUGGY] sanityChecks(equations, t); setEquations(equations); final boolean forward = t > equations.getTime();  final double[] y0= equations.getCompleteState(); final double[] y = y0.clone(); final int stages = c.length + 1; final double[][] yDotK = new double[stages][y.length]; final double[] yTmp= y0.clone(); final double[] yDotTmp = new double[y.length]; [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] integrate [RETURN_TYPE] void  ExpandableStatefulODE equations final double t [VARIABLES] ExpandableStatefulODE equations boolean filteredNextIsLast firstTime forward fsal nextIsLast double[] b c scale vecAbsoluteTolerance vecRelativeTolerance y y0 yDotTmp yTmp double error exp factor filteredNextT hNew maxGrowth maxStep minReduction minStep nextT safety scalAbsoluteTolerance scalRelativeTolerance scaledH sum t double[][] a yDotK RungeKuttaStepInterpolator interpolator prototype int i j k l stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.31622776601683794	194	194	1	add	
97	[BUG] [BUGGY] this.safety = safety; [FE] AssertionError [CONTEXT] public void setSafety(final double safety) { [BUGGY] this.safety = safety; [BUGGY] } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] setSafety [RETURN_TYPE] void  final double safety [VARIABLES] double[][] a boolean fsal double[] b c vecAbsoluteTolerance vecRelativeTolerance RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.30151134457776363	186	186	1	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void setSafety(final double safety) { [BUGGY] [BUGGY] this.safety = safety; } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] setSafety [RETURN_TYPE] void  final double safety [VARIABLES] double[][] a boolean fsal double[] b c vecAbsoluteTolerance vecRelativeTolerance RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.30151134457776363	186	186	1	add	
99	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void setSafety(final double safety) { this.safety = safety; [BUGGY] } [BUGGY]  [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] setSafety [RETURN_TYPE] void  final double safety [VARIABLES] double[][] a boolean fsal double[] b c vecAbsoluteTolerance vecRelativeTolerance RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.30151134457776363	187	187	1	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void setSafety(final double safety) { this.safety = safety; [BUGGY] [BUGGY] } [CLASS] EmbeddedRungeKuttaIntegrator [METHOD] setSafety [RETURN_TYPE] void  final double safety [VARIABLES] double[][] a boolean fsal double[] b c vecAbsoluteTolerance vecRelativeTolerance RungeKuttaStepInterpolator prototype double exp maxGrowth maxStep minReduction minStep safety scalAbsoluteTolerance scalRelativeTolerance  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.30151134457776363	187	187	1	add	
