bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  hNew  *  FastMath.abs(yTmp);  }  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  hNew  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  hNew  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    yTmp.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  ']'  expected	39	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(yTmp);  }  [CE]  ']'  expected  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    yTmp.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  ']'  expected	39	None	replace
7	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ']'  expected	20	None	replace
8	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ']'  expected	20	None	replace
9	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ']'  expected	20	None	replace
10	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ']'  expected	77	None	replace
11	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ']'  expected	77	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!hNew)  {  return;  }  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!hNew)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!hNew)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ']'  expected	77	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  ']'  expected	53	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  hNew  *  FastMath.abs(y[i]);  }  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  hNew  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  hNew  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  ']'  expected	53	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  ']'  expected	53	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    scalAbsoluteTolerance.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  ']'  expected	115	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    scalAbsoluteTolerance.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  ']'  expected	115	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    scalAbsoluteTolerance.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!hNew)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!hNew)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!hNew)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
21	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
22	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
26	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
27	[BUG]  [BUGGY]  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(	  if(hNew    ==    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs	  if(hNew    ==    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }	  if(hNew    >    maxGrowth)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k];    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
30	[BUG]  [BUGGY]  if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }	  if(hNew    >    maxGrowth)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k];    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
31	[BUG]  [BUGGY]  if(hNew  ==  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }	  if(hNew    >    maxGrowth)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k];    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
32	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  For(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	For(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }	  if(hNew    >    maxGrowth)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k];    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  hNew  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  hNew  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  hNew  *  FastMath.abs(yTmp);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
36	[BUG]  [BUGGY]  firstTime  =  error  +  hNew;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  error  +  hNew;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  error  +  hNew;	  firstTime    =    hNew    +    error;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
37	[BUG]  [BUGGY]  if(hNew  ==  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k];    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
38	[BUG]  [BUGGY]  if(hNew!=  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k];    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
39	[BUG]  [BUGGY]  if(hNew  ==  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
40	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!hNew)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!hNew)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  if(!hNew)  {  throw  new  IllegalArgumentException( " ");  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
42	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
44	[BUG]  [BUGGY]  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(	  if(hNew    ==    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
45	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs	  if(hNew    ==    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
46	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
47	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
48	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!firstTime)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!firstTime)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!firstTime)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
49	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k][k];    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
50	[BUG]  [BUGGY]  if(hNew  ==  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k][k];    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
51	[BUG]  [BUGGY]  if(hNew!=  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k][k];    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
52	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  For(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	For(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k][k];    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
53	[BUG]  [BUGGY]  if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
54	[BUG]  [BUGGY]  if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
55	[BUG]  [BUGGY]  if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
56	[BUG]  [BUGGY]  if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
58	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
60	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  1;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    1;    k    <    filteredNextIsLast;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
61	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  filteredNextIsLast;  ++k)  {  if(!hNew)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  filteredNextIsLast;  ++k)  {  if(!hNew)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  filteredNextIsLast;  ++k)  {  if(!hNew)  {  return;  }	  for(int    k    =    1;    k    <    filteredNextIsLast;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
64	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
65	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
66	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
67	[BUG]  [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
68	[BUG]  [BUGGY]  if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
69	[BUG]  [BUGGY]  if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
70	[BUG]  [BUGGY]  if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
71	[BUG]  [BUGGY]  if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
74	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(hNew    ==    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
75	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(hNew    ==    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
76	[BUG]  [BUGGY]  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(	  if(firstTime    ==    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
77	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
78	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
79	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
80	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
81	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
82	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(x[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
83	[BUG]  [BUGGY]  firstTime  =  firstTime  +  filteredNextIsLast;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  firstTime  +  filteredNextIsLast;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  firstTime  +  filteredNextIsLast;	  firstTime    =    hNew    +    filteredNextIsLast;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
84	[BUG]  [BUGGY]  firstTime  =  filteredNextIsLast  +  hNew;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  filteredNextIsLast  +  hNew;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  filteredNextIsLast  +  hNew;	  firstTime    =    hNew    +    filteredNextIsLast;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
85	[BUG]  [BUGGY]  firstTime  =  hNew  +  filteredNextIsLast  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  hNew  +  filteredNextIsLast  +  1;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  hNew  +  filteredNextIsLast  +  1;	  firstTime    =    hNew    +    filteredNextIsLast;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
86	[BUG]  [BUGGY]  filteredNextIsLast  =  error  +  hNew;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  error  +  hNew;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  error  +  hNew;	  filteredNextIsLast    =    hNew    +    error;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
87	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
88	[BUG]  [BUGGY]  filteredNextIsLast  =  hNew  +  stepStep;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  hNew  +  stepStep;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  hNew  +  stepStep;	  filteredNextIsLast    =    hNew    +    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
89	[BUG]  [BUGGY]  filteredNextIsLast  =  firstTime  +  stepSize;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  firstTime  +  stepSize;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  firstTime  +  stepSize;	  filteredNextIsLast    =    hNew    +    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
93	[BUG]  [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(hSize);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(hSize);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(hSize);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
96	[BUG]  [BUGGY]  while(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  while(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	while(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
97	[BUG]  [BUGGY]  while(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  while(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	while(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
104	[BUG]  [BUGGY]  while(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  while(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	while(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
105	[BUG]  [BUGGY]  while(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  while(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	while(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
109	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
110	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
111	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  filteredNextIsLast.length;  ++k)  {  if(!firstTime)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  filteredNextIsLast.length;  ++k)  {  if(!firstTime)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  filteredNextIsLast.length;  ++k)  {  if(!firstTime)  {  firstTime  =  false;  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
112	[BUG]  [BUGGY]  filteredNextIsLast  =  true,  firstTime  =  false;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  true,  firstTime  =  false;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  true,  firstTime  =  false;	  filteredNextIsLast    =    false,    firstTime    =    false;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
113	[BUG]  [BUGGY]  filteredNextIsLast  =  false,  firstTime  =  true;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  false,  firstTime  =  true;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  false,  firstTime  =  true;	  filteredNextIsLast    =    false,    firstTime    =    false;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
114	[BUG]  [BUGGY]  filteredNextIsLast  =  false,  secondTime  =  false;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  false,  secondTime  =  false;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  false,  secondTime  =  false;	  filteredNextIsLast    =    false,    firstTime    =    false;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  hNew  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  hNew  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  hNew  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
116	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
117	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
118	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
119	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(firstTime)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(firstTime)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(firstTime)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
120	[BUG]  [BUGGY]  firstTime  =  hNew  +  2;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  hNew  +  2;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  hNew  +  2;	  firstTime    =    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
121	[BUG]  [BUGGY]  firstTime  =  hNew  +  3;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  hNew  +  3;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  hNew  +  3;	  firstTime    =    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
122	[BUG]  [BUGGY]  secondTime  =  Math.max(secondTime,  hNew);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  =  Math.max(secondTime,  hNew);  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  =  Math.max(secondTime,  hNew);	  secondTime    =    error;    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
123	[BUG]  [BUGGY]  secondTime  =  firstTime;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  =  firstTime;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  =  firstTime;	  secondTime    =    error;    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
124	[BUG]  [BUGGY]  SecondTime  =  true;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  SecondTime  =  true;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	SecondTime  =  true;	  SecondTime    =    false;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
125	[BUG]  [BUGGY]  SecondTime  =  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  SecondTime  =  null;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	SecondTime  =  null;	  SecondTime    =    false;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
126	[BUG]  [BUGGY]  SecondTime  =  hNew;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  SecondTime  =  hNew;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	SecondTime  =  hNew;	  SecondTime    =    false;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(hNew);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(hNew);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(hNew);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ySize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  ySize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  ySize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
130	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
131	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
132	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastM  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastM  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastM	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
133	[BUG]  [BUGGY]  if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
134	[BUG]  [BUGGY]  if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
135	[BUG]  [BUGGY]  filteredNextIsLast  =  firstTime;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  firstTime;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  firstTime;	  filteredNextIsLast    =    error;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
136	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]	  if(hNew    ==    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
137	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
138	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  filteredNextIsLast.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  filteredNextIsLast.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  filteredNextIsLast.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(b[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(b[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(b[i]);  }	  for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  b.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
141	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
142	[BUG]  [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
143	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ".);  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
144	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
145	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
146	[BUG]  [BUGGY]  if(hNew!=  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
147	[BUG]  [BUGGY]  if(hNew)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  firstTime  =  false;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
148	[BUG]  [BUGGY]  if(hNew  ==  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
149	[BUG]  [BUGGY]  if(hNew!=  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  firstTime  =  false;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
150	[BUG]  [BUGGY]  eredNextIsLast  =  false;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  eredNextIsLast  =  false;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	eredNextIsLast  =  false;	  eredNextIsLast    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
151	[BUG]  [BUGGY]  gedNextIsLast  =  false;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  gedNextIsLast  =  false;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	gedNextIsLast  =  false;	  eredNextIsLast    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
154	[BUG]  [BUGGY]  secondTime  =  hNew  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  =  hNew  +  1;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  =  hNew  +  1;	  secondTime    =    hNew;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
155	[BUG]  [BUGGY]  secondTime  =  hNew  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  =  hNew  +  stepStart;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  =  hNew  +  stepStart;	  secondTime    =    hNew;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
156	[BUG]  [BUGGY]  secondTime  =  hNew  +  stepSize;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  =  hNew  +  stepSize;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  =  hNew  +  stepSize;	  secondTime    =    hNew;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
157	[BUG]  [BUGGY]  secondTime  =  hNew.secondTime;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  =  hNew.secondTime;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  =  hNew.secondTime;	  secondTime    =    hNew;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
158	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
159	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k]    *    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
160	[BUG]  [BUGGY]  if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k]    *    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
161	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  For(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	For(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k]    *    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
162	[BUG]  [BUGGY]  if(hNew!=  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k]  *  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k]    *    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
163	[BUG]  [BUGGY]  filteredNextIsLast  =  null;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  null;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  null;	  filteredNextIsLast    =    true;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
166	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
167	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
168	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
169	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
170	[BUG]  [BUGGY]  firstTime  -=  hNew  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  -=  hNew  +  1;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  -=  hNew  +  1;	  firstTime    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
171	[BUG]  [BUGGY]  hNew  -=  firstTime;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  hNew  -=  firstTime;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	hNew  -=  firstTime;	  firstTime    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
172	[BUG]  [BUGGY]  firstTime  -=  hNew  +  stepSize;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  -=  hNew  +  stepSize;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  -=  hNew  +  stepSize;	  firstTime    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
173	[BUG]  [BUGGY]  firstTime  -=  hNew  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  -=  hNew  +  stepStart;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  -=  hNew  +  stepStart;	  firstTime    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
174	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    scaledH[k]    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
175	[BUG]  [BUGGY]  if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    scaledH[k]    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
176	[BUG]  [BUGGY]  filteredNextT  >  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextT  >  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextT  >  t)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    scaledH[k]    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
177	[BUG]  [BUGGY]  if(t  >  hNew)  {  for(int  k  =  0;  k  <  stageSize;  ++k)  {  scaledH[k]  =  hNew;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(t  >  hNew)  {  for(int  k  =  0;  k  <  stageSize;  ++k)  {  scaledH[k]  =  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(t  >  hNew)  {  for(int  k  =  0;  k  <  stageSize;  ++k)  {  scaledH[k]  =  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    scaledH[k]    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
178	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
179	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
180	[BUG]  [BUGGY]  firstTime  =  firstTime  +  stepSize;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  firstTime  +  stepSize;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  firstTime  +  stepSize;	  firstTime    =    hNew    +    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
181	[BUG]  [BUGGY]  firstTime  =  hNew  +  stageSize;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  hNew  +  stageSize;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  hNew  +  stageSize;	  firstTime    =    hNew    +    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
182	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  if(hNew    ==    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
183	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[	  if(hNew    ==    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
184	[BUG]  [BUGGY]  secondTime  -=  hNew;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  -=  hNew;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  -=  hNew;	  secondTime    =    null;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
185	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!firstTime)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!firstTime)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!firstTime)  {  return;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!hNew)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!hNew)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!hNew)  {  return;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
188	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
189	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  yDotK.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  yDotK.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  yDotK.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ySize.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  ySize.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  ySize.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
191	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
192	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
193	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
194	[BUG]  [BUGGY]  while(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  while(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	while(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!hNew)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!hNew)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  if(!hNew)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
196	[BUG]  [BUGGY]  EmbeddedRungeKuttaIntegrator.initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  EmbeddedRungeKuttaIntegrator.initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	EmbeddedRungeKuttaIntegrator.initializeStep(hNew,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
198	[BUG]  [BUGGY]  if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }	  if(hNew    >    maxGrowth)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k][k];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
199	[BUG]  [BUGGY]  if(hNew  ==  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }	  if(hNew    >    maxGrowth)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k][k];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
200	[BUG]  [BUGGY]  if(hNew)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
201	[BUG]  [BUGGY]  if(hNew)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew)  {  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  return;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
202	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!hNew)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!hNew)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  stages;  ++k)  {  if(!hNew)  {  return;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scalAbsoluteTolerance.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scalAbsoluteTolerance.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
205	[BUG]  [BUGGY]  firstTime  =  System.currentTimeMillis()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  System.currentTimeMillis()  -  1;	  firstTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
206	[BUG]  [BUGGY]  firstTime  =  System.currentTimeMillis()  /  1000;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  System.currentTimeMillis()  /  1000;	  firstTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
207	[BUG]  [BUGGY]  firstTime  =  System.currentTimeMillis()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  System.currentTimeMillis()  +  1;	  firstTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
208	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
209	[BUG]  [BUGGY]  if(firstTime  ==  false)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  false)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  false)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
210	[BUG]  [BUGGY]  if(firstTime  ==  false)  {  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  false)  {  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  false)  {  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
211	[BUG]  [BUGGY]  if(firstTime  ==  false)  {  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  false)  {  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  false)  {  if(hNew!=  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
212	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(hNew    ==    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
213	[BUG]  [BUGGY]  filteredNextIsLast  =  filteredNextIsLast;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  filteredNextIsLast;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  filteredNextIsLast;	  if(hNew    ==    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
214	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
215	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
216	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
217	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
218	[BUG]  [BUGGY]  firstTime  =  hNew.doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  hNew.doubleValue()  +  1;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  hNew.doubleValue()  +  1;	  firstTime    =    hNew.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
219	[BUG]  [BUGGY]  secondTime  =  hNew.doubleValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  =  hNew.doubleValue();  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  =  hNew.doubleValue();	  firstTime    =    hNew.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
220	[BUG]  [BUGGY]  firstTime  =  hNew.doubleValue()  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  hNew.doubleValue()  +  stepStart;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  hNew.doubleValue()  +  stepStart;	  firstTime    =    hNew.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yTmp;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yTmp;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yFields;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
222	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hNew.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yDot.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yDot.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yDot.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
227	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  y0.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
229	[BUG]  [BUGGY]  firstTime  =  firstTime  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  firstTime  +  stepStart;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  firstTime  +  stepStart;	  firstTime    =    hNew    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
230	[BUG]  [BUGGY]  firstTime  =  firstTime  +  hNew;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  firstTime  +  hNew;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  firstTime  +  hNew;	  firstTime    =    hNew    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!firstTime)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!firstTime)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  firstTime;  ++i)  {  if(!firstTime)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  firstTime;  ++i)  {  if(!firstTime)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  firstTime;  ++i)  {  if(!firstTime)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!firstTime)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
233	[BUG]  [BUGGY]  filteredNextIsLast  =  hNew  +  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  hNew  +  2;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  hNew  +  2;	  filteredNextIsLast    =    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
234	[BUG]  [BUGGY]  filteredNextIsLast  =  firstTime  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  firstTime  +  stepStart;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  firstTime  +  stepStart;	  filteredNextIsLast    =    hNew    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
235	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
236	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastM  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastM  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastM	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
237	[BUG]  [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastM  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastM  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastM	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
238	[BUG]  [BUGGY]  int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ySize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  ySize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  ySize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
240	[BUG]  [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
241	[BUG]  [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
242	[BUG]  [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  Stage.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  Stage.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime)  {  for(int  k  =  1;  k  <  Stage.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
243	[BUG]  [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  Stages.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  Stages.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime)  {  for(int  k  =  1;  k  <  Stages.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
244	[BUG]  [BUGGY]  secondTime  =  Math.max(secondTime,  error);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  =  Math.max(secondTime,  error);  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  =  Math.max(secondTime,  error);	  secondTime    =    error;    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
245	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
246	[BUG]  [BUGGY]  filteredNextIsLast  =  nextIsLast  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  nextIsLast  +  1;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  nextIsLast  +  1;	  filteredNextIsLast    =    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
247	[BUG]  [BUGGY]  filteredNextIsLast  =  hNew  +  3;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  hNew  +  3;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  hNew  +  3;	  filteredNextIsLast    =    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
248	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
253	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
254	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
255	[BUG]  [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.	  if(hNew    ==    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
256	[BUG]  [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastM  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastM  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastM	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
257	[BUG]  [BUGGY]  firstTime  =  nextIsLast  +  hNew;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  nextIsLast  +  hNew;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  nextIsLast  +  hNew;	  firstTime    =    hNew    +    filteredNextIsLast;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
258	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
259	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
260	[BUG]  [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
261	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
262	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
263	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  a.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  a.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  a.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
264	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
265	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scalAbsoluteTolerance.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
268	[BUG]  [BUGGY]  if(firstTime  ==  false)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  false)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  false)  {  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  throw  new  IllegalArgumentException( " ");  }	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
269	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
270	[BUG]  [BUGGY]  filteredNextIsLast  =  i;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  i;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  i;	  filteredNextIsLast    =    error;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
271	[BUG]  [BUGGY]  firstTime  =  hNew  +  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  hNew  +  stepStart  +  1;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  hNew  +  stepStart  +  1;	  firstTime    =    hNew    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
272	[BUG]  [BUGGY]  if(filteredNextIsLast!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast!=  null)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  Stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  Stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  Stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
276	[BUG]  [BUGGY]  int  stages  =  1;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  stages  =  1;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  stages  =  1;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
277	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  if(hNew    ==    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
278	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  if(hNew    ==    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
279	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  if(hNew    ==    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
280	[BUG]  [BUGGY]  filteredNextIsLast  =  false,  secondTime  =  true;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  false,  secondTime  =  true;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  false,  secondTime  =  true;	  filteredNextIsLast    =    false,    firstTime    =    false;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
281	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k][k];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k][k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k][k];  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k][k];    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
282	[BUG]  [BUGGY]  filteredNextIsLast  =  error  +  nextIsLast;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  error  +  nextIsLast;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  error  +  nextIsLast;	  filteredNextIsLast    =    hNew    +    error;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
283	[BUG]  [BUGGY]  filteredNextIsLast  =  errors  +  hNew;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  errors  +  hNew;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  errors  +  hNew;	  filteredNextIsLast    =    hNew    +    error;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  if(filteredNextIsLast)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y0.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
287	[BUG]  [BUGGY]  escapedNextIsLast  =  false;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  escapedNextIsLast  =  false;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	escapedNextIsLast  =  false;	  eredNextIsLast    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteSize.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteSize.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsoluteSize.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
291	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
293	[BUG]  [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
294	[BUG]  [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
295	[BUG]  [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ".);  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
296	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k]  *  hNew;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k]  *  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k]  *  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k]    *    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
297	[BUG]  [BUGGY]  if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k]  *  hNew;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k]  *  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k]  *  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k]    *    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
298	[BUG]  [BUGGY]  if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k][k];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k][k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k][k];  }	  if(hNew    >    maxGrowth)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k][k];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
299	[BUG]  [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.	  if(hNew    ==    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
300	[BUG]  [BUGGY]  firstTime  =  hNew  +  factor;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  hNew  +  factor;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  hNew  +  factor;	  firstTime    =    hNew    +    error;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
301	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
302	[BUG]  [BUGGY]  if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
303	[BUG]  [BUGGY]  if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yFields);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yFields);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yFields);  }	  for(int    i    =    0;    i    <    yFields;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
305	[BUG]  [BUGGY]  secondTime  =  hNew  +  error;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  =  hNew  +  error;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  =  hNew  +  error;	  secondTime    =    hNew;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
306	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
308	[BUG]  [BUGGY]  int  stages  =  1;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  stages  =  1;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  stages  =  1;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
309	[BUG]  [BUGGY]  firstTime  =  i;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  i;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  i;	  firstTime    =    error;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
311	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  filteredNextIsLast;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    1;    k    <    filteredNextIsLast;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yRelativeTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yRelativeTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yRelativeTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yFieldSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yFieldSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yFieldSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
318	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
319	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
320	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
321	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
322	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.	  if(firstTime    ==    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
323	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs	  if(firstTime    ==    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
324	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(hNew    ==    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
325	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
326	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  hAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
328	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
329	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteSize.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteSize.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsoluteSize.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
330	[BUG]  [BUGGY]  hNew  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  hNew  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	hNew  =  initializeStep(x,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
331	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
332	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
333	[BUG]  [BUGGY]  if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(t  >  hNew)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k];  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k];    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
334	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k];  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k];  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k];    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
335	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!firstTime)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!firstTime)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  if(!firstTime)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!firstTime)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
336	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  a.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  a.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  a.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
337	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(hNew    ==    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
338	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(hNew    ==    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
339	[BUG]  [BUGGY]  firstTime  =  hNew  *  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  hNew  *  1;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  hNew  *  1;	  firstTime    =    hNew    +    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
340	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsolute.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
341	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsolutes.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
342	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteSize.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yAbsoluteSize.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yAbsoluteSize.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
343	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  hNew.length;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
344	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
345	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
346	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
347	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
348	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
349	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
350	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
351	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
352	[BUG]  [BUGGY]  int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
353	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  if(hNew    ==    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
354	[BUG]  [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	  if(hNew    ==    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
355	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
356	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
357	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  if(hNew!=    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
358	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  yFields.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
360	[BUG]  [BUGGY]  if(t  >  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(t  >  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(t  >  0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    scaledH[k]    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
361	[BUG]  [BUGGY]  if(t  >  y0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(t  >  y0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(t  >  y0)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    scaledH[k]    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
362	[BUG]  [BUGGY]  firstTime  -=  hNew  +  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  -=  hNew  +  2;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  -=  hNew  +  2;	  firstTime    -=    hNew;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stages.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
364	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  0;  k  <  filteredNextIsLast;  ++k)  {  if(filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
365	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
366	[BUG]  [BUGGY]  if(firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
367	[BUG]  [BUGGY]  if(firstTime)  {  for(int  i  =  0;  i  <  Stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime)  {  for(int  i  =  0;  i  <  Stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime)  {  for(int  i  =  0;  i  <  Stage.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
368	[BUG]  [BUGGY]  if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k];  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  maxGrowth)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  vecAbsoluteTolerance[k];  }	  if(hNew    >    maxGrowth)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k];    }    	non-compiled	[CE]  ';'  expected	69	None	replace
369	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
370	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hSize;  ++i)  {  scale[i]  =  hNew  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
371	[BUG]  [BUGGY]  SecondTime  =  t;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  SecondTime  =  t;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	SecondTime  =  t;	  SecondTime    =    false;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
372	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
373	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
374	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
375	[BUG]  [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(firstTime  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.	  if(firstTime    ==    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
376	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
377	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  yTmp.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    yTmp.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
379	[BUG]  [BUGGY]  if(!firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(!firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(!firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
380	[BUG]  [BUGGY]  int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    scaledH[k]    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
381	[BUG]  [BUGGY]  if(t  >  a)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(t  >  a)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(t  >  a)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  scaledH[k]  =  hNew;  }	  if(hNew    >    t)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    scaledH[k]    =    hNew;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
382	[BUG]  [BUGGY]  secondTime  =  Math.max(relativeTolerance,  hNew);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  =  Math.max(relativeTolerance,  hNew);  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  =  Math.max(relativeTolerance,  hNew);	  secondTime    =    error;    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
383	[BUG]  [BUGGY]  hNew  =  initializeStep(stepStart,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  hNew  =  initializeStep(stepStart,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	hNew  =  initializeStep(stepStart,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
384	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(!filteredNextIsLast)  {  for(int  k  =  1;  k  <  y0.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
385	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  vecAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
386	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    yAbsoluteTolerance.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
387	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
388	[BUG]  [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMa	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
389	[BUG]  [BUGGY]  int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  i  =  0;  i  <  hNew;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
390	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  i  =  0;  i  <  y.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
391	[BUG]  [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.	  if(hNew    ==    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
392	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
393	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
394	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
395	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  yFields;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  yFields;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  yFields;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    yFields;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
396	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
397	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stages;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
398	[BUG]  [BUGGY]  int  scale  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  scale  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  scale  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(y[i]);	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
399	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stageSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stageSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stageSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
400	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stageSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stageSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stageSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
401	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stageSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stageSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stageSize;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    hSize;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
402	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  s.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  s.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance[i]  *  FastMath.abs(yTmp);  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance[i]    *    FastMath.abs(yTmp);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
403	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(hNew    ==    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
404	[BUG]  [BUGGY]  filteredNextIsLast  =  hNew  *  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  hNew  *  stepStart;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  hNew  *  stepStart;	  filteredNextIsLast    =    hNew    +    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
405	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  steps.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  steps.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  steps.length;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
406	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  vecAbsoluteTolerance.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
407	[BUG]  [BUGGY]  int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  k  =  1;  k  <  stages;  ++k)  {  if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
408	[BUG]  [BUGGY]  if(filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
409	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(!filteredNextIsLast)  {  for(int  i  =  1;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
410	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    1;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
411	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
412	[BUG]  [BUGGY]  secondTime  =  t;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  secondTime  =  t;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	secondTime  =  t;	  secondTime    =    false;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
413	[BUG]  [BUGGY]  int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  k  =  0;  k  <  stages;  ++k)  {  sum  +=  scalAbsoluteTolerance[k][k];  }	  if(hNew    >    maxGrowth)    {    for(int    k    =    0;    k    <    stages;    ++k)    {    sum    +=    scalAbsoluteTolerance[k][k];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
414	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }	  if(hNew!=    null)    {    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
415	[BUG]  [BUGGY]  if(hNew)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
416	[BUG]  [BUGGY]  if(hNew  >  firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  >  firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  >  firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
417	[BUG]  [BUGGY]  if(hNew)  {  for(int  i  =  0;  i  <  stage;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew)  {  for(int  i  =  0;  i  <  stage;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew)  {  for(int  i  =  0;  i  <  stage;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
418	[BUG]  [BUGGY]  if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
419	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ".);  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
420	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!firstTime)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!firstTime)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stage.length;  ++i)  {  if(!firstTime)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!firstTime)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
421	[BUG]  [BUGGY]  hNew  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  hNew  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	hNew  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
422	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  k  =  1;  k  <  hNew.length;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    1;    k    <    hNew.length;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
423	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  1;  i  <  y.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    y.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
424	[BUG]  [BUGGY]  firstTime  =  secondTime  +  filteredNextIsLast;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  secondTime  +  filteredNextIsLast;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  secondTime  +  filteredNextIsLast;	  firstTime    =    hNew    +    filteredNextIsLast;    	non-compiled	[CE]  ';'  expected	64	None	replace
425	[BUG]  [BUGGY]  if(hNew  ==  firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  if(!filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	111	None	replace
426	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	106	None	replace
427	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  hNew;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	106	None	replace
428	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stageSize;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  stageSize;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  stageSize;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    hNew;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	106	None	replace
429	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  stage.length;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
430	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
431	[BUG]  [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
432	[BUG]  [BUGGY]  if(hNew  ==  firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  firstTime)  {  for(int  i  =  0;  i  <  stages;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  if(!filteredNextIsLast)    {    for(int    i    =    0;    i    <    stages;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
433	[BUG]  [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew!=  null)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew!=  null)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  if(hNew    ==    null)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
434	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  k  =  1;  k  <  stageSize;  ++k)  {  if(!filteredNextIsLast)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    k    =    1;    k    <    y0.length;    ++k)    {    if(!filteredNextIsLast)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	14	None	replace
435	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  scalAbsoluteTolerance.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  ';'  expected	51	None	replace
436	[BUG]  [BUGGY]  if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
437	[BUG]  [BUGGY]  if(hNew  >  firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  >  firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  >  firstTime)  {  for(int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
438	[BUG]  [BUGGY]  if(hNew)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew)  {  for(int  k  =  1;  k  <  stage;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  if(filteredNextIsLast)    {    for(int    k    =    1;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
439	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(!filteredNextIsLast)  {  for(int  k  =  0;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
440	[BUG]  [BUGGY]  if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }  else  {  System.arraycopy(y,  0,  filteredNextIsLast,  0,  hNew);  filteredNextIsLast  =  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }  else  {  System.arraycopy(y,  0,  filteredNextIsLast,  0,  hNew);  filteredNextIsLast  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }  else  {  System.arraycopy(y,  0,  filteredNextIsLast,  0,  hNew);  filteredNextIsLast  =  false;  }	  filteredNextIsLast    =    true;    	non-compiled	[CE]  ';'  expected	15	None	replace
441	[BUG]  [BUGGY]  if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }  else  {  for(int  i  =  0;  i  <  stages;  ++i)  {  scaledH[i]  =  hNew;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }  else  {  for(int  i  =  0;  i  <  stages;  ++i)  {  scaledH[i]  =  hNew;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }  else  {  for(int  i  =  0;  i  <  stages;  ++i)  {  scaledH[i]  =  hNew;  }	  filteredNextIsLast    =    true;    	non-compiled	[CE]  ';'  expected	15	None	replace
442	[BUG]  [BUGGY]  if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }  else  {  filteredNextIsLast  =  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }  else  {  filteredNextIsLast  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(filteredNextIsLast  ==  false)  {  filteredNextIsLast  =  true;  }  else  {  filteredNextIsLast  =  false;  }	  filteredNextIsLast    =    true;    	non-compiled	[CE]  ';'  expected	15	None	replace
443	[BUG]  [BUGGY]  filteredNextIsLast  =  hNew  *  stepSize;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  filteredNextIsLast  =  hNew  *  stepSize;  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	filteredNextIsLast  =  hNew  *  stepSize;	  filteredNextIsLast    =    hNew    +    stepSize;    	non-compiled	[CE]  ';'  expected	40	None	replace
444	[BUG]  [BUGGY]  hNew  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  hNew  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	hNew  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMath.abs(	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMath.abs(    	non-compiled	[CE]  ';'  expected	116	None	replace
445	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast.length;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast.length;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
446	[BUG]  [BUGGY]  firstTime  =  t;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  firstTime  =  t;  [BUGGY]      }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	firstTime  =  t;	  firstTime    =    error;    	non-compiled	[CE]  ';'  expected	7	None	replace
447	[BUG]  [BUGGY]  int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  true;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    true;    }    	non-compiled	[CE]  ';'  expected	97	None	replace
448	[BUG]  [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(!filteredNextIsLast)  {  for(int  i  =  0;  i  <  filteredNextIsLast;  ++i)  {  if(!filteredNextIsLast)  {  return;  }	  for(int    i    =    0;    i    <    filteredNextIsLast;    ++i)    {    if(!filteredNextIsLast)    {    return;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
449	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  for(int  i  =  0;  i  <  s.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	for(int  i  =  0;  i  <  s.length;  ++i)  {  scale[i]  =  hNew  +  scalAbsoluteTolerance  *  FastMath.abs(y[i]);  }	  for(int    i    =    0;    i    <    b.length;    ++i)    {    scale[i]    =    hNew    +    scalAbsoluteTolerance    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
450	[BUG]  [BUGGY]  int  scale  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  scale  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  scale  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);	  for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    vecAbsoluteTolerance[i]    +    vecRelativeTolerance[i]    *    FastMath.abs(y[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
451	[BUG]  [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	if(hNew  ==  null)  {  firstTime  =  false;  for(int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  scalRelativeTolerance[i]  *  FastMa	  if(hNew!=    null)    {    firstTime    =    false;    for(int    i    =    0;    i    <    scale.length;    ++i)    {    scale[i]    =    scalAbsoluteTolerance[i]    +    scalRelativeTolerance[i]    *    FastMa    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
452	[BUG]  [BUGGY]  int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  scalAbsoluteTolerance  +  scalRelativeTolerance  *  FastMath.abs(y[i]);  }  }  else  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  scale[i]  =  vecAbsoluteTolerance[i]  +  vecRelativeTolerance[i]  *  FastMath.abs(y[i]);  }  }  hNew  =  initializeStep(forward,  getOrder(),  scale,  stepStart,  y,  yDotK[0],  yTmp,  yDotK[1]);      [BUGGY]  int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }  [BUGGY]      firstTime  =  false;  }  stepSize  =  hNew;  for  (int  k  =  1;  k  <  stages;  ++k)  {  for  (int  j  =  0;  j  <  y0.length;  ++j)  {  double  sum  =  a[k-1][0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  k;  ++l)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	246	246	1	replace	int  k  =  1;  k  <  stages;  ++k)  {  if(!filteredNextIsLast)  {  firstTime  =  false;  }	  for(int    k    =    0;    k    <    stages;    ++k)    {    if(!filteredNextIsLast)    {    firstTime    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
