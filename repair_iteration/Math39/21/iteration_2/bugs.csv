bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  errors,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y,  errors,  t);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y,  errors,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
2	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  error,  1);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y,  error,  1);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y,  error,  1);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
3	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepStart  +  stepEnd);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepStart  +  stepEnd);  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepStart  +  stepEnd);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
4	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepEnd  -  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepEnd  -  stepStart);  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepEnd  -  stepStart);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
5	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepStart  -  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepStart  -  stepStart);  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepStart  -  stepStart);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
6	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepEnd  +  stepStart);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepEnd  +  stepStart);  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	int  stepStart  =  Math.min(stepStart,  error);  isLastStep  =  Math.abs(stepEnd  +  stepStart);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
7	[BUG]  [BUGGY]  while  (isLastStep  <  1.0  &&  error)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while  (isLastStep  <  1.0  &&  error)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while  (isLastStep  <  1.0  &&  error)  {	  while    (error    <    1.0    &&    isLastStep)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
8	[BUG]  [BUGGY]  while  (error  <  1.0  &&  isLastStep  &&  firstTime)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while  (error  <  1.0  &&  isLastStep  &&  firstTime)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while  (error  <  1.0  &&  isLastStep  &&  firstTime)  {	  while    (error    <    1.0    &&    isLastStep)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
9	[BUG]  [BUGGY]  while(t  <  1.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(t  <  1.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(t  <  1.0)  {	  while(error    <    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
10	[BUG]  [BUGGY]  while(equations.size()  <  1.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(equations.size()  <  1.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(equations.size()  <  1.0)  {	  while(error    <    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
11	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  error,  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  error,  y0,  t);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  error,  y0,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
12	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  scale,  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  scale,  y0,  t);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  scale,  y0,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
13	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y1,  error,  t);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y1,  error,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
14	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  scaledH);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  scaledH);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y0,  error,  scaledH);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
15	[BUG]  [BUGGY]  while(t  >  1.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(t  >  1.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(t  >  1.0)  {	  while(t    >=    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
16	[BUG]  [BUGGY]  while(t  >=  0.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(t  >=  0.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(t  >=  0.0)  {	  while(t    >=    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
17	[BUG]  [BUGGY]  while(t  >=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(t  >=  0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(t  >=  0)  {	  while(t    >=    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
18	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  errors);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y,  errors);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y,  errors);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
19	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
20	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  true;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
21	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  t);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  t);  isLastStep  =  true;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y0,  error,  t);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
22	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  true;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y1,  error);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
23	[BUG]  [BUGGY]  initIntegration(entities.getTime(),  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(entities.getTime(),  y0,  t);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(entities.getTime(),  y0,  t);  isLastStep  =  false;	      initIntegration(entities.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
24	[BUG]  [BUGGY]  initIntegration(entities.getTime(),  y0,  error,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(entities.getTime(),  y0,  error,  t);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(entities.getTime(),  y0,  error,  t);  isLastStep  =  false;	      initIntegration(entities.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
25	[BUG]  [BUGGY]  initIntegration(entities.getTime(),  y1,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(entities.getTime(),  y1,  error);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(entities.getTime(),  y1,  error);  isLastStep  =  false;	      initIntegration(entities.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
26	[BUG]  [BUGGY]  while(t  <  =  1.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(t  <  =  1.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(t  <  =  1.0)  {	  while(error    <    =    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
27	[BUG]  [BUGGY]  while(error  <  =  1.0  &&  isLastStep)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(error  <  =  1.0  &&  isLastStep)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(error  <  =  1.0  &&  isLastStep)  {	  while(error    <    =    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
28	[BUG]  [BUGGY]  while(j  <  =  1.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(j  <  =  1.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(j  <  =  1.0)  {	  while(error    <    =    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
29	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  x,  y);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y0,  x,  y);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y0,  x,  y);  isLastStep  =  false;	      initIntegration(equations.getTime(),    x,    y);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
30	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  x);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y,  x);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y,  x);  isLastStep  =  false;	      initIntegration(equations.getTime(),    x,    y);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
31	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  x,  y);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y,  x,  y);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y,  x,  y);  isLastStep  =  false;	      initIntegration(equations.getTime(),    x,    y);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
32	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x,  y,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  x,  y,  t);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  x,  y,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    x,    y);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
33	[BUG]  [BUGGY]  while  (error  >  1.0  &&  isLastStep)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while  (error  >  1.0  &&  isLastStep)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while  (error  >  1.0  &&  isLastStep)  {	  while    (error    >    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
34	[BUG]  [BUGGY]  while(error  >  0.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(error  >  0.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(error  >  0.0)  {	  while    (error    >    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
35	[BUG]  [BUGGY]  while(error  <  =  0.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(error  <  =  0.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(error  <  =  0.0)  {	  while(error    >=    0.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
36	[BUG]  [BUGGY]  while(j  >=  0.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(j  >=  0.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(j  >=  0.0)  {	  while(error    >=    0.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
37	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  scale);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  scale);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y0,  error,  scale);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
38	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  3);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  3);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y0,  error,  3);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
39	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  1);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  1);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y0,  error,  1);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
40	[BUG]  [BUGGY]  while(error  <  0.0  &&  isLastStep)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(error  <  0.0  &&  isLastStep)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(error  <  0.0  &&  isLastStep)  {	  while    (error    <    1.0    &&    isLastStep)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
41	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  t);  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y0,  error,  t);	      initIntegration(equations.getTime(),    y,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
42	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  error,  scale,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y,  error,  scale,  t);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y,  error,  scale,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
43	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  errors,  y0,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  errors,  y0,  t);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  errors,  y0,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
44	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x,  y,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  x,  y,  error);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  x,  y,  error);  isLastStep  =  false;	      initIntegration(equations.getTime(),    x,    y);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
45	[BUG]  [BUGGY]  while(error  <  0.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(error  <  0.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(error  <  0.0)  {	  while(error    >=    0.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
46	[BUG]  [BUGGY]  filteredNextIsLast  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  filteredNextIsLast  =  false;  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	filteredNextIsLast  =  false;	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
47	[BUG]  [BUGGY]  filteredNextIsLast  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  filteredNextIsLast  =  true;  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	filteredNextIsLast  =  true;	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
48	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(error,  scale[0],  t);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  filteredNextIsLast  =  Math.min(error,  scale[0],  t);  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	filteredNextIsLast  =  Math.min(error,  scale[0],  t);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
49	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.abs(error);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  filteredNextIsLast  =  Math.abs(error);  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	filteredNextIsLast  =  Math.abs(error);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
50	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x,  y,  error);  isLastStep  =  true;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  x,  y,  error);  isLastStep  =  true;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  x,  y,  error);  isLastStep  =  true;	      initIntegration(equations.getTime(),    y0,    error);    isLastStep    =    true;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
51	[BUG]  [BUGGY]  while(t  >=  1.0  &&  isLastStep)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(t  >=  1.0  &&  isLastStep)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(t  >=  1.0  &&  isLastStep)  {	  while(t    >=    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
52	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  error,  nextT);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y,  error,  nextT);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y,  error,  nextT);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
53	[BUG]  [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  int  stepStart  =  Math.min(stepStart,  error);  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	int  stepStart  =  Math.min(stepStart,  error);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
54	[BUG]  [BUGGY]  filteredNextIsLast  =  Math.min(error,  t.doubleValue());  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  filteredNextIsLast  =  Math.min(error,  t.doubleValue());  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	filteredNextIsLast  =  Math.min(error,  t.doubleValue());	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
55	[BUG]  [BUGGY]  while(isLastStep  >  1.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(isLastStep  >  1.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(isLastStep  >  1.0)  {	  while    (error    >    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
56	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y,  t,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y,  t,  error);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y,  t,  error);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
57	[BUG]  [BUGGY]  while(t  <  1.0  &&  isLastStep)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(t  <  1.0  &&  isLastStep)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(t  <  1.0  &&  isLastStep)  {	  while    (error    <    1.0    &&    isLastStep)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
58	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  x,  y0);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  x,  y0);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  x,  y0);  isLastStep  =  false;	      initIntegration(equations.getTime(),    x,    y);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
59	[BUG]  [BUGGY]  while(error  <  10.0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  while(error  <  10.0)  {  [BUGGY]      if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	while(error  <  10.0)  {	  while(error    <    1.0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
60	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  nextT);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y0,  error,  nextT);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y0,  error,  nextT);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
61	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y0,  stepStart,  error);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y0,    error,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
62	[BUG]  [BUGGY]  initIntegration(equations.getTime(),  y1,  t);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(equations.getTime(),  y1,  t);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(equations.getTime(),  y1,  t);  isLastStep  =  false;	      initIntegration(equations.getTime(),    y,    t);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
63	[BUG]  [BUGGY]  initIntegration(entities.getTime(),  x,  y,  error);  isLastStep  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    initIntegration(equations.getTime(),  y0,  t);  isLastStep  =  false;  do  {  interpolator.shift();  double  error  =  10;    [BUGGY]  initIntegration(entities.getTime(),  x,  y,  error);  isLastStep  =  false;  [BUGGY]    while  (error  >=  1.0)  {  if  (firstTime  ||  !fsal)  {  computeDerivatives(stepStart,  y,  yDotK[0]);  }  if  (firstTime)  {  final  double[]  scale  =  new  double[mainSetDimension];  if  (vecAbsoluteTolerance  ==  null)  {  for  (int  i  =  0;  i  <  scale.length;  ++i)  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  final  double  t  [VARIABLES]  ExpandableStatefulODE  equations  boolean  filteredNextIsLast  firstTime  forward  fsal  nextIsLast  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yDotTmp  yTmp  double  error  exp  factor  filteredNextT  hNew  maxGrowth  maxStep  minReduction  minStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  sum  t  double[][]  a  yDotK  RungeKuttaStepInterpolator  interpolator  prototype  int  i  j  k  l  stages  	projects/Math39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.3333333333333333	226	226	1	replace	initIntegration(entities.getTime(),  x,  y,  error);  isLastStep  =  false;	      initIntegration(entities.getTime(),    y0,    error);    isLastStep    =    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
