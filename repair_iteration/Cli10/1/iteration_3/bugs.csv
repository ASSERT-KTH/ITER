bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption)  {  iterator.remove();  Iterator  iterator  =  opts.iterator();  }  [CE]  not  a  statement  [FE]                UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  if(stopAtNonOption)  {  iterator.remove();  Iterator  iterator  =  opts.iterator();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	if(stopAtNonOption)  {  iterator.remove();  Iterator  iterator  =  opts.iterator();  }	          iterator.remove();    Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  not  a  statement	18	None	replace
2	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(option);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(option);	  Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  not  a  statement	64	None	replace
3	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(t,  arguments);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  not  a  statement	27	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(options,  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(options,  str);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  not  a  statement	27	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(options,  stopAtNonOption);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  not  a  statement	27	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  t);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(options,  t);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(options,  t);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  not  a  statement	27	None	replace
7	[BUG]  [BUGGY]  Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);	  Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(str);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( "- "))  {  return  str;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( "- "))  {  return  str;  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( "- "))  {  return  str;  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    return    str;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
9	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  return  str;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  return  str;  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  return  str;  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    return    str;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
10	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()!=  0)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()!=  0)  {  cmd.addArg(str);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()!=  0)  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.length()    ==    0)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
11	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.length()    ==    0)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
12	[BUG]  [BUGGY]  Iterator  iterator  =  options.getOptions().iterator();  [CE]  not  a  statement  [FE]              UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  options.getOptions().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  options.getOptions().iterator();	          iterator.remove();    Iterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  not  a  statement	17	None	replace
13	[BUG]  [BUGGY]  if(stopAtNonOption)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }  [CE]  not  a  statement  [FE]                UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  if(stopAtNonOption)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	if(stopAtNonOption)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }	          iterator.remove();    Iterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  not  a  statement	17	None	replace
14	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }  [CE]  not  a  statement  [FE]                  UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  if(options.getOptions()!=  null)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	if(options.getOptions()!=  null)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }	          iterator.remove();    Iterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  not  a  statement	17	None	replace
15	[BUG]  [BUGGY]  return  arguments.trim();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  arguments.trim();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  arguments.trim();	  return    str.trim();    	non-compiled	[CE]  not  a  statement	57	None	replace
16	[BUG]  [BUGGY]  iterator.setOption(stopAtNonOption);  [CE]  not  a  statement  [FE]        UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.setOption(stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.setOption(stopAtNonOption);	  iterator.setAtNonOption(stopAtNonOption);    	non-compiled	[CE]  not  a  statement	89	None	replace
17	[BUG]  [BUGGY]  String  str  =  options.toString();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  String  str  =  options.toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	String  str  =  options.toString();	  String    str    =    cmd.toString();    	non-compiled	[CE]  not  a  statement	44	None	replace
18	[BUG]  [BUGGY]  String  str  =  t.toString();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  String  str  =  t.toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	String  str  =  t.toString();	  String    str    =    cmd.toString();    	non-compiled	[CE]  not  a  statement	44	None	replace
19	[BUG]  [BUGGY]  String  str  =  option.toString();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  String  str  =  option.toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	String  str  =  option.toString();	  String    str    =    cmd.toString();    	non-compiled	[CE]  not  a  statement	44	None	replace
20	[BUG]  [BUGGY]  return  this.cmd,  cmd.getValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  this.cmd,  cmd.getValue();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  this.cmd,  cmd.getValue();	  return    this.cmd.getValue();    	non-compiled	[CE]  	20	None	replace
21	[BUG]  [BUGGY]  return  this.cmd,  options.getValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  this.cmd,  options.getValue();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  this.cmd,  options.getValue();	  return    this.cmd.getValue();    	non-compiled	[CE]  	20	None	replace
22	[BUG]  [BUGGY]          iterator.remove();    iterator.remove();  iterator.remove();  iterator.remove();  [CE]  illegal  start  of  expression  [FE]    UnsupportedOperationException    [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]          iterator.remove();    iterator.remove();  iterator.remove();  iterator.remove();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	                iterator.remove();        iterator.remove();    iterator.remove();  iterator.remove();	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
23	[BUG]  [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator.remove();  iterator.remove();  [CE]  ';'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator.remove();  iterator.remove();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	                iterator.remove();        iterator.remove();    Iterator  iterator.remove();  iterator.remove();	  	non-compiled	[CE]  ';'  expected	13	None	add
24	[BUG]  [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator  =  options.iterator();  iterator.remove();  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException    [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator  =  options.iterator();  iterator.remove();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	                iterator.remove();        iterator.remove();    Iterator  iterator  =  options.iterator();  iterator.remove();	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
25	[BUG]  [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator  =  options.keySet().iterator();  iterator.remove();  [CE]  illegal  start  of  expression  [FE]          UnsupportedOperationException    [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator  =  options.keySet().iterator();  iterator.remove();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	                iterator.remove();        iterator.remove();    Iterator  iterator  =  options.keySet().iterator();  iterator.remove();	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
26	[BUG]  [BUGGY]  return  options.keySet();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.keySet();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.keySet();	  return    options;    	non-compiled	[CE]  not  a  statement	6	None	replace
27	[BUG]  [BUGGY]  return  options.clone();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.clone();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.clone();	  return    options;    	non-compiled	[CE]  not  a  statement	6	None	replace
28	[BUG]  [BUGGY]  Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  }	  Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(str);    }    	non-compiled	[CE]  not  a  statement	2	None	replace
29	[BUG]  [BUGGY]  return  options.toString()  +  arguments.length;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.toString()  +  arguments.length;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.toString()  +  arguments.length;	  return    options.toString();    	non-compiled	[CE]  not  a  statement	75	None	replace
30	[BUG]  [BUGGY]  options.addArg(arguments[t],  str);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments[t],  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments[t],  str);	  options.addArg(arguments[t]);    	non-compiled	[CE]  not  a  statement	71	None	replace
31	[BUG]  [BUGGY]  options.addArg(arguments[t].trim());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments[t].trim());  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments[t].trim());	  options.addArg(arguments[t]);    	non-compiled	[CE]  not  a  statement	71	None	replace
32	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(t);  if(option  ==  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
33	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  cmd.addArg(opt);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  cmd.addArg(opt);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  cmd.addArg(opt);  }	  Option    option    =    options.getOption(str);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
34	[BUG]  [BUGGY]  options.getOption(t);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.getOption(t);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.getOption(t);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
35	[BUG]  [BUGGY]  return  iterator.t  &&  arguments.length  >  0;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.t  &&  arguments.length  >  0;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.t  &&  arguments.length  >  0;	  return    iterator.t;    	non-compiled	[CE]  not  a  statement	68	None	replace
36	[BUG]  [BUGGY]  return  iterator.t,  arguments;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.t,  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.t,  arguments;	  return    iterator.t;    	non-compiled	[CE]  	68	None	replace
37	[BUG]  [BUGGY]  return  iterator.t  &&  options.size()  >  0;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.t  &&  options.size()  >  0;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.t  &&  options.size()  >  0;	  return    iterator.t;    	non-compiled	[CE]  not  a  statement	68	None	replace
38	[BUG]  [BUGGY]  iterator.clear();  Iterator  iterator  =  options.keySet().iterator();  [CE]  not  a  statement  [FE]            UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.clear();  Iterator  iterator  =  options.keySet().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.clear();  Iterator  iterator  =  options.keySet().iterator();	          iterator.remove();    Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  not  a  statement	16	None	replace
39	[BUG]  [BUGGY]  String  str  =  options.getOptions().toString();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  String  str  =  options.getOptions().toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	String  str  =  options.getOptions().toString();	  return    options.getOptions().toString();    	non-compiled	[CE]  not  a  statement	88	None	replace
40	[BUG]  [BUGGY]  return  options.getOptions().trim();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.getOptions().trim();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.getOptions().trim();	  return    options.getOptions().toString();    	non-compiled	[CE]  not  a  statement	88	None	replace
41	[BUG]  [BUGGY]  iterator.addArg(arguments[t],  str);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.addArg(arguments[t],  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.addArg(arguments[t],  str);	  iterator.addArg(arguments[t]);    	non-compiled	[CE]  not  a  statement	86	None	replace
42	[BUG]  [BUGGY]  iterator.addArg(arguments[t].toLowerCase());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.addArg(arguments[t].toLowerCase());  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.addArg(arguments[t].toLowerCase());	  iterator.addArg(arguments[t]);    	non-compiled	[CE]  not  a  statement	86	None	replace
43	[BUG]  [BUGGY]  return  arguments.toString()  + ": "  +  cmd;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  arguments.toString()  + ": "  +  cmd;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  arguments.toString()  + ": "  +  cmd;	  return    cmd.toString()    +   ":   "    +    arguments;    	non-compiled	[CE]  not  a  statement	46	None	replace
44	[BUG]  [BUGGY]  return  cmd.toString()  + ": "  +  str;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.toString()  + ": "  +  str;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.toString()  + ": "  +  str;	  return    cmd.toString()    +   ":   "    +    arguments;    	non-compiled	[CE]  not  a  statement	46	None	replace
45	[BUG]  [BUGGY]  return  cmd.toString()  + ": "  +  arguments,  stopAtNonOption;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.toString()  + ": "  +  arguments,  stopAtNonOption;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.toString()  + ": "  +  arguments,  stopAtNonOption;	  return    cmd.toString()    +   ":   "    +    arguments;    	non-compiled	[CE]  	46	None	replace
46	[BUG]  [BUGGY]  Iterator  iterator  =  properties.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  properties.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  properties.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }	  Iterator    iterator    =    opts.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
47	[BUG]  [BUGGY]  return  this.cmd.substring(0,  this.cmd.length()  -  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  this.cmd.substring(0,  this.cmd.length()  -  1);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  this.cmd.substring(0,  this.cmd.length()  -  1);	  return    this.cmd.trim();    	non-compiled	[CE]  not  a  statement	59	None	replace
48	[BUG]  [BUGGY]  return  this.cmd.substring(0,  this.cmd.length()  -  2);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  this.cmd.substring(0,  this.cmd.length()  -  2);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  this.cmd.substring(0,  this.cmd.length()  -  2);	  return    this.cmd.trim();    	non-compiled	[CE]  not  a  statement	59	None	replace
49	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(arguments,  stopAtNonOption);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(arguments,  stopAtNonOption);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  not  a  statement	12	None	replace
50	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  arguments);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(t,  arguments);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(t,  arguments);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  not  a  statement	12	None	replace
51	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  arguments);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(options,  arguments);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(options,  arguments);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  not  a  statement	12	None	replace
52	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str,  arguments);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(str,  arguments);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(str,  arguments);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  not  a  statement	12	None	replace
53	[BUG]  [BUGGY]  String  str  =  this.options.toString();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  String  str  =  this.options.toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	String  str  =  this.options.toString();	  return    this.options.toString();    	non-compiled	[CE]  not  a  statement	9	None	replace
54	[BUG]  [BUGGY]  return  this.options.getOptions().toString();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  this.options.getOptions().toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  this.options.getOptions().toString();	  return    this.options.toString();    	non-compiled	[CE]  not  a  statement	9	None	replace
55	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(options,  arguments);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOptions(options,  arguments);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOptions(options,  arguments);	  Option    cmd    =    options.getOptions(options);    	non-compiled	[CE]  not  a  statement	60	None	replace
56	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(options,  str);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOptions(options,  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOptions(options,  str);	  Option    cmd    =    options.getOptions(options);    	non-compiled	[CE]  not  a  statement	60	None	replace
57	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(opts);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOptions(opts);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOptions(opts);	  Option    cmd    =    options.getOptions(options);    	non-compiled	[CE]  not  a  statement	60	None	replace
58	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(arguments);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOptions(arguments);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOptions(arguments);	  Option    cmd    =    options.getOptions(options);    	non-compiled	[CE]  not  a  statement	60	None	replace
59	[BUG]  [BUGGY]  iterator.addArg(options);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.addArg(options);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.addArg(options);	  iterator.addArg(args);    	non-compiled	[CE]  not  a  statement	49	None	replace
60	[BUG]  [BUGGY]  Iterator  iterator  =  properties.iterator();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  properties.iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  properties.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  not  a  statement	31	None	replace
61	[BUG]  [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  this.opts.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  not  a  statement	31	None	replace
62	[BUG]  [BUGGY]  Iterator  iterator  =  properties.keySet().iterator();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  properties.keySet().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  properties.keySet().iterator();	  Iterator    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  not  a  statement	56	None	replace
63	[BUG]  [BUGGY]  if(options!=  null)  {  iterator.remove();  Iterator  iterator  =  options.iterator();  }  [CE]  not  a  statement  [FE]          UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  if(options!=  null)  {  iterator.remove();  Iterator  iterator  =  options.iterator();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	if(options!=  null)  {  iterator.remove();  Iterator  iterator  =  options.iterator();  }	          iterator.remove();    Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  not  a  statement	15	None	replace
64	[BUG]  [BUGGY]  iterator.clear();  Iterator  iterator  =  options.iterator();  [CE]  not  a  statement  [FE]            UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.clear();  Iterator  iterator  =  options.iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.clear();  Iterator  iterator  =  options.iterator();	          iterator.remove();    Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  not  a  statement	15	None	replace
65	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.clone();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.clone();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.clone();	  return(options    ==    null)?    null    :    options.getArgumentList();    	non-compiled	[CE]  not  a  statement	61	None	replace
66	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  option.getArgumentList();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  option.getArgumentList();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  option.getArgumentList();	  return(options    ==    null)?    null    :    options.getArgumentList();    	non-compiled	[CE]  not  a  statement	61	None	replace
67	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.toArray(options);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.toArray(options);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.toArray(options);	  return(options    ==    null)?    null    :    options.getArgumentList();    	non-compiled	[CE]  not  a  statement	61	None	replace
68	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  neededOptions.add(cmd);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  neededOptions.add(cmd);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  neededOptions.add(cmd);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    CommandLine    cmd    =(ArgumentLine)iterator.next();    if(!stopAtNonOption)    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
69	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  requiredOptions.add  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  requiredOptions.add  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  requiredOptions.add	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    CommandLine    cmd    =(ArgumentLine)iterator.next();    if(!stopAtNonOption)    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
70	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  requiredOptions.remove(cmd);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  requiredOptions.remove(cmd);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  requiredOptions.remove(cmd);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    CommandLine    cmd    =(ArgumentLine)iterator.next();    if(!stopAtNonOption)    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.options();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.options();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.options();	  return    options.options;    	non-compiled	[CE]  not  a  statement	73	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.options;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.options;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.options;	  return    options.options;    	non-compiled	[CE]  not  a  statement	73	None	replace
73	[BUG]  [BUGGY]  options  =  options.options;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options  =  options.options;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options  =  options.options;	  return    options.options;    	non-compiled	[CE]  not  a  statement	73	None	replace
74	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(stopAtNonOption);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  not  a  statement	62	None	replace
75	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(str,  stopAtNonOption);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  not  a  statement	62	None	replace
76	[BUG]  [BUGGY]  if(options!=  null)  {  return  cmd.options;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  if(options!=  null)  {  return  cmd.options;  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	if(options!=  null)  {  return  cmd.options;  }	  return    cmd.options;    	non-compiled	[CE]  not  a  statement	74	None	replace
77	[BUG]  [BUGGY]  return  cmd.options();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.options();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.options();	  return    cmd.options;    	non-compiled	[CE]  not  a  statement	74	None	replace
78	[BUG]  [BUGGY]  return  this.options.getValue();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  this.options.getValue();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  this.options.getValue();	  return    options.getValue();    	non-compiled	[CE]  not  a  statement	21	None	replace
79	[BUG]  [BUGGY]  return  options.getValue(),  arguments;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.getValue(),  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.getValue(),  arguments;	  return    options.getValue();    	non-compiled	[CE]  	21	None	replace
80	[BUG]  [BUGGY]  return  options.getValue()  +  1;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.getValue()  +  1;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.getValue()  +  1;	  return    options.getValue();    	non-compiled	[CE]  not  a  statement	21	None	replace
81	[BUG]  [BUGGY]  iterator.addArg(arguments,  str);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.addArg(arguments,  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.addArg(arguments,  str);	  iterator.addArg(arguments);    	non-compiled	[CE]  not  a  statement	48	None	replace
82	[BUG]  [BUGGY]  Option  cmd  =  options.findOption(options,  stopAtNonOption);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.findOption(options,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.findOption(options,  stopAtNonOption);	  Option    cmd    =    options.findOption(options);    	non-compiled	[CE]  not  a  statement	41	None	replace
83	[BUG]  [BUGGY]  options.addArg(arguments,  stopAtNonOption);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments,  stopAtNonOption);	  options.addArg(arguments);    	non-compiled	[CE]  not  a  statement	4	None	replace
84	[BUG]  [BUGGY]  return  iterator.test(options);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.test(options);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.test(options);	  return    iterator.test(arguments);    	non-compiled	[CE]  not  a  statement	82	None	replace
85	[BUG]  [BUGGY]  return  iterator.test(options,  arguments);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.test(options,  arguments);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.test(options,  arguments);	  return    iterator.test(arguments);    	non-compiled	[CE]  not  a  statement	82	None	replace
86	[BUG]  [BUGGY]  return  iterator.test(str,  arguments);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.test(str,  arguments);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.test(str,  arguments);	  return    iterator.test(arguments);    	non-compiled	[CE]  not  a  statement	82	None	replace
87	[BUG]  [BUGGY]  return  iterator.test(properties);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.test(properties);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.test(properties);	  return    iterator.test(arguments);    	non-compiled	[CE]  not  a  statement	82	None	replace
88	[BUG]  [BUGGY]  Option  option  =  options.addArg(t);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.addArg(t);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.addArg(t);	  options.addArg(str);    	non-compiled	[CE]  not  a  statement	3	None	replace
89	[BUG]  [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  cmd.addArg(str);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    options.keySet().iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.equals(   "   "))    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
90	[BUG]  [BUGGY]  return(options!=  null)?  null  :  options.toString();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options!=  null)?  null  :  options.toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options!=  null)?  null  :  options.toString();	  return(options    ==    null)?    null    :    options.toString();    	non-compiled	[CE]  not  a  statement	35	None	replace
91	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  option.toString();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  option.toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  option.toString();	  return(options    ==    null)?    null    :    options.toString();    	non-compiled	[CE]  not  a  statement	35	None	replace
92	[BUG]  [BUGGY]  Return(options  ==  null)?  null  :  options.toString();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Return(options  ==  null)?  null  :  options.toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Return(options  ==  null)?  null  :  options.toString();	  return(options    ==    null)?    null    :    options.toString();    	non-compiled	[CE]  not  a  statement	35	None	replace
93	[BUG]  [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [CE]  not  a  statement  [FE]        UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  opts.values().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  not  a  statement	19	None	replace
94	[BUG]  [BUGGY]  return  iterator.trim(arguments);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.trim(arguments);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.trim(arguments);	  return    iterator.trim();    	non-compiled	[CE]  not  a  statement	58	None	replace
95	[BUG]  [BUGGY]  return  iterator.trim()  :  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.trim()  :  null;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.trim()  :  null;	  return    iterator.trim();    	non-compiled	[CE]  	58	None	replace
96	[BUG]  [BUGGY]  return  iterator.trim(),  str;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.trim(),  str;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.trim(),  str;	  return    iterator.trim();    	non-compiled	[CE]  	58	None	replace
97	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(test,  str);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(test,  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(test,  str);	  Option    cmd    =    options.getOption(test);    	non-compiled	[CE]  not  a  statement	85	None	replace
98	[BUG]  [BUGGY]  return  iterator!=  null?  null  :  iterator.null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator!=  null?  null  :  iterator.null;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator!=  null?  null  :  iterator.null;	  return    iterator.null;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
99	[BUG]  [BUGGY]  return  iterator  ==  null?  null  :  iterator.null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator  ==  null?  null  :  iterator.null;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator  ==  null?  null  :  iterator.null;	  return    iterator.null;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
100	[BUG]  [BUGGY]  return  iterator.null  &&  arguments.length  >  0;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.null  &&  arguments.length  >  0;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.null  &&  arguments.length  >  0;	  return    iterator.null;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
101	[BUG]  [BUGGY]  iterator.addArg(arguments[0],  str);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.addArg(arguments[0],  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.addArg(arguments[0],  str);	  iterator.addArg(arguments[0]);    	non-compiled	[CE]  not  a  statement	87	None	replace
102	[BUG]  [BUGGY]  iterator.addArg(arguments[1]);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.addArg(arguments[1]);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.addArg(arguments[1]);	  iterator.addArg(arguments[0]);    	non-compiled	[CE]  not  a  statement	87	None	replace
103	[BUG]  [BUGGY]  return  cmd.toString(),  arguments);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.toString(),  arguments);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.toString(),  arguments);	  return    cmd.toString(),    str);    	non-compiled	[CE]  	45	None	replace
104	[BUG]  [BUGGY]  return  str.toString(),  cmd);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  str.toString(),  cmd);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  str.toString(),  cmd);	  return    cmd.toString(),    str);    	non-compiled	[CE]  	45	None	replace
105	[BUG]  [BUGGY]  return  cmd.toString(),  argument);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.toString(),  argument);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.toString(),  argument);	  return    cmd.toString(),    str);    	non-compiled	[CE]  	45	None	replace
106	[BUG]  [BUGGY]  return  cmd.toString(),  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.toString(),  null);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.toString(),  null);	  return    cmd.toString(),    str);    	non-compiled	[CE]  	45	None	replace
107	[BUG]  [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    options.keySet().iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.length()    ==    0)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
108	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.values().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.values().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.values().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    options.keySet().iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.length()    ==    0)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
109	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()!=  0)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()!=  0)  {  cmd.addArg(str);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()!=  0)  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    options.keySet().iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.length()    ==    0)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
110	[BUG]  [BUGGY]  Iterator  iterator  =  options.getIterator();  [CE]  not  a  statement  [FE]        UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  options.getIterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  options.getIterator();	          iterator.remove();    Iterator    iterator    =    options.getIterator();    	non-compiled	[CE]  not  a  statement	84	None	replace
111	[BUG]  [BUGGY]  iterator.clear();  Iterator  iterator  =  options.getIterator();  [CE]  not  a  statement  [FE]          UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.clear();  Iterator  iterator  =  options.getIterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.clear();  Iterator  iterator  =  options.getIterator();	          iterator.remove();    Iterator    iterator    =    options.getIterator();    	non-compiled	[CE]  not  a  statement	84	None	replace
112	[BUG]  [BUGGY]  Ilerator  iterator  =  options.values().iterator();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Ilerator  iterator  =  options.values().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Ilerator  iterator  =  options.values().iterator();	  Ilerator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  not  a  statement	70	None	replace
113	[BUG]  [BUGGY]  Ilerator  iterator  =  options.iterator();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Ilerator  iterator  =  options.iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Ilerator  iterator  =  options.iterator();	  Ilerator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  not  a  statement	70	None	replace
114	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  cmd);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t,  cmd);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(t,  cmd);	  Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  not  a  statement	39	None	replace
115	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  cmd);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(str,  cmd);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(str,  cmd);	  Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  not  a  statement	39	None	replace
116	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption);	  Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  not  a  statement	39	None	replace
117	[BUG]  [BUGGY]  return  iterator.options  ||  options.options;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.options  ||  options.options;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.options  ||  options.options;	  return    iterator.options;    	non-compiled	[CE]  not  a  statement	24	None	replace
118	[BUG]  [BUGGY]  return  iterator.options();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.options();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.options();	  return    iterator.options;    	non-compiled	[CE]  not  a  statement	24	None	replace
119	[BUG]  [BUGGY]  return  iterator.options  &&  options.size()  >  0;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.options  &&  options.size()  >  0;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.options  &&  options.size()  >  0;	  return    iterator.options;    	non-compiled	[CE]  not  a  statement	24	None	replace
120	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( "- "))  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( "- "))  {  cmd.addArg(str);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( "- "))  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
121	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  cmd.addArg(str);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
122	[BUG]  [BUGGY]  return  options.getOptions();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.getOptions();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.getOptions();	  return    this.options.getOptions();    	non-compiled	[CE]  not  a  statement	8	None	replace
123	[BUG]  [BUGGY]  return  this.options.getOptions(),  options);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  this.options.getOptions(),  options);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  this.options.getOptions(),  options);	  return    this.options.getOptions();    	non-compiled	[CE]  	8	None	replace
124	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOptions();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOptions();	  return    this.options.getOptions();    	non-compiled	[CE]  not  a  statement	8	None	replace
125	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  throw  new  IllegalArgumentException( " ");  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
126	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  throw  new  IllegalArgumentException( "	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	91	None	replace
127	[BUG]  [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  this.arguments.iterator();	  Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  not  a  statement	32	None	replace
128	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(str);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOptions(str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOptions(str);	  Option    cmd    =    options.getOptions(t);    	non-compiled	[CE]  not  a  statement	29	None	replace
129	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(tr);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOptions(tr);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOptions(tr);	  Option    cmd    =    options.getOptions(t);    	non-compiled	[CE]  not  a  statement	29	None	replace
130	[BUG]  [BUGGY]  return  iterator.getKey();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.getKey();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.getKey();	  return    iterator.getValue();    	non-compiled	[CE]  not  a  statement	22	None	replace
131	[BUG]  [BUGGY]  options.addArg(arguments[0],  str);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments[0],  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments[0],  str);	  options.addArg(arguments[0]);    	non-compiled	[CE]  not  a  statement	72	None	replace
132	[BUG]  [BUGGY]  options.addArg(arguments[1]);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments[1]);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments[1]);	  options.addArg(arguments[0]);    	non-compiled	[CE]  not  a  statement	72	None	replace
133	[BUG]  [BUGGY]  return  iterator.next(),  options);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.next(),  options);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.next(),  options);	  return    iterator.next();    	non-compiled	[CE]  	26	None	replace
134	[BUG]  [BUGGY]  return  iterator.next(),  arguments;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.next(),  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.next(),  arguments;	  return    iterator.next();    	non-compiled	[CE]  	26	None	replace
135	[BUG]  [BUGGY]  return  iterator.getIterator();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.getIterator();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.getIterator();	  return    iterator.next();    	non-compiled	[CE]  not  a  statement	26	None	replace
136	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  if(option.hasArg())  {  requiredOptions.add(option);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(str);  if(option.hasArg())  {  requiredOptions.add(option);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(str);  if(option.hasArg())  {  requiredOptions.add(option);  }	  Option    option    =    options.getOption(t);    if(option.hasArg())    {    requiredOptions.add(option);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
137	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  if(option.hasArgument())  {  requiredOptions.add(option);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(str);  if(option.hasArgument())  {  requiredOptions.add(option);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(str);  if(option.hasArgument())  {  requiredOptions.add(option);  }	  Option    option    =    options.getOption(t);    if(option.hasArg())    {    requiredOptions.add(option);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
138	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  if(option.hasArg())  {  requiredOptions.add(option);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(options);  if(option.hasArg())  {  requiredOptions.add(option);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(options);  if(option.hasArg())  {  requiredOptions.add(option);  }	  Option    option    =    options.getOption(t);    if(option.hasArg())    {    requiredOptions.add(option);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
139	[BUG]  [BUGGY]  String  str  =  iterator.toString();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  String  str  =  iterator.toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	String  str  =  iterator.toString();	  return    iterator.toString();    	non-compiled	[CE]  not  a  statement	25	None	replace
140	[BUG]  [BUGGY]  return  iterator.toString()  +  arguments;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.toString()  +  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.toString()  +  arguments;	  return    iterator.toString();    	non-compiled	[CE]  not  a  statement	25	None	replace
141	[BUG]  [BUGGY]  return  iterator.toString(),  arguments);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.toString(),  arguments);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.toString(),  arguments);	  return    iterator.toString();    	non-compiled	[CE]  	25	None	replace
142	[BUG]  [BUGGY]  options.addArg(options,  str);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(options,  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(options,  str);	  options.addArg(options);    	non-compiled	[CE]  not  a  statement	5	None	replace
143	[BUG]  [BUGGY]  Iterator  iterator  =  options.getOptions();  [CE]  not  a  statement  [FE]        UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  options.getOptions();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  options.getOptions();	          iterator.remove();    Iterator    iterator    =    options.getOptions();    	non-compiled	[CE]  not  a  statement	63	None	replace
144	[BUG]  [BUGGY]  parseOption(opt,  iterator);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  parseOption(opt,  iterator);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	parseOption(opt,  iterator);	  parseOption(t,    iterator);    	non-compiled	[CE]  not  a  statement	51	None	replace
145	[BUG]  [BUGGY]  parseOption(iterator,  arguments);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  parseOption(iterator,  arguments);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	parseOption(iterator,  arguments);	  parseOption(t,    iterator);    	non-compiled	[CE]  not  a  statement	51	None	replace
146	[BUG]  [BUGGY]  parseOption(options,  iterator);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  parseOption(options,  iterator);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	parseOption(options,  iterator);	  parseOption(t,    iterator);    	non-compiled	[CE]  not  a  statement	51	None	replace
147	[BUG]  [BUGGY]  parseOption(output,  iterator);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  parseOption(output,  iterator);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	parseOption(output,  iterator);	  parseOption(t,    iterator);    	non-compiled	[CE]  not  a  statement	51	None	replace
148	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  option.options;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  option.options;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  option.options;	  return(options    ==    null)?    null    :    options.options;    	non-compiled	[CE]  not  a  statement	7	None	replace
149	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.opts;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.opts;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.opts;	  return(options    ==    null)?    null    :    options.options;    	non-compiled	[CE]  not  a  statement	7	None	replace
150	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.getOptionList();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.getOptionList();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.getOptionList();	  return(options!=    null)?    null    :    options.getOptions();    	non-compiled	[CE]  not  a  statement	37	None	replace
151	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  opts.getOptions();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  opts.getOptions();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  opts.getOptions();	  return(options!=    null)?    null    :    options.getOptions();    	non-compiled	[CE]  not  a  statement	37	None	replace
152	[BUG]  [BUGGY]  return  cmd.toString()  +  str;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.toString()  +  str;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.toString()  +  str;	  return    cmd.toString()    +    arguments;    	non-compiled	[CE]  not  a  statement	76	None	replace
153	[BUG]  [BUGGY]  return  cmd.toString(),  arguments;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.toString(),  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.toString(),  arguments;	  return    cmd.toString()    +    arguments;    	non-compiled	[CE]  	76	None	replace
154	[BUG]  [BUGGY]  return  cmd.toString()  /  arguments;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.toString()  /  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.toString()  /  arguments;	  return    cmd.toString()    +    arguments;    	non-compiled	[CE]  not  a  statement	76	None	replace
155	[BUG]  [BUGGY]  return(options!=  null)?  null  :  options.getArguments();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options!=  null)?  null  :  options.getArguments();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options!=  null)?  null  :  options.getArguments();	  return(options    ==    null)?    null    :    options.getArguments();    	non-compiled	[CE]  not  a  statement	83	None	replace
156	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  cmd.addArg(opt);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  cmd.addArg(opt);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(t);  if(option  ==  null)  {  cmd.addArg(opt);  }	  Option    option    =    options.getOption(str);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  not  a  statement	55	None	replace
157	[BUG]  [BUGGY]  options.getOption(t);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.getOption(t);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.getOption(t);  if(option  ==  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  not  a  statement	55	None	replace
158	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.toArray(arguments);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.toArray(arguments);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.toArray(arguments);	  return    null;    	non-compiled	[CE]  not  a  statement	34	None	replace
159	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(options);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
160	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(options,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(options,  str);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(options);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
161	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.values().iterator();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  this.options.values().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  this.options.values().iterator();	  Iterator    iterator    =    this.options.keySet().iterator();    	non-compiled	[CE]  not  a  statement	94	None	replace
162	[BUG]  [BUGGY]  Option  cmd  =  options.findOption(arguments,  stopAtNonOption);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.findOption(arguments,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.findOption(arguments,  stopAtNonOption);	  Option    cmd    =    options.findOption(arguments);    	non-compiled	[CE]  not  a  statement	42	None	replace
163	[BUG]  [BUGGY]  return  iterator.values().iterator();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.values().iterator();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.values().iterator();	  return    iterator.iterator();    	non-compiled	[CE]  not  a  statement	23	None	replace
164	[BUG]  [BUGGY]  return  iterator.keySet().iterator();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.keySet().iterator();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.keySet().iterator();	  return    iterator.iterator();    	non-compiled	[CE]  not  a  statement	23	None	replace
165	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  str);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(options,  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(options,  str);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  not  a  statement	10	None	replace
166	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(options,  stopAtNonOption);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  not  a  statement	10	None	replace
167	[BUG]  [BUGGY]  return  options.trim(),  stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.trim(),  stopAtNonOption;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.trim(),  stopAtNonOption;	  return    options.trim();    	non-compiled	[CE]  	65	None	replace
168	[BUG]  [BUGGY]  return  options.trim(),  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.trim(),  stopAtNonOption);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.trim(),  stopAtNonOption);	  return    options.trim();    	non-compiled	[CE]  	65	None	replace
169	[BUG]  [BUGGY]  return  options.trim()  :  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.trim()  :  null;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.trim()  :  null;	  return    options.trim();    	non-compiled	[CE]  	65	None	replace
170	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( "- "))  {  throw  new  IllegalArgumentException( " ");  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
171	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
172	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.getOptions().toString();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.getOptions().toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.getOptions().toString();	  return(options    ==    null)?    null    :    options.toString();    	non-compiled	[CE]  not  a  statement	35	None	replace
173	[BUG]  [BUGGY]  Option  option  =  options.getOption(test);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(test);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(test);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
174	[BUG]  [BUGGY]  return  opts.getValue();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  opts.getValue();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  opts.getValue();	  return    options.getValue();    	non-compiled	[CE]  not  a  statement	21	None	replace
175	[BUG]  [BUGGY]  return  opt.getValue();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  opt.getValue();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  opt.getValue();	  return    options.getValue();    	non-compiled	[CE]  not  a  statement	21	None	replace
176	[BUG]  [BUGGY]  return  option.getValue();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  option.getValue();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  option.getValue();	  return    options.getValue();    	non-compiled	[CE]  not  a  statement	21	None	replace
177	[BUG]  [BUGGY]  return  options.toString()  + ":   "  +  arguments;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.toString()  + ":   "  +  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.toString()  + ":   "  +  arguments;	  return    cmd.toString()    +   ":   "    +    arguments;    	non-compiled	[CE]  not  a  statement	46	None	replace
178	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  options);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(opt,  options);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(opt,  options);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  not  a  statement	27	None	replace
179	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  options);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t,  options);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(t,  options);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  not  a  statement	27	None	replace
180	[BUG]  [BUGGY]  return  options.toString()  +  arguments;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.toString()  +  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.toString()  +  arguments;	  return    options.toString();    	non-compiled	[CE]  not  a  statement	75	None	replace
181	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(arguments,  stopAtNonOption);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  not  a  statement	77	None	replace
182	[BUG]  [BUGGY]  ListIterator  iterator  =  opts.iterator();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  ListIterator  iterator  =  opts.iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	ListIterator  iterator  =  opts.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  not  a  statement	31	None	replace
183	[BUG]  [BUGGY]  return  this.cmd.toString();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  this.cmd.toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  this.cmd.toString();	  return    this.cmd.trim();    	non-compiled	[CE]  not  a  statement	59	None	replace
184	[BUG]  [BUGGY]  return  iterator.values();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.values();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.values();	  return    iterator.iterator();    	non-compiled	[CE]  not  a  statement	23	None	replace
185	[BUG]  [BUGGY]  options.addArg(options,  stopAtNonOption);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(options,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(options,  stopAtNonOption);	  options.addArg(options);    	non-compiled	[CE]  not  a  statement	5	None	replace
186	[BUG]  [BUGGY]  return  this.options.trim();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  this.options.trim();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  this.options.trim();	  return    str.trim();    	non-compiled	[CE]  not  a  statement	57	None	replace
187	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".- "))  {  return  str;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".- "))  {  return  str;  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".- "))  {  return  str;  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    return    str;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
188	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.requiredOptions.getArgumentList();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.requiredOptions.getArgumentList();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.requiredOptions.getArgumentList();	  return(options    ==    null)?    null    :    options.getArgumentList();    	non-compiled	[CE]  not  a  statement	61	None	replace
189	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  opt.getArgumentList();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  opt.getArgumentList();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  opt.getArgumentList();	  return(options    ==    null)?    null    :    options.getArgumentList();    	non-compiled	[CE]  not  a  statement	61	None	replace
190	[BUG]  [BUGGY]  Iterator  iterator  =  optionOptions.iterator();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  optionOptions.iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  optionOptions.iterator();	  Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  not  a  statement	30	None	replace
191	[BUG]  [BUGGY]  return  iterator.test(opt,  arguments);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.test(opt,  arguments);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.test(opt,  arguments);	  return    iterator.test(arguments);    	non-compiled	[CE]  not  a  statement	82	None	replace
192	[BUG]  [BUGGY]  return  iterator.test(opt);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.test(opt);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.test(opt);	  return    iterator.test(arguments);    	non-compiled	[CE]  not  a  statement	82	None	replace
193	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(stopAtNonOption);	  Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  not  a  statement	64	None	replace
194	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  stopAtNonOption);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(opt,  stopAtNonOption);	  Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  not  a  statement	64	None	replace
195	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.options();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.options();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.options();	  return(options    ==    null)?    null    :    options.options;    	non-compiled	[CE]  not  a  statement	7	None	replace
196	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  opt.options;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  opt.options;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  opt.options;	  return(options    ==    null)?    null    :    options.options;    	non-compiled	[CE]  not  a  statement	7	None	replace
197	[BUG]  [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  cmd.addArg(s  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  cmd.addArg(s  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "   "))  {  cmd.addArg(s	  for(Iterator    iterator    =    options.keySet().iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.equals(   "   "))    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
198	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  options);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(t,  options);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(t,  options);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(options);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
199	[BUG]  [BUGGY]  parseOption(emptyAtNonOption,  iterator);  [CE]  cannot  find  symbol  emptyAtNonOption  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  parseOption(emptyAtNonOption,  iterator);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	parseOption(emptyAtNonOption,  iterator);	  parseOption(t,    iterator);    	non-compiled	[CE]  cannot  find  symbol  emptyAtNonOption	51	None	replace
200	[BUG]  [BUGGY]  Return(options  ==  null)?  null  :  options.getOptions();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Return(options  ==  null)?  null  :  options.getOptions();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Return(options  ==  null)?  null  :  options.getOptions();	  return(options!=    null)?    null    :    options.getOptions();    	non-compiled	[CE]  not  a  statement	37	None	replace
201	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  opt.getOptions();  [CE]  cannot  find  symbol  opt  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  opt.getOptions();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  opt.getOptions();	  return(options!=    null)?    null    :    options.getOptions();    	non-compiled	[CE]  cannot  find  symbol  opt	37	None	replace
202	[BUG]  [BUGGY]  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }	  Iterator    iterator    =    opts.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
203	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  opt.getArguments();  [CE]  cannot  find  symbol  opt  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  opt.getArguments();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  opt.getArguments();	  return(options    ==    null)?    null    :    options.getArguments();    	non-compiled	[CE]  cannot  find  symbol  opt	83	None	replace
204	[BUG]  [BUGGY]  return  iterator.t  +  arguments;  [CE]  cannot  find  symbol  t  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.t  +  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.t  +  arguments;	  return    iterator.t;    	non-compiled	[CE]  cannot  find  symbol  t	68	None	replace
205	[BUG]  [BUGGY]  return  iterator.test;  [CE]  cannot  find  symbol  test  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.test;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.test;	  return    iterator.t;    	non-compiled	[CE]  cannot  find  symbol  test	68	None	replace
206	[BUG]  [BUGGY]  return  cmd.toString(),  options);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.toString(),  options);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.toString(),  options);	  return    cmd.toString(),    str);    	non-compiled	[CE]  ';'  expected	45	None	replace
207	[BUG]  [BUGGY]  return  cmd.toString(),  iterator);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.toString(),  iterator);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.toString(),  iterator);	  return    cmd.toString(),    str);    	non-compiled	[CE]  ';'  expected	45	None	replace
208	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( ". "))  {  throw  new  IllegalArgumentException( " ");  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
209	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  options);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(opt,  options);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(opt,  options);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  	10	None	replace
210	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  block);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(options,  block);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(options,  block);	  Option    cmd    =    options.getOption(options);    	non-compiled	[CE]  	10	None	replace
211	[BUG]  [BUGGY]  return  iterator.options  &&  options.stopAtNonOption;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.options  &&  options.stopAtNonOption;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.options  &&  options.stopAtNonOption;	  return    iterator.options;    	non-compiled	[CE]  	24	None	replace
212	[BUG]  [BUGGY]  return  iterator.options  ||  options.stopAtNonOption;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.options  ||  options.stopAtNonOption;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.options  ||  options.stopAtNonOption;	  return    iterator.options;    	non-compiled	[CE]  	24	None	replace
213	[BUG]  [BUGGY]  return  iterator.options  &&  opt.stopAtNonOption;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.options  &&  opt.stopAtNonOption;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.options  &&  opt.stopAtNonOption;	  return    iterator.options;    	non-compiled	[CE]  	24	None	replace
214	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(opt);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOptions(opt);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOptions(opt);	  Option    cmd    =    options.getOptions(t);    	non-compiled	[CE]  	29	None	replace
215	[BUG]  [BUGGY]  ListIterator  iterator  =  opts.keySet().iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  ListIterator  iterator  =  opts.keySet().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	ListIterator  iterator  =  opts.keySet().iterator();	  Iterator    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  	56	None	replace
216	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(option);  if(option  ==  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  	55	None	replace
217	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(options);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(options);  if(option  ==  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  	55	None	replace
218	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".- "))  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".- "))  {  cmd.addArg(str);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".- "))  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
219	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(arguments);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(tr);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  	54	None	replace
220	[BUG]  [BUGGY]  iterator.setIterator(options.getIterator());  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.setIterator(options.getIterator());  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.setIterator(options.getIterator());	          iterator.remove();    Iterator    iterator    =    options.getIterator();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
221	[BUG]  [BUGGY]  if(options!=  null)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }  [CE]  illegal  start  of  expression  [FE]              UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  if(options!=  null)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	if(options!=  null)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }	          iterator.remove();    Iterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
222	[BUG]  [BUGGY]  if(options!=  null)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }  else  {  cmd.addArg(t);  }  [CE]  [FE]                UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  if(options!=  null)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }  else  {  cmd.addArg(t);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	if(options!=  null)  {  iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  }  else  {  cmd.addArg(t);  }	          iterator.remove();    Iterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  	17	None	replace
223	[BUG]  [BUGGY]  return  options.trim(str);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.trim(str);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.trim(str);	  return    options.trim();    	non-compiled	[CE]  	65	None	replace
224	[BUG]  [BUGGY]  return  options.trim(t);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.trim(t);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.trim(t);	  return    options.trim();    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
225	[BUG]  [BUGGY]  iterator.addArg(arguments[0],  stopAtNonOption);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.addArg(arguments[0],  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.addArg(arguments[0],  stopAtNonOption);	  iterator.addArg(arguments[0]);    	non-compiled	[CE]  	87	None	replace
226	[BUG]  [BUGGY]  Option  cmd  =  arguments.findOption(options);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  arguments.findOption(options);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  arguments.findOption(options);	  Option    cmd    =    options.findOption(arguments);    	non-compiled	[CE]  	42	None	replace
227	[BUG]  [BUGGY]  options.addArg(arguments[t],  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments[t],  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments[t],  stopAtNonOption);	  options.addArg(arguments[t]);    	non-compiled	[CE]  	71	None	replace
228	[BUG]  [BUGGY]  options.addArg(arguments[t].toLowerCase());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments[t].toLowerCase());  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments[t].toLowerCase());	  options.addArg(arguments[t]);    	non-compiled	[CE]  	71	None	replace
229	[BUG]  [BUGGY]  options.addArg(arguments[t].toString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments[t].toString());  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments[t].toString());	  options.addArg(arguments[t]);    	non-compiled	[CE]  	71	None	replace
230	[BUG]  [BUGGY]  if(options!=  null)  {  iterator.remove();  iterator.remove();  }  [CE]  class,  interface,  or  enum  expected  [FE]    UnsupportedOperationException    [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  if(options!=  null)  {  iterator.remove();  iterator.remove();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	if(options!=  null)  {  iterator.remove();  iterator.remove();  }	          iterator.remove();    iterator.remove();    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
231	[BUG]  [BUGGY]  return  options.getOptions().substring(0,  str.length()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.getOptions().substring(0,  str.length()  -  1);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.getOptions().substring(0,  str.length()  -  1);	  return    options.getOptions().toString();    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
232	[BUG]  [BUGGY]  return  options.options  &&  options.stopAtNonOption;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.options  &&  options.stopAtNonOption;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.options  &&  options.stopAtNonOption;	  return    options.options;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
233	[BUG]  [BUGGY]  return  options.options  ||  options.stopAtNonOption;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.options  ||  options.stopAtNonOption;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.options  ||  options.stopAtNonOption;	  return    options.options;    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
234	[BUG]  [BUGGY]  options.addArg(arguments[0],  stopAtNonOption);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments[0],  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments[0],  stopAtNonOption);	  options.addArg(arguments[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
235	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(options,  stopAtNonOption);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOptions(options,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOptions(options,  stopAtNonOption);	  Option    cmd    =    options.getOptions(options);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
236	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(options,  t);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOptions(options,  t);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOptions(options,  t);	  Option    cmd    =    options.getOptions(options);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
237	[BUG]  [BUGGY]  return  iterator.toString(t);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.toString(t);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.toString(t);	  return    iterator.toString();    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
238	[BUG]  [BUGGY]  Iterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    options.keySet().iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.length()    ==    0)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
239	[BUG]  [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(s  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(s  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	ListIterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg(s	  for(Iterator    iterator    =    options.keySet().iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.length()    ==    0)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
240	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  requiredOptions.add(cmd);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  requiredOptions.add(cmd);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  CommandLine  cmd  =(ArgumentLine)iterator.next();  if(!stopAtNonOption)  {  requiredOptions.add(cmd);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    CommandLine    cmd    =(ArgumentLine)iterator.next();    if(!stopAtNonOption)    {    requiredOptions.add(cmd);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
241	[BUG]  [BUGGY]  return  iterator.str.getValue();  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.str.getValue();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.str.getValue();	  return    iterator.getValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
242	[BUG]  [BUGGY]  return  iterator.parse(str,  options);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.parse(str,  options);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.parse(str,  options);	  return    iterator.getValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
243	[BUG]  [BUGGY]  iterator.addArg(arguments,  stopAtNonOption);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.addArg(arguments,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.addArg(arguments,  stopAtNonOption);	  iterator.addArg(arguments);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
244	[BUG]  [BUGGY]  return(this.cmd!=  null)?  null  :  this.cmd.getValue();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(this.cmd!=  null)?  null  :  this.cmd.getValue();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(this.cmd!=  null)?  null  :  this.cmd.getValue();	  return    this.cmd.getValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
245	[BUG]  [BUGGY]  return(this.cmd!=  null?  null  :  this.cmd.getValue());  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(this.cmd!=  null?  null  :  this.cmd.getValue());  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(this.cmd!=  null?  null  :  this.cmd.getValue());	  return    this.cmd.getValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
246	[BUG]  [BUGGY]  iterator.addArg(arguments[t],  stopAtNonOption);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.addArg(arguments[t],  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.addArg(arguments[t],  stopAtNonOption);	  iterator.addArg(arguments[t]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
247	[BUG]  [BUGGY]  iterator.addArg(arguments[t],  t);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.addArg(arguments[t],  t);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.addArg(arguments[t],  t);	  iterator.addArg(arguments[t]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
248	[BUG]  [BUGGY]  iterator.clear();  Iterator  iterator  =  options.getOptions();  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.clear();  Iterator  iterator  =  options.getOptions();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.clear();  Iterator  iterator  =  options.getOptions();	          iterator.remove();    Iterator    iterator    =    options.getOptions();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
249	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option.hasArg())  {  requiredOptions.add(option);  }  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(option);  if(option.hasArg())  {  requiredOptions.add(option);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(option);  if(option.hasArg())  {  requiredOptions.add(option);  }	  Option    option    =    options.getOption(t);    if(option.hasArg())    {    requiredOptions.add(option);    }    	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	50	None	replace
250	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  arguments);  [CE]  cannot  find  symbol  opt  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(opt,  arguments);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(opt,  arguments);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  cannot  find  symbol  opt	12	None	replace
251	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(opt);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(opt);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(option);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
252	[BUG]  [BUGGY]  return  iterator.trim(arguments,  stopAtNonOption);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.trim(arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.trim(arguments,  stopAtNonOption);	  return    iterator.trim();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
253	[BUG]  [BUGGY]  return  iterator.trim(arguments[0].trim());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.trim(arguments[0].trim());  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.trim(arguments[0].trim());	  return    iterator.trim();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
254	[BUG]  [BUGGY]  return  iterator.next()  +  arguments;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.next()  +  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.next()  +  arguments;	  return    iterator.next();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
255	[BUG]  [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator  =  options.iterator();  [CE]  illegal  start  of  expression  [FE]    UnsupportedOperationException    [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator  =  options.iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	                iterator.remove();        iterator.remove();    Iterator  iterator  =  options.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
256	[BUG]  [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator  =  options.keySet().iterator();  [CE]  illegal  start  of  expression  [FE]      UnsupportedOperationException    [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator  =  options.keySet().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	                iterator.remove();        iterator.remove();    Iterator  iterator  =  options.keySet().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
257	[BUG]  [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException    [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]          iterator.remove();    iterator.remove();  Iterator  iterator  =  options.getOptions().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	                iterator.remove();        iterator.remove();    Iterator  iterator  =  options.getOptions().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
258	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  cmd);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(opt,  cmd);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(opt,  cmd);	  Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  	39	None	replace
259	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.length()  ==  0)  {  cmd.addArg	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.length()    ==    0)    {    cmd.addArg(str);    }    	non-compiled	[CE]  	78	None	replace
260	[BUG]  [BUGGY]  return  iterator!=  null  &&  iterator.null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator!=  null  &&  iterator.null;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator!=  null  &&  iterator.null;	  return    iterator.null;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
261	[BUG]  [BUGGY]  return  options.toArray(options);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.toArray(options);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.toArray(options);	  return    options;    	non-compiled	[CE]  	6	None	replace
262	[BUG]  [BUGGY]  Iterator  iterator  =  options.options().iterator();  [CE]  [FE]        UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  options.options().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  options.options().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  	19	None	replace
263	[BUG]  [BUGGY]  if(opts!=  null)  {  iterator.remove();  Iterator  iterator  =  opts.iterator();  }  [CE]  [FE]                UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  if(opts!=  null)  {  iterator.remove();  Iterator  iterator  =  opts.iterator();  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	if(opts!=  null)  {  iterator.remove();  Iterator  iterator  =  opts.iterator();  }	          iterator.remove();    Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  	18	None	replace
264	[BUG]  [BUGGY]  Ilerator  iterator  =  options.options.keySet().iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Ilerator  iterator  =  options.options.keySet().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Ilerator  iterator  =  options.options.keySet().iterator();	  Ilerator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  	70	None	replace
265	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(test,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(test,  stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(test,  stopAtNonOption);	  Option    cmd    =    options.getOption(test);    	non-compiled	[CE]  	85	None	replace
266	[BUG]  [BUGGY]  Option  cmd  =  options.findOption(test);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.findOption(test);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.findOption(test);	  Option    cmd    =    options.findOption(str);    	non-compiled	[CE]  	40	None	replace
267	[BUG]  [BUGGY]  Option  cmd  =  options.findOption(arguments[0]);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.findOption(arguments[0]);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.findOption(arguments[0]);	  Option    cmd    =    options.findOption(str);    	non-compiled	[CE]  	40	None	replace
268	[BUG]  [BUGGY]  return(options!=  null)?  null  :  options.getOptionList();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options!=  null)?  null  :  options.getOptionList();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options!=  null)?  null  :  options.getOptionList();	  return(options!=    null)?    null    :    options.getOptions();    	non-compiled	[CE]  	37	None	replace
269	[BUG]  [BUGGY]  iterator.clear();  Iterator  iterator  =  options.getOptions().iterator();  [CE]  [FE]              UnsupportedOperationException      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  iterator.clear();  Iterator  iterator  =  options.getOptions().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	iterator.clear();  Iterator  iterator  =  options.getOptions().iterator();	          iterator.remove();    Iterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  	17	None	replace
270	[BUG]  [BUGGY]  String  str  =  options.getString();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  String  str  =  options.getString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	String  str  =  options.getString();	  String    str    =    cmd.toString();    	non-compiled	[CE]  	44	None	replace
271	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.requiredOptions();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.requiredOptions();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.requiredOptions();	  return(options    ==    null)?    null    :    options.getOptions();    	non-compiled	[CE]  	36	None	replace
272	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.getMessage();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.getMessage();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.getMessage();	  return(options    ==    null)?    null    :    options.toString();    	non-compiled	[CE]  	35	None	replace
273	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.getValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.getValue();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.getValue();	  return(options    ==    null)?    null    :    options.toString();    	non-compiled	[CE]  	35	None	replace
274	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  block);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(options,  block);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(options,  block);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  	27	None	replace
275	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  <  String>  iterator  =  arguments.iterator();	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    return    str;    }    	non-compiled	[CE]  	93	None	replace
276	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  return  str;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  return  str;  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  return  str;  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    return    str;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
277	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".* "))  {  return  str;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".* "))  {  return  str;  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".* "))  {  return  str;  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    return    str;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
278	[BUG]  [BUGGY]  Option  cmd  =  options.findOption(options,  str);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.findOption(options,  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.findOption(options,  str);	  Option    cmd    =    options.findOption(options);    	non-compiled	[CE]  	41	None	replace
279	[BUG]  [BUGGY]  return  iterator.test(arguments,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.test(arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.test(arguments,  stopAtNonOption);	  return    iterator.test(arguments);    	non-compiled	[CE]  	82	None	replace
280	[BUG]  [BUGGY]  return  iterator.test(t);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.test(t);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.test(t);	  return    iterator.test(arguments);    	non-compiled	[CE]  	82	None	replace
281	[BUG]  [BUGGY]  return  iterator.test(str);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.test(str);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.test(str);	  return    iterator.test(arguments);    	non-compiled	[CE]  	82	None	replace
282	[BUG]  [BUGGY]  return(options  ==  null)?  null  :  options.optionList;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return(options  ==  null)?  null  :  options.optionList;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return(options  ==  null)?  null  :  options.optionList;	  return(options    ==    null)?    null    :    options.options;    	non-compiled	[CE]  	7	None	replace
283	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  opt.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  opt.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  	52	None	replace
284	[BUG]  [BUGGY]  Option  option  =  opts.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  opts.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  opts.getOption(str);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  	52	None	replace
285	[BUG]  [BUGGY]  return  iterator!=  null?  iterator.null  :  arguments[0];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator!=  null?  iterator.null  :  arguments[0];  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator!=  null?  iterator.null  :  arguments[0];	  return    iterator.null;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
286	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(options,  block);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOptions(options,  block);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOptions(options,  block);	  Option    cmd    =    options.getOptions(options);    	non-compiled	[CE]  	60	None	replace
287	[BUG]  [BUGGY]  options.addArg(arguments[0].trim());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments[0].trim());  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments[0].trim());	  options.addArg(arguments[0]);    	non-compiled	[CE]  	72	None	replace
288	[BUG]  [BUGGY]  options.addArg(arguments[0],  arguments[1]);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments[0],  arguments[1]);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments[0],  arguments[1]);	  options.addArg(arguments);    	non-compiled	[CE]  	4	None	replace
289	[BUG]  [BUGGY]  Iterator  iterator  =  requiredOptions.iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  requiredOptions.iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  requiredOptions.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  	31	None	replace
290	[BUG]  [BUGGY]  Option  cmd  =  options.findOption(options,  arguments);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.findOption(options,  arguments);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.findOption(options,  arguments);	  Option    cmd    =    options.findOption(arguments);    	non-compiled	[CE]  	42	None	replace
291	[BUG]  [BUGGY]  return  cmd.toString(),  block);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  cmd.toString(),  block);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  cmd.toString(),  block);	  return    cmd.toString(),    str);    	non-compiled	[CE]  	45	None	replace
292	[BUG]  [BUGGY]  return  iterator.options  ||  eatTheRest;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.options  ||  eatTheRest;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.options  ||  eatTheRest;	  return    iterator.options;    	non-compiled	[CE]  	24	None	replace
293	[BUG]  [BUGGY]  return  iterator.options  ||  options.requiredOptions;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.options  ||  options.requiredOptions;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.options  ||  options.requiredOptions;	  return    iterator.options;    	non-compiled	[CE]  	24	None	replace
294	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);	  Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(str);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
295	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  opt.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  opt.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  	55	None	replace
296	[BUG]  [BUGGY]  Option  option  =  opts.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  opts.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  opts.getOption(str);  if(option  ==  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(str);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  	55	None	replace
297	[BUG]  [BUGGY]  return  options.getOptions().substring(0,  str.length()  -  2);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.getOptions().substring(0,  str.length()  -  2);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.getOptions().substring(0,  str.length()  -  2);	  return    options.getOptions().toString();    	non-compiled	[CE]  	88	None	replace
298	[BUG]  [BUGGY]  return  options!=  null?  options.options  :  arguments;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options!=  null?  options.options  :  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options!=  null?  options.options  :  arguments;	  return    options.options;    	non-compiled	[CE]  	73	None	replace
299	[BUG]  [BUGGY]  return  options!=  null?  options.options  :  defaultOptions;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options!=  null?  options.options  :  defaultOptions;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options!=  null?  options.options  :  defaultOptions;	  return    options.options;    	non-compiled	[CE]  	73	None	replace
300	[BUG]  [BUGGY]  return  options  ==  null?  options.options  :  arguments;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options  ==  null?  options.options  :  arguments;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options  ==  null?  options.options  :  arguments;	  return    options.options;    	non-compiled	[CE]  	73	None	replace
301	[BUG]  [BUGGY]  Iterator  iterator  =  this.opts.keySet().iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Iterator  iterator  =  this.opts.keySet().iterator();  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Iterator  iterator  =  this.opts.keySet().iterator();	  Iterator    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  	56	None	replace
302	[BUG]  [BUGGY]  return  options.toArray(arguments);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  options.toArray(arguments);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  options.toArray(arguments);	  return    options;    	non-compiled	[CE]  	6	None	replace
303	[BUG]  [BUGGY]  options.addArg(arguments[t].substring(1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  options.addArg(arguments[t].substring(1));  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	options.addArg(arguments[t].substring(1));	  options.addArg(arguments[t]);    	non-compiled	[CE]  	71	None	replace
304	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
305	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".js "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".js "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".js "))  {  throw  new  IllegalArgumentException( " ");  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
306	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".* "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".* "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.endsWith( ".* "))  {  throw  new  IllegalArgumentException( " ");  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.endsWith(   "-   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
307	[BUG]  [BUGGY]  return  this.cmd,  options.trim();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  this.cmd,  options.trim();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  this.cmd,  options.trim();	  return    this.cmd.trim();    	non-compiled	[CE]  	59	None	replace
308	[BUG]  [BUGGY]  return  iterator.toString(),  str);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.toString(),  str);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.toString(),  str);	  return    iterator.toString();    	non-compiled	[CE]  	25	None	replace
309	[BUG]  [BUGGY]  parseOption(iterator,  str);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  parseOption(iterator,  str);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	parseOption(iterator,  str);	  parseOption(t,    iterator);    	non-compiled	[CE]  	51	None	replace
310	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(arguments,  str);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOption(arguments,  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOption(arguments,  str);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  	12	None	replace
311	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  String  str  =(String)iterator.next();  if(str.equals( "- "))  {  throw  new  IllegalArgumentException( " ");  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    String    str    =(String)iterator.next();    if(str.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
312	[BUG]  [BUGGY]  return  iterator.hasValue()?  iterator.getValue()  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.hasValue()?  iterator.getValue()  :  null;  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.hasValue()?  iterator.getValue()  :  null;	  return    iterator.getValue();    	non-compiled	[CE]  	22	None	replace
313	[BUG]  [BUGGY]  return  iterator.requiredOptions.getValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.requiredOptions.getValue();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.requiredOptions.getValue();	  return    iterator.getValue();    	non-compiled	[CE]  	22	None	replace
314	[BUG]  [BUGGY]  return  iterator.hasValue()?  iterator.getValue()  :(String[])iterator.next();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.hasValue()?  iterator.getValue()  :(String[])iterator.next();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.hasValue()?  iterator.getValue()  :(String[])iterator.next();	  return    iterator.getValue();    	non-compiled	[CE]  	22	None	replace
315	[BUG]  [BUGGY]  Option  option  =  options.getOption(tr);  if(option.hasArg())  {  requiredOptions.add(option);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(tr);  if(option.hasArg())  {  requiredOptions.add(option);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(tr);  if(option.hasArg())  {  requiredOptions.add(option);  }	  Option    option    =    options.getOption(t);    if(option.hasArg())    {    requiredOptions.add(option);    }    	non-compiled	[CE]  	50	None	replace
316	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  if(option.hasArg())  {  requiredOptions.add(option);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(arguments);  if(option.hasArg())  {  requiredOptions.add(option);  }  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(arguments);  if(option.hasArg())  {  requiredOptions.add(option);  }	  Option    option    =    options.getOption(t);    if(option.hasArg())    {    requiredOptions.add(option);    }    	non-compiled	[CE]  	50	None	replace
317	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(properties);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  cmd  =  options.getOptions(properties);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  cmd  =  options.getOptions(properties);	  Option    cmd    =    options.getOptions(t);    	non-compiled	[CE]  	29	None	replace
318	[BUG]  [BUGGY]  return  iterator.next().toString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.next().toString();  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.next().toString();	  return    iterator.next();    	non-compiled	[CE]  	26	None	replace
319	[BUG]  [BUGGY]  return  iterator.next(),  options.getOptions());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  iterator.next(),  options.getOptions());  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  iterator.next(),  options.getOptions());	  return    iterator.next();    	non-compiled	[CE]  	26	None	replace
320	[BUG]  [BUGGY]  return  this.options.getOptions(options);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  return  this.options.getOptions(options);  [BUGGY]      }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	return  this.options.getOptions(options);	  return    this.options.getOptions();    	non-compiled	[CE]  	8	None	replace
321	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  str);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  cmd.addArg(str);  }  }  }  }  processProperties(properties);  checkRequiredOptions();      [BUGGY]  Option  option  =  options.getOption(cmd,  str);  [BUGGY]      return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	240	240	1	replace	Option  option  =  options.getOption(cmd,  str);	  Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  	39	None	replace
