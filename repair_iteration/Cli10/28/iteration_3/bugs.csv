bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  try  {  for(Iterator  it  =  options.keySet().iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  for(Iterator  it  =  options.keySet().iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  for(Iterator  it  =  options.keySet().iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  iterator,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  iterator,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  iterator,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t,    iterator);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
5	[BUG]  [BUGGY]  Option  option  =  iterator.getOption(t,  options);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  iterator.getOption(t,  options);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  iterator.getOption(t,  options);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t,    iterator);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  iterator,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  iterator,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  iterator,  str);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t,    iterator);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
7	[BUG]  [BUGGY]  ListIterator  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  this.opts.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  this.opts.iterator();	  ListIterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
8	[BUG]  [BUGGY]  ListIterator  iterator  =  properties.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  properties.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  properties.iterator();	  ListIterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
9	[BUG]  [BUGGY]  Option  option  =  opts.getOption(str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  opts.getOption(str);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  opts.getOption(str);	  Option    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  Option  option  =  iterator.getOption(str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  iterator.getOption(str);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  iterator.getOption(str);	  Option    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  Iterator  iterator  =  this.properties.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  this.properties.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  this.properties.iterator();	  Iterator    iterator    =    properties.iterator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  null);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  null);	  Option    option    =    options.getOption(t,    this);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  this,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  this,  eatTheRest);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  this,  eatTheRest);	  Option    option    =    options.getOption(t,    this);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
14	[BUG]  [BUGGY]  For(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }	  if(stopAtNonOption)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
15	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(stopAtNonOption)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(stopAtNonOption)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(stopAtNonOption)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }	  if(stopAtNonOption)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
16	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }	  if(stopAtNonOption)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
17	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  block,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  block,  eatTheRest);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  block,  eatTheRest);	  Option    option    =    options.getOption(t,    block);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
18	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  block,  arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  block,  arguments);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  block,  arguments);	  Option    option    =    options.getOption(t,    block);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  block,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  block,  null);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  block,  null);	  Option    option    =    options.getOption(t,    block);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
20	[BUG]  [BUGGY]  try  {  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
21	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  properties.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  properties.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  for(Iterator  it  =  properties.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
22	[BUG]  [BUGGY]  Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
23	[BUG]  [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  this.opts.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
24	[BUG]  [BUGGY]  Iterator  <  String>  it  =  options.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  it  =  options.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  options.iterator();	  Iterator    <    String>    it    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
25	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.arguments.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  it  =  this.arguments.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  this.arguments.iterator();	  Iterator    <    String>    it    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
26	[BUG]  [BUGGY]  Iterator  <  String>  it  =  properties.iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  it  =  properties.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  properties.iterator();	  Iterator    <    String>    it    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
27	[BUG]  [BUGGY]  Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
28	[BUG]  [BUGGY]  Iterator  <  String>  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
29	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }	  Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
30	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!str.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!str.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!str.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(str.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
31	[BUG]  [BUGGY]  ListIterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(str.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
32	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t[iter.    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
33	[BUG]  [BUGGY]  For(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  For(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
34	[BUG]  [BUGGY]  For(Iterator  it  =  this.arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  this.arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  this.arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  For(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
35	[BUG]  [BUGGY]  IllegalArgumentIterator  iterator  =  options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  IllegalArgumentIterator  iterator  =  options.iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	IllegalArgumentIterator  iterator  =  options.iterator();	  Ilerator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
36	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
37	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
38	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option  ==  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option  ==  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str);  if(option  ==  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }	  Option    option    =    options.getOption(t,    str);    if(option!=    null)    {    for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
39	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  properties.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  properties.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  properties.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }	  Option    option    =    options.getOption(t,    str);    if(option!=    null)    {    for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
40	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(!t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
41	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext()  &&!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext()  &&!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext()  &&!t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(!t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
42	[BUG]  [BUGGY]  Option  options  =  opts.getOption(t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  opts.getOption(t);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  opts.getOption(t);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
43	[BUG]  [BUGGY]  Option  options  =  opt.getOption(t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  opt.getOption(t);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  opt.getOption(t);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
44	[BUG]  [BUGGY]  Option  options  =  iterator.getOption(t);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  iterator.getOption(t);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  iterator.getOption(t);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
45	[BUG]  [BUGGY]  Option  options  =  options.getOptions(t);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  options.getOptions(t);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  options.getOptions(t);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
46	[BUG]  [BUGGY]  ListIterator  iterator  =  options.getOptionList().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.getOptionList().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.getOptionList().iterator();	  ListIterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
47	[BUG]  [BUGGY]  ListIterator  iterator  =  options.getAllOptions().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.getAllOptions().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.getAllOptions().iterator();	  ListIterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
48	[BUG]  [BUGGY]  Iterator  iterator  =  options.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  options.getOptions().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  options.getOptions().iterator();	  ListIterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
49	[BUG]  [BUGGY]  Iterator  it  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  this.options.iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  this.options.iterator();	  Iterator    it    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
50	[BUG]  [BUGGY]  Iterator  it  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  arguments.iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  arguments.iterator();	  Iterator    it    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
51	[BUG]  [BUGGY]  Iterator  it  =  opts.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  opts.iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  opts.iterator();	  Iterator    it    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
52	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
53	[BUG]  [BUGGY]  For(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
54	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  while(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.iterator();  while(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  while(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
55	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption,  arguments);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  stopAtNonOption,  arguments);	  Option    option    =    options.getOption(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
56	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  blockAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  blockAtNonOption);	  Option    option    =    options.getOption(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
57	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption,  properties);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption,  properties);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  stopAtNonOption,  properties);	  Option    option    =    options.getOption(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
58	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  if(!stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.iterator();  if(!stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  if(!stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
61	[BUG]  [BUGGY]  try  {  for(Iterator  it  =  options.keySet().iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  for(Iterator  it  =  options.keySet().iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  for(Iterator  it  =  options.keySet().iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
62	[BUG]  [BUGGY]  Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
63	[BUG]  [BUGGY]  Iterator  <  String>  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
64	[BUG]  [BUGGY]  try  {  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
65	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  properties.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  properties.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  for(Iterator  it  =  properties.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
66	[BUG]  [BUGGY]  ListIterator  iterator  =  options.listIterator(t,  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.listIterator(t,  arguments);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.listIterator(t,  arguments);	  ListIterator    iterator    =    options.listIterator(t);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
67	[BUG]  [BUGGY]  ListIterator  iterator  =  options.listIterator(str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.listIterator(str);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.listIterator(str);	  ListIterator    iterator    =    options.listIterator(t);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
68	[BUG]  [BUGGY]  ListIterator  iterator  =  options.listIterator(t,  argumentList);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.listIterator(t,  argumentList);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.listIterator(t,  argumentList);	  ListIterator    iterator    =    options.listIterator(t);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
69	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  try  {  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  while(!stopAtNonOption)  {  try  {  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	while(!stopAtNonOption)  {  try  {  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
70	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  while(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	while(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  if(stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
72	[BUG]  [BUGGY]  For(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next());  }	  if(stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
73	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	if(stopAtNonOption)  {  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }	  Option    option    =    options.getOption(str);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
74	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  cmd.addArg(t[iter.next().toString()  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  cmd.addArg(t[iter.next().toString()  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  cmd.addArg(t[iter.next().toString()	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t[iter.next().toString()    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
75	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.next().toString()  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.next().toString()  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.next().toString()	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t[iter.next().toString()    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
76	[BUG]  [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  opts.values().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
77	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(!t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!test.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!test.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!test.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(!t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
79	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments,  stopAtNonOption);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  arguments,  stopAtNonOption);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  arguments,  stopAtNonOption);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t,    arguments);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
80	[BUG]  [BUGGY]  Iterator  iterator  =  opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  opts.keySet().iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  opts.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
81	[BUG]  [BUGGY]  For(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext())    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
82	[BUG]  [BUGGY]  ListIterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext())    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
83	[BUG]  [BUGGY]  Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
84	[BUG]  [BUGGY]  Ilerator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Ilerator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Ilerator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
85	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  opts.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  Option>  it  =  opts.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  opts.iterator();	  Iterator    <    Option>    it    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
86	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  Option>  it  =  this.options.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  this.options.iterator();	  Iterator    <    Option>    it    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
87	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  Option>  it  =  options.values().iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  options.values().iterator();	  Iterator    <    Option>    it    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
88	[BUG]  [BUGGY]  Iterator  it  =  properties.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  properties.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  properties.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
89	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  iterator  =  this.options.iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  iterator  =  this.options.iterator();	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
90	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  properties.iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  iterator  =  properties.iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  iterator  =  properties.iterator();	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
91	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  iterator  =  options.values().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  iterator  =  options.values().iterator();	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
92	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(str,  stopAtNonOption);	  Option    option    =    options.getOption(t,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
93	[BUG]  [BUGGY]  Options  option  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Options  option  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Options  option  =  options.getOption(t,  stopAtNonOption);	  Option    option    =    options.getOption(t,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
94	[BUG]  [BUGGY]  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  options.getOption(t,  stopAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	options.getOption(t,  stopAtNonOption);	  Option    option    =    options.getOption(t,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
95	[BUG]  [BUGGY]  Option  options  =  opts.getOptions();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  opts.getOptions();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  opts.getOptions();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
96	[BUG]  [BUGGY]  Option  options  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  opt.getOptions();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  opt.getOptions();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
97	[BUG]  [BUGGY]  Option  options  =  iterator.getOptions();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  iterator.getOptions();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  iterator.getOptions();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
98	[BUG]  [BUGGY]  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    if(stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
99	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  }	  Iterator    <    String>    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
100	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  properties.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  iterator  =  properties.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  iterator  =  properties.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);	  Iterator    <    String>    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
101	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
102	[BUG]  [BUGGY]  ListIterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
103	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
104	[BUG]  [BUGGY]  ListIterator  iterator  =  options.values().listIterator(t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.values().listIterator(t);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.values().listIterator(t);	  ListIterator    iterator    =    options.values().listIterator();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
105	[BUG]  [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  this.arguments.iterator();	  Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
106	[BUG]  [BUGGY]  Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  ListIterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
107	[BUG]  [BUGGY]  ListIterator  iterator  =  opts.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  opts.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  opts.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  ListIterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
108	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
109	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
110	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
111	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOptions();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOptions();	  Option    options    =    options.getOptions();    if(options!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
112	[BUG]  [BUGGY]  For(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  For(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
113	[BUG]  [BUGGY]  For(Iterator  it  =  this.arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  this.arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  this.arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  For(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
114	[BUG]  [BUGGY]  For(Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  For(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
115	[BUG]  [BUGGY]  while(it.hasNext())  {  try  {  stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  while(it.hasNext())  {  try  {  stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	while(it.hasNext())  {  try  {  stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }	  try    ==    stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
116	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  cmd.addArg(it.next().getValue());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  ==  stopAtNonOption)  {  cmd.addArg(it.next().getValue());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  cmd.addArg(it.next().getValue());  }	  try    ==    stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
117	[BUG]  [BUGGY]  try  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  cmd.addArg(it.next().getKey());  }	  try    ==    stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
118	[BUG]  [BUGGY]  ListIterator  iterator  =  t.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  t.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  t.iterator();	  ListIterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
119	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  opt  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  opt  =  options.getOption(t,  stopAtNonOption);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
120	[BUG]  [BUGGY]  Option  opt  =  options.getOption(str);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  opt  =  options.getOption(str);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  opt  =  options.getOption(str);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
121	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  opt  =  options.getOption(t,  eatTheRest);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  opt  =  options.getOption(t,  eatTheRest);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
122	[BUG]  [BUGGY]  ListIterator  iterator  =  options.keySet().listIterator(t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.keySet().listIterator(t);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.keySet().listIterator(t);	  ListIterator    iterator    =    options.keySet().listIterator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
123	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  if(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.iterator();  if(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  if(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    opts.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
124	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(str,  arguments);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(str,  arguments);	  Option    option    =    options.getOption(t,    str);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
125	[BUG]  [BUGGY]  ListIterator  iterator  =  options.opts().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.opts().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.opts().iterator();	  ListIterator    iterator    =    options.options().iterator();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
126	[BUG]  [BUGGY]  Iterator  iterator  =  options.options().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  options.options().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  options.options().iterator();	  ListIterator    iterator    =    options.options().iterator();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
127	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  arguments,  stopAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(t,    arguments);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
128	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  this.arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  this.arguments);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  this.arguments);	  Option    option    =    options.getOption(t,    arguments);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
129	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  this.options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  this.options);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  this.options);	  Option    option    =    options.getOption(t,    arguments);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
130	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =(Option)iterator.next();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =(Option)iterator.next();	  Option    option    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
131	[BUG]  [BUGGY]  Option  option  =  iterator.getOption(t);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  iterator.getOption(t);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  iterator.getOption(t);	  Option    option    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
132	[BUG]  [BUGGY]  Option  option  =  iterator.next()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  iterator.next()  :  null;  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  iterator.next()  :  null;	  Option    option    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
133	[BUG]  [BUGGY]  AssertionFailedError.checkArgument(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  AssertionFailedError.checkArgument(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	AssertionFailedError.checkArgument(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  AssertionFailedError.checkArgument(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
134	[BUG]  [BUGGY]  AssertionFailedError.checkArgument(!stopAtNonOption  &&  options.size()  >  0)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  AssertionFailedError.checkArgument(!stopAtNonOption  &&  options.size()  >  0)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	AssertionFailedError.checkArgument(!stopAtNonOption  &&  options.size()  >  0)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  AssertionFailedError.checkArgument(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
135	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  iterator,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  iterator,  eatTheRest);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  iterator,  eatTheRest);	  Option    option    =    options.getOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
136	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  iterator,  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  iterator,  arguments);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  iterator,  arguments);	  Option    option    =    options.getOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
137	[BUG]  [BUGGY]  Option  option  =  iterator.getOption(t,  options);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  iterator.getOption(t,  options);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  iterator.getOption(t,  options);	  Option    option    =    options.getOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
138	[BUG]  [BUGGY]  Iterator  <  String>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
139	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
140	[BUG]  [BUGGY]  AssertionFailedError.checkState(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  AssertionFailedError.checkState(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	AssertionFailedError.checkState(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  AssertionFailedError.checkState(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
141	[BUG]  [BUGGY]  AssertionFailedError.checkState(!stopAtNonOption  &&  options.size()  >  0)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  AssertionFailedError.checkState(!stopAtNonOption  &&  options.size()  >  0)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	AssertionFailedError.checkState(!stopAtNonOption  &&  options.size()  >  0)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  AssertionFailedError.checkState(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
142	[BUG]  [BUGGY]  AssertionFailedError.checkState(!stopAtNonOption  &&  options.isEmpty())  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  AssertionFailedError.checkState(!stopAtNonOption  &&  options.isEmpty())  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	AssertionFailedError.checkState(!stopAtNonOption  &&  options.isEmpty())  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  AssertionFailedError.checkState(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
143	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  Option>  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  Iterator    <    Option>    it    =    options.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
144	[BUG]  [BUGGY]  Option  option  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  Iterator    <    Option>    it    =    options.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
145	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }	  Iterator    <    Option>    it    =    options.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
146	[BUG]  [BUGGY]  try  >>  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  >>  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  >>  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    ==    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
147	[BUG]  [BUGGY]  try  >>  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  >>  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  >>  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    ==    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
148	[BUG]  [BUGGY]  try  ==  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  ==  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    ==    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
149	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	if(stopAtNonOption)  {  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }	  Option    option    =    options.getOption(str);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
150	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  str,  eatTheRest);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str,  eatTheRest);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
151	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  str,  stopAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str,  stopAtNonOption);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
152	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  null);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  str,  null);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str,  null);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
153	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
154	[BUG]  [BUGGY]  Iterator  <  String>  it  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  it  =  options.values().iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  options.values().iterator();	  Iterator    <    String>    it    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
155	[BUG]  [BUGGY]  Iterator  <  String>  it  =  opts.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  it  =  opts.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  opts.iterator();	  Iterator    <    String>    it    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
156	[BUG]  [BUGGY]  Iterator  iterator  =  optionOptions.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  optionOptions.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  optionOptions.iterator();	  Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
157	[BUG]  [BUGGY]  ListIterator  iterator  =  option.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  option.getOptions().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  option.getOptions().iterator();	  ListIterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
158	[BUG]  [BUGGY]  ListIterator  iterator  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.getOptions();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.getOptions();	  ListIterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
159	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  argument);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  argument);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  argument);	  Option    option    =    options.getOption(t,    str);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
160	[BUG]  [BUGGY]  Iterator  options  =  options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  options  =  options.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  options  =  options.iterator();	  if(stopAtNonOption)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
161	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext())    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
162	[BUG]  [BUGGY]  ListIterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext())    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
163	[BUG]  [BUGGY]  Iterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  options.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext())    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
164	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
165	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
166	[BUG]  [BUGGY]  For(Iterator  it  =  options.options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  options.options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  options.options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  For(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
167	[BUG]  [BUGGY]  For(Iterator  it  =  options.getOptions();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  options.getOptions();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  options.getOptions();  it.hasNext();)  {  cmd.addArg(it.next());  }	  For(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
168	[BUG]  [BUGGY]  For(Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  For(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
169	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  this.stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  this.stopAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  this.stopAtNonOption);	  Option    option    =    options.getOption(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
170	[BUG]  [BUGGY]  ListIterator  iterator  =  options.options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.options.keySet().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.options.keySet().iterator();	  ListIterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
171	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
172	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
173	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
174	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
175	[BUG]  [BUGGY]  Ilerator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Ilerator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Ilerator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  Iterator    <    Option>    it    =    options.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
176	[BUG]  [BUGGY]  ListIterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  Iterator    <    Option>    it    =    options.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
177	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  cmd);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  cmd);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  cmd);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
178	[BUG]  [BUGGY]  ListIterator  iterator  =  options.listIterator(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.listIterator(t,  stopAtNonOption);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.listIterator(t,  stopAtNonOption);	  ListIterator    iterator    =    options.listIterator(t);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
179	[BUG]  [BUGGY]  ListIterator  iterator  =  options.listIterator(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.listIterator(t,  eatTheRest);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.listIterator(t,  eatTheRest);	  ListIterator    iterator    =    options.listIterator(t);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
180	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
181	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(t.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(t.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(t.next());  }	  Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
182	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.keySet().iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
183	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  iterator  =  options.keySet().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  iterator  =  options.keySet().iterator();	  Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
184	[BUG]  [BUGGY]  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
185	[BUG]  [BUGGY]  try  {  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
186	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(options.next());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(options.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(options.next());  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(options.next());    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
187	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(options.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(options.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(options.next());  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(options.next());    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
188	[BUG]  [BUGGY]  ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
189	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
190	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(opt.next());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(opt.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(opt.next());  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
191	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
192	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(t.equals(options.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(t.equals(options.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(t.equals(options.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
193	[BUG]  [BUGGY]  ListIterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
194	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopsAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  stopsAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  stopsAtNonOption);	  Option    option    =    options.getOption(t,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
195	[BUG]  [BUGGY]  if(options!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  if(options!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	if(options!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }	  Option    options    =    options.getOptions();    if(options!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
196	[BUG]  [BUGGY]  ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    if(stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
197	[BUG]  [BUGGY]  for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    if(stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
198	[BUG]  [BUGGY]  for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
199	[BUG]  [BUGGY]  AssertionFailedError.checkArgument(!stopAtNonOption  &&  options.isEmpty())  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  AssertionFailedError.checkArgument(!stopAtNonOption  &&  options.isEmpty())  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	AssertionFailedError.checkArgument(!stopAtNonOption  &&  options.isEmpty())  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  AssertionFailedError.checkArgument(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
200	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!t.equals(iterator.getKey()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!t.equals(iterator.getKey()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!t.equals(iterator.getKey()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(!t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
201	[BUG]  [BUGGY]  Option  option  =  options.next();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.next();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.next();	  Option    option    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
202	[BUG]  [BUGGY]  Iterator  <  String>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
203	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());	  if(stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
204	[BUG]  [BUGGY]  IllegalArgumentIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  IllegalArgumentIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	IllegalArgumentIterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);	  Ilerator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
205	[BUG]  [BUGGY]  For(Iterator  it  =  options.options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  options.options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  options.options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  For(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
206	[BUG]  [BUGGY]  For(Iterator  it  =  options.getOptions();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  For(Iterator  it  =  options.getOptions();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  options.getOptions();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  For(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
207	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(!eatTheRest)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(!eatTheRest)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(!eatTheRest)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  Option    option    =    options.getOption(t);    if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
208	[BUG]  [BUGGY]  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    ==    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
209	[BUG]  [BUGGY]  for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    ==    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
210	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  block);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  block);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  block);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t,    arguments);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
211	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  eatTheRest);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t,    arguments);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
212	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(test);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
213	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(opt!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(test);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
214	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  opt.getOption(str);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  opt.getOption(str);	  Option    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
215	[BUG]  [BUGGY]  Iterator  it  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.values().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.values().iterator();	  Iterator    it    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
216	[BUG]  [BUGGY]  Iterator  it  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.keySet().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.keySet().iterator();	  Iterator    it    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
217	[BUG]  [BUGGY]  ((  CommandLine)iterator.next()).addArg(str);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ((  CommandLine)iterator.next()).addArg(str);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	((  CommandLine)iterator.next()).addArg(str);	  try    ==    stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
218	[BUG]  [BUGGY]  parse(opt,  iterator.next());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  parse(opt,  iterator.next());  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	parse(opt,  iterator.next());	  try    ==    stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
219	[BUG]  [BUGGY]  ((  CommandLine)iterator.next()).addArg(t);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ((  CommandLine)iterator.next()).addArg(t);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	((  CommandLine)iterator.next()).addArg(t);	  try    ==    stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
220	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);	  Iterator    <    String>    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
221	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  opt  =  options.getOption(t,  blockAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  opt  =  options.getOption(t,  blockAtNonOption);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
222	[BUG]  [BUGGY]  Iterator  iterator  =  options.properties.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  options.properties.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  options.properties.iterator();	  Iterator    iterator    =    properties.iterator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
223	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
224	[BUG]  [BUGGY]  Ilerator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Ilerator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Ilerator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
225	[BUG]  [BUGGY]  ListIterator  iterator  =  optionOptions.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  optionOptions.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  optionOptions.iterator();	  ListIterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
226	[BUG]  [BUGGY]  ListIterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    opts.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
227	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  iterator,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  iterator,  stopAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  iterator,  stopAtNonOption);	  Option    option    =    options.getOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
228	[BUG]  [BUGGY]  Iterator  iterator  =  options.properties.keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  options.properties.keySet().iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  options.properties.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
229	[BUG]  [BUGGY]  Option  options  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  options.getOption(t,  stopAtNonOption);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
230	[BUG]  [BUGGY]  Option  options  =  options.getOption(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  options.getOption(t,  eatTheRest);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  options.getOption(t,  eatTheRest);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
231	[BUG]  [BUGGY]  Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  opts.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);	  Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(str);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
232	[BUG]  [BUGGY]  try  {  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
233	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t[iter.    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
234	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!t.equals(options.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!t.equals(options.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!t.equals(options.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(!t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
235	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  null);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  null);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  null);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t,    iterator);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
236	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  iterator);  if(option  ==  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  iterator);  if(option  ==  null)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  iterator);  if(option  ==  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t,    iterator);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
237	[BUG]  [BUGGY]  ListIterator  iterator  =  options.options.keyList().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.options.keyList().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.options.keyList().iterator();	  ListIterator    iterator    =    options.keyList().iterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
238	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  Option>  it  =  options.keySet().iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  options.keySet().iterator();	  Iterator    <    Option>    it    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
239	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
240	[BUG]  [BUGGY]  ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
241	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  while(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  while(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  options.iterator();  while(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
242	[BUG]  [BUGGY]  IllegalArgumentIterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  IllegalArgumentIterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	IllegalArgumentIterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  ListIterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
243	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  argument);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  argument);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  argument);  if(option!=  null)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t,    str);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
244	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.next().toString()  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.next().toString()  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.next().toString()	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(opt[iter.next().toString());    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
245	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.next().toString());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.next().toString());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.next().toString());  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(opt[iter.next().toString());    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
246	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!str.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!str.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!str.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(str.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
247	[BUG]  [BUGGY]  ListIterator  iterator  =  options.opts.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.opts.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.opts.iterator();	  ListIterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
248	[BUG]  [BUGGY]  Iterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
249	[BUG]  [BUGGY]  Iterator  <  String>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
250	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  t);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  t);	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
251	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(!t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
252	[BUG]  [BUGGY]  ListIterator  iterator  =  options.findOptions().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.findOptions().iterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.findOptions().iterator();	  ListIterator    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
253	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(option.next());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(option.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(option.next());  }	  Option    option    =    options.getOption(t);    if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
254	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(opt.next());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(opt.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(opt.next());  }	  Option    option    =    options.getOption(t);    if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
255	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  t.next());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  t.next());  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  t.next());	  Option    option    =    options.getOption(t);    if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
256	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  block);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  block);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  block);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }	  Option    option    =    options.getOption(t,    str);    if(option!=    null)    {    for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
257	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  null);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  null);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  null);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }	  Option    option    =    options.getOption(t,    str);    if(option!=    null)    {    for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
258	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
259	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null  &&  option.hasNext())  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null  &&  option.hasNext())  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null  &&  option.hasNext())  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
260	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str,  option);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str,  option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str,  option);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(str);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
261	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);	  Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(str);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
262	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  while(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  it  =  options.iterator();  while(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  while(it.hasNext())  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    opts.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
263	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null  &&  option.hasNext())  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null  &&  option.hasNext())  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null  &&  option.hasNext())  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(test);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
264	[BUG]  [BUGGY]  AssertionFailedError.checkState(!stopAtNonOption,  eatTheRest)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  AssertionFailedError.checkState(!stopAtNonOption,  eatTheRest)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	AssertionFailedError.checkState(!stopAtNonOption,  eatTheRest)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	  AssertionFailedError.checkState(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
265	[BUG]  [BUGGY]  AssertionFailedError.checkState(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getValue());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  AssertionFailedError.checkState(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getValue());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	AssertionFailedError.checkState(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getValue());  }	  AssertionFailedError.checkState(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
266	[BUG]  [BUGGY]  try  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getValue());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getValue());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getValue());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
267	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    if(stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
268	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }	  Option    option    =    options.getOption(t,    str);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
269	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  argument);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  argument);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  argument);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }	  Option    option    =    options.getOption(t,    str);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
270	[BUG]  [BUGGY]  ListIterator  iterator  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  arguments.iterator();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  arguments.iterator();	  ListIterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
271	[BUG]  [BUGGY]  if(options!=  null)  {  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  if(options!=  null)  {  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	if(options!=  null)  {  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.	  Option    option    =    options.getOption(str);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
272	[BUG]  [BUGGY]  if(options!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  if(options!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	if(options!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t[iter.    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
273	[BUG]  [BUGGY]  Iterator  <  String>  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  String>  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
274	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(str.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
275	[BUG]  [BUGGY]  ListIterator  iterator  =  options.getOptions().listIterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  ListIterator  iterator  =  options.getOptions().listIterator();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.getOptions().listIterator();	  ListIterator    iterator    =    options.keySet().listIterator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
276	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(opt[iter.next().toString());    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
277	[BUG]  [BUGGY]  Options  options  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Options  options  =  options.getOptions();  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Options  options  =  options.getOptions();	  Option    options    =    options.getOptions();    if(options!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
278	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }	  Option    option    =    options.getOption(t);    if(option    ==    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
279	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  iterator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  str,  iterator);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str,  iterator);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
280	[BUG]  [BUGGY]  try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
281	[BUG]  [BUGGY]  try  ==  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  ==  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
282	[BUG]  [BUGGY]  try  ==  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  ==  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }	  try    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
283	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  ListIterator    iterator    =    options.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
284	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  iterator,  buf);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  iterator,  buf);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  iterator,  buf);	  Option    option    =    options.getOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
285	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }	  if(stopAtNonOption)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
286	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  for(Iterator  iterator  =  options.entrySet().iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }	  if(stopAtNonOption)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
287	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  cmd.addArg(t[iter.  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  cmd.addArg(t[iter.  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  cmd.addArg(t[iter.	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t[iter.next().toString()    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
288	[BUG]  [BUGGY]  Option  options  =  options.getOption(t,  iterator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  options.getOption(t,  iterator);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  options.getOption(t,  iterator);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
289	[BUG]  [BUGGY]  Option  options  =  options.getOption(t,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  options.getOption(t,  arguments);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  options.getOption(t,  arguments);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
290	[BUG]  [BUGGY]  Option  options  =  options.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  options  =  options.getOption(t,  str);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  options.getOption(t,  str);	  Option    options    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
291	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getValue());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getValue());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getValue());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
292	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  block,  argument);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  block,  argument);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  block,  argument);	  Option    option    =    options.getOption(t,    block);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
293	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  cmd.addArg(it.next().getKey(),  str);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  ==  stopAtNonOption)  {  cmd.addArg(it.next().getKey(),  str);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  cmd.addArg(it.next().getKey(),  str);  }	  try    ==    stopAtNonOption)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
294	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null  &&  option.hasNext())  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null  &&  option.hasNext())  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null  &&  option.hasNext())  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }	  Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
295	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  this,  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  options.getOption(t,  this,  arguments);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  this,  arguments);	  Option    option    =    options.getOption(t,    this);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
296	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  iterator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  opt  =  options.getOption(t,  iterator);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  opt  =  options.getOption(t,  iterator);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
297	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  opt  =  options.getOption(t,  str);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  opt  =  options.getOption(t,  str);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
298	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  opt  =  options.getOption(t,  arguments);  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  opt  =  options.getOption(t,  arguments);	  Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
299	[BUG]  [BUGGY]  Option  option  =  iterator.remove();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  Option  option  =  iterator.remove();  [BUGGY]        processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  iterator.remove();	  Option    option    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
300	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  while(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	while(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  try    ==    stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
301	[BUG]  [BUGGY]  try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  String  str  =  (String)  iterator.next();  if  (!     "--     ".equals(str))  {  cmd.addArg(str);  }  }  }      [BUGGY]  try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]      }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	  if(stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
