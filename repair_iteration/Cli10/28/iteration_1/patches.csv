bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  try  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  try  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
2	[BUG]  [BUGGY]  For(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  For(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
3	[BUG]  [BUGGY]  try  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  try  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
4	[BUG]  [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  ListIterator  iterator  =  options.keySet().iterator();  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.keySet().iterator();	  ListIterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  ListIterator  iterator  =  options.keyList().iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  ListIterator  iterator  =  options.keyList().iterator();  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.keyList().iterator();	  ListIterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  iterator  =  this.options.iterator();  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  this.options.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  Iterator  iterator  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  iterator  =  arguments.iterator();  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  arguments.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  Iterator  iterator  =  properties.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  iterator  =  properties.iterator();  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  properties.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(str);  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(str);	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(str.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  ListIterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  ListIterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  options.getOptions();	      if(!stopAtNonOption)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
16	[BUG]  [BUGGY]  Option  options  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  options  =  options.getOption(t);  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  options.getOption(t);	      if(!stopAtNonOption)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
17	[BUG]  [BUGGY]  For(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  For(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	For(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
18	[BUG]  [BUGGY]  Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
20	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  arguments);  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  arguments);	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t[iter.next().toString());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  str);  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str);	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t[iter.next().toString());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
24	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
25	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
26	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
27	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  it  =  options.iterator();  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  ListIterator  iterator  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  ListIterator  iterator  =  this.options.iterator();  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  this.options.iterator();	      ListIterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
29	[BUG]  [BUGGY]  ListIterator  iterator  =  opts.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  ListIterator  iterator  =  opts.iterator();  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  opts.iterator();	      ListIterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
30	[BUG]  [BUGGY]  Option  option  =  iterator.next();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  iterator.next();  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  iterator.next();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest);  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  eatTheRest);	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  ListIterator  iterator  =  options.listIterator(t);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  ListIterator  iterator  =  options.listIterator(t);  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.listIterator(t);	  ListIterator    iterator    =    options.listIterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
33	[BUG]  [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
34	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
35	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  cmd.addArg(option);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
36	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  stopAtNonOption);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  ListIterator  iterator  =  options.keySet().listIterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  ListIterator  iterator  =  options.keySet().listIterator();  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.keySet().listIterator();	  ListIterator    iterator    =    options.listIterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
38	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.next().toString()  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.next().toString()  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.next().toString()	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t[iter.next().toString());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.next().toString());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.next().toString());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(opt[iter.next().toString());  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t[iter.next().toString());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Ilerator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);	  Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
43	[BUG]  [BUGGY]  Iterator  iterator  =  opts.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  iterator  =  opts.iterator();  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  opts.iterator();	  Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
44	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  opt  =  options.getOption(t);  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  opt  =  options.getOption(t);	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
45	[BUG]  [BUGGY]  AssertionFailedError.checkState(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  AssertionFailedError.checkState(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	AssertionFailedError.checkState(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
46	[BUG]  [BUGGY]  AssertionFailedError.checkArgument(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  AssertionFailedError.checkArgument(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	AssertionFailedError.checkArgument(!stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
47	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  if(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	if(stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
48	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(options.next());  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(options.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(options.next());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
49	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  if(stopAtNonOption)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	if(stopAtNonOption)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }	      if(!stopAtNonOption)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
50	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  if(options!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  options  =  options.getOptions();  if(options!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  options  =  options.getOptions();  if(options!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(iterator.next());  }	      if(!stopAtNonOption)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
51	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(option);  }	      if(!stopAtNonOption)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
52	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option  ==  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(str);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  cmd.addArg(t);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  options.iterator();	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
56	[BUG]  [BUGGY]  ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
57	[BUG]  [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  Option>  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
58	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  arguments);  if(option!=  null)  {  cmd.addArg(option);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  Iterator  iterator  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  iterator  =  options.keySet().iterator();  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  options.keySet().iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  Iterator  iterator  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  iterator  =  options.values().iterator();  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  options.values().iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
62	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  this);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  this);  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  this);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  ListIterator  iterator  =  options.options().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  ListIterator  iterator  =  options.options().iterator();  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.options().iterator();	  ListIterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
64	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
65	[BUG]  [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  if(!t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
66	[BUG]  [BUGGY]  ListIterator  iterator  =  options.values().listIterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  ListIterator  iterator  =  options.values().listIterator();  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.values().listIterator();	  ListIterator    iterator    =    options.listIterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
67	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  iterator  =  options.iterator();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext())  {  if(t.equals(iterator.next()))  {  cmd.addArg(t);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(t.equals(iterator.next()))    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
69	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
70	[BUG]  [BUGGY]  Iterator  <  String>  it  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  <  String>  it  =  arguments.iterator();  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  it  =  arguments.iterator();	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
71	[BUG]  [BUGGY]  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
72	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
73	[BUG]  [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  it  =  options.iterator();  it.hasNext();)  {  if(stopAtNonOption)  {  cmd.addArg(t);  }	  for(Iterator    it    =    options.iterator();    it.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
74	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t[iter.	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t[iter.next().toString());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
75	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  str);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(t,  iterator.next());  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t,    iterator.next());    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
77	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  try  ==  stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
78	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  iterator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  iterator);  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  iterator);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
79	[BUG]  [BUGGY]  ListIterator  iterator  =  options.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  ListIterator  iterator  =  options.getOptions().iterator();  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	ListIterator  iterator  =  options.getOptions().iterator();	  ListIterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
80	[BUG]  [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	for(Iterator  iterator  =  arguments.iterator();  iterator.hasNext();)  {  if(!stopAtNonOption)  {  cmd.addArg(str);  }	  for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    if(!stopAtNonOption)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
81	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  iterator);  if(option!=  null)  {  cmd.addArg(option);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  iterator);  if(option!=  null)  {  cmd.addArg(option);  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  iterator);  if(option!=  null)  {  cmd.addArg(option);  }	      Option    option    =    options.getOption(t);    if(option    ==    null)    {    cmd.addArg(option);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
82	[BUG]  [BUGGY]  try  ==  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  try  ==  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
83	[BUG]  [BUGGY]  Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
84	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  for(Iterator  it  =  arguments.iterator();  it.hasNext();)  {  cmd.addArg(it.next().getKey());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    arguments.iterator();    it.hasNext();)    {    cmd.addArg(it.next().getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
85	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(str);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
86	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t);  if(option!=  null)  {  for(Iterator  iterator  =  options.iterator();  iterator.hasNext();)  {  cmd.addArg(test);  }	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    options.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
87	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  try  ==  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	try  ==  stopAtNonOption)  {  for(Iterator  it  =  options.iterator();  it.hasNext();)  {  cmd.addArg(it.next());  }	      if(!stopAtNonOption)    {    for(Iterator    it    =    options.iterator();    it.hasNext();)    {    cmd.addArg(it.next());    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
88	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  <  String>  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(t);	  Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
89	[BUG]  [BUGGY]  Iterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Iterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);  [BUGGY]      processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Iterator  iterator  =  options.iterator();  while(iterator.hasNext())  {  cmd.addArg(str);	  Iterator    iterator    =    options.iterator();    while(iterator.hasNext())    {    cmd.addArg(t);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
90	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  block);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  String  str  =  (String)  iterator.next();  if  (!   "--   ".equals(str))  {  cmd.addArg(str);  }  }  }    [BUGGY]  Option  option  =  options.getOption(t,  block);  [BUGGY]    }  processProperties(properties);  checkRequiredOptions();  return  cmd;  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	235	235	1	replace	Option  option  =  options.getOption(t,  block);	      Option    option    =    options.getOption(t);    if(option!=    null)    {    for(Iterator    iterator    =    arguments.iterator();    iterator.hasNext();)    {    cmd.addArg(t);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
