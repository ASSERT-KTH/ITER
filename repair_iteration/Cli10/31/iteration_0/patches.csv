bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.size());  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  [BUGGY]    List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.size());  [BUGGY]  if  (properties  ==  null)  {  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	    List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.size());		non-compiled	[CE]  illegal  start  of  type	63	None	add
2	[BUG]  [BUGGY]    List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.values());  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  {  [BUGGY]    List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.values());  [BUGGY]  if  (properties  ==  null)  {  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	    List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.values());		non-compiled	[CE]  illegal  start  of  type	63	None	add
3	[BUG]  [BUGGY]    List  <  String>  requiredOptions  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  {  [BUGGY]    List  <  String>  requiredOptions  =  Lists.newArrayList();  [BUGGY]  if  (properties  ==  null)  {  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	    List  <  String>  requiredOptions  =  Lists.newArrayList();		non-compiled	[CE]  illegal  start  of  type	63	None	add
4	[BUG]  [BUGGY]    List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.length);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  {  [BUGGY]    List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.length);  [BUGGY]  if  (properties  ==  null)  {  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	    List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.length);		non-compiled	[CE]  illegal  start  of  type	63	None	add
5	[BUG]  [BUGGY]    List  <  String>  requiredOptions  =  new  ArrayList  <  String>();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  {  [BUGGY]    List  <  String>  requiredOptions  =  new  ArrayList  <  String>();  [BUGGY]  if  (properties  ==  null)  {  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	    List  <  String>  requiredOptions  =  new  ArrayList  <  String>();		non-compiled	[CE]  illegal  start  of  type	63	None	add
6	[BUG]  [BUGGY]  if(properties!=  null)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  [BUGGY]  if(properties!=  null)  {  [BUGGY]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	if(properties!=  null)  {	if  (properties  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	62	None	replace
7	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.propertyNames().size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  {  [BUGGY]  if(properties  ==  null  ||  properties.propertyNames().size()  ==  0)  {  [BUGGY]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	if(properties  ==  null  ||  properties.propertyNames().size()  ==  0)  {	if  (properties  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	62	None	replace
8	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.hasProperty(propertyNames()))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  {  [BUGGY]  if(properties  ==  null  ||  properties.hasProperty(propertyNames()))  {  [BUGGY]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	if(properties  ==  null  ||  properties.hasProperty(propertyNames()))  {	if  (properties  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	62	None	replace
9	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  [BUGGY]  if(properties  ==  null  ||  properties.hasOption(option))  {  [BUGGY]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	if(properties  ==  null  ||  properties.hasOption(option))  {	if  (properties  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	62	None	replace
10	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  {  [BUGGY]  if(properties  ==  null  ||  properties.size()  ==  0)  {  [BUGGY]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	if(properties  ==  null  ||  properties.size()  ==  0)  {	if  (properties  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	62	None	replace
11	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.isEmpty())  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  {  [BUGGY]  if(properties  ==  null  ||  properties.isEmpty())  {  [BUGGY]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	if(properties  ==  null  ||  properties.isEmpty())  {	if  (properties  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	62	None	replace
12	[BUG]  [BUGGY]    Enumeration  <  String>  cmd  =  properties.get(option);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  [BUGGY]    Enumeration  <  String>  cmd  =  properties.get(option);  [BUGGY]  if  (properties  ==  null)  {  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	    Enumeration  <  String>  cmd  =  properties.get(option);		non-compiled	[CE]  illegal  start  of  type	63	None	add
13	[BUG]  [BUGGY]    Option  cmd  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  [BUGGY]    Option  cmd  =  options.getOption(option);  [BUGGY]  if  (properties  ==  null)  {  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	    Option  cmd  =  options.getOption(option);		non-compiled	[CE]  illegal  start  of  type	63	None	add
14	[BUG]  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.properties();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  {  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.properties();  [BUGGY]  if  (properties  ==  null)  {  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	    Enumeration  <  String>  requiredOptions  =  properties.properties();		non-compiled	[CE]  illegal  start  of  type	63	None	add
15	[BUG]  [BUGGY]    List  <  String>  requiredOptions  =  properties.properties();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  {  [BUGGY]    List  <  String>  requiredOptions  =  properties.properties();  [BUGGY]  if  (properties  ==  null)  {  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	    List  <  String>  requiredOptions  =  properties.properties();		non-compiled	[CE]  illegal  start  of  type	63	None	add
16	[BUG]  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.values();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  {  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.values();  [BUGGY]  if  (properties  ==  null)  {  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	    Enumeration  <  String>  requiredOptions  =  properties.values();		non-compiled	[CE]  illegal  start  of  type	63	None	add
17	[BUG]  [BUGGY]  if(properties  ==  null  ||  values.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  [BUGGY]  if(properties  ==  null  ||  values.size()  ==  0)  {  [BUGGY]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	251	252	1	replace	if(properties  ==  null  ||  values.size()  ==  0)  {	if  (properties  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	62	None	replace
