bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  iterator  =  options.getOption(arguments);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  iterator  =  options.getOption(arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  iterator  =  options.getOption(arguments);	  Option    iterator    =    options.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
2	[BUG]  [BUGGY]  Option  iterator  =  options.getOption(opts);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  iterator  =  options.getOption(opts);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  iterator  =  options.getOption(opts);	  Option    iterator    =    options.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
3	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  tokenList.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  tokenList.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  tokenList.iterator();	  Iterator    <    String>    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
4	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  this.requiredOptions.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  this.requiredOptions.iterator();	  Iterator    <    String>    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
5	[BUG]  [BUGGY]  Iterator  iterator  =  this.tokenList.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.tokenList.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  this.tokenList.iterator();	  Iterator    iterator    =    tokenList.iterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  this.opts.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  this.opts.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
7	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  parameters.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  parameters.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  parameters.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
8	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption,  iterator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(stopAtNonOption,  iterator);	  Option    cmd    =    options.getOption(stopAtNonOption,    options);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
9	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(stopAtNonOption,  arguments);	  Option    cmd    =    options.getOption(stopAtNonOption,    options);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
10	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(t,  options);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(t,  options);	  Option    cmd    =    options.getOption(stopAtNonOption,    options);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
11	[BUG]  [BUGGY]  Option  opt  =  options.getOption(stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  opt  =  options.getOption(stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  opt  =  options.getOption(stopAtNonOption);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
12	[BUG]  [BUGGY]  Option  opt  =  iterator.next();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  opt  =  iterator.next();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  opt  =  iterator.next();	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
13	[BUG]  [BUGGY]  Option  opt  =  iterator.getOption(opt);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  opt  =  iterator.getOption(opt);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  opt  =  iterator.getOption(opt);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
14	[BUG]  [BUGGY]  Option  opt  =  options.getOption(str);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  opt  =  options.getOption(str);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  opt  =  options.getOption(str);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
15	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(str,  arguments,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(str,  arguments,  stopAtNonOption);	  Option    cmd    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
16	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(t,  str,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(t,  str,  stopAtNonOption);	  Option    cmd    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
17	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str,  stopAtNonOption,  iterator);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(str,  stopAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(str,  stopAtNonOption,  iterator);	  Option    cmd    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
18	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str,  iterator,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(str,  iterator,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(str,  iterator,  stopAtNonOption);	  Option    cmd    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
19	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.arguments.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  this.arguments.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  this.arguments.iterator();	  Iterator    <    String>    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
20	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  opts.values().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  opts.values().iterator();	  Iterator    <    String>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
21	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  arguments,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(getArguments(),  arguments,  stopAtNonOption);	  Option    cmd    =    options.getOption(getArguments(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
22	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  iterator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  iterator);	  Option    cmd    =    options.getOption(getArguments(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
23	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(getArguments(),  arguments);	  Option    cmd    =    options.getOption(getArguments(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
24	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(t,  stopAtNonOption);	  Option    cmd    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
25	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  iterator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(t,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(t,  iterator);	  Option    cmd    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
26	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.next().toString())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while  (iterator.hasNext()  &&  iterator.next().toString())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	while  (iterator.hasNext()  &&  iterator.next().toString())  {	  while    (iterator.hasNext()    &&    iterator.next())    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
27	[BUG]  [BUGGY]  while  (iterator.hasNext()  &&  iterator.next().startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while  (iterator.hasNext()  &&  iterator.next().startsWith( "- "))  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	while  (iterator.hasNext()  &&  iterator.next().startsWith( "- "))  {	  while    (iterator.hasNext()    &&    iterator.next())    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
28	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.getOptionList().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  options.getOptionList().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  options.getOptionList().iterator();	  Iterator    <    String>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
29	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.getAllOptions().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  options.getAllOptions().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  options.getAllOptions().iterator();	  Iterator    <    String>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
30	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.getIterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  options.getIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  options.getIterator();	  Iterator    <    String>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
31	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  tokenList.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  tokenList.keySet().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  tokenList.keySet().iterator();	  Iterator    <    String>    iterator    =    optionList.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
32	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(options,  arguments,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(options,  arguments,  stopAtNonOption);	  Option    cmd    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
33	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption,  iterator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(options,  stopAtNonOption,  iterator);	  Option    cmd    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
34	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(opts,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(opts,  stopAtNonOption);	  Option    cmd    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
35	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(options,  stopAtNonOption,  arguments);	  Option    cmd    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
36	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  iterator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(stopAtNonOption,  iterator);	  Option    option    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
37	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(t,  stopAtNonOption);	  Option    option    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
38	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenList,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(tokenList,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(tokenList,  stopAtNonOption);	  Option    option    =    options.getOption(tokenList);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
39	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  tokenList);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(options,  tokenList);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(options,  tokenList);	  Option    option    =    options.getOption(tokenList);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
40	[BUG]  [BUGGY]  Option  iterator  =  options.getOption(str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  iterator  =  options.getOption(str,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  iterator  =  options.getOption(str,  stopAtNonOption);	  Option    iterator    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
41	[BUG]  [BUGGY]  Option  iterator  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  iterator  =  options.getOption(t);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  iterator  =  options.getOption(t);	  Option    iterator    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
42	[BUG]  [BUGGY]  Option  option  =  options.getOption(opts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(opts,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(opts,  stopAtNonOption);	  Option    option    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(options,  arguments,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(options,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption,  iterator);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(options,  stopAtNonOption,  iterator);	  Option    option    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(opt,  stopAtNonOption);	  Option    option    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  iterator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(t,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(t,  iterator);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
47	[BUG]  [BUGGY]  Iterator  iterator  =  tokenList.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  tokenList.keySet().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  tokenList.keySet().iterator();	  Iterator    iterator    =    optionList.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  Iterator  iterator  =  arguments.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  arguments.keySet().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  arguments.keySet().iterator();	  Iterator    iterator    =    optionList.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
49	[BUG]  [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  this.arguments.iterator();	  Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  Iterator  iterator  =  options.options.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  options.options.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  options.options.iterator();	  Iterator    iterator    =    options.options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
51	[BUG]  [BUGGY]  Iterator  iterator  =  options.options.values().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  options.options.values().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  options.options.values().iterator();	  Iterator    iterator    =    options.options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
52	[BUG]  [BUGGY]  Iterator  iterator  =  options.opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  options.opts.keySet().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  options.opts.keySet().iterator();	  Iterator    iterator    =    options.options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
53	[BUG]  [BUGGY]  Option  iterator  =  options.getOption(stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  iterator  =  options.getOption(stopAtNonOption,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  iterator  =  options.getOption(stopAtNonOption,  arguments);	  Option    iterator    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
54	[BUG]  [BUGGY]  Option  iterator  =  options.getOption(arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  iterator  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  iterator  =  options.getOption(arguments,  stopAtNonOption);	  Option    iterator    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
55	[BUG]  [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  opts.values().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
56	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  iterator,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  iterator,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(getArguments(),  iterator,  stopAtNonOption);	  Option    cmd    =    options.getOption(getArguments(),    iterator);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
57	[BUG]  [BUGGY]  Option  cmd  =  iterator.getOption(getArguments(),  options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  iterator.getOption(getArguments(),  options);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  iterator.getOption(getArguments(),  options);	  Option    cmd    =    options.getOption(getArguments(),    iterator);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
58	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  iterator,  stoppingAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  iterator,  stoppingAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(getArguments(),  iterator,  stoppingAtNonOption);	  Option    cmd    =    options.getOption(getArguments(),    iterator);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
59	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(blockAtNonOption,  iterator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(blockAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(blockAtNonOption,  iterator);	  Option    cmd    =    options.getOption(blockAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
60	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(blockAtNonOption,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(blockAtNonOption,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(blockAtNonOption,  stopAtNonOption);	  Option    cmd    =    options.getOption(blockAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
61	[BUG]  [BUGGY]  Option  iterator  =  options.getOption(options,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  iterator  =  options.getOption(options,  arguments,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  iterator  =  options.getOption(options,  arguments,  stopAtNonOption);	  Option    iterator    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
62	[BUG]  [BUGGY]  Option  iterator  =  options.getOption(opts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  iterator  =  options.getOption(opts,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  iterator  =  options.getOption(opts,  stopAtNonOption);	  Option    iterator    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
63	[BUG]  [BUGGY]  Option  iterator  =  options.getOption(options,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  iterator  =  options.getOption(options,  stopAtNonOption,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  iterator  =  options.getOption(options,  stopAtNonOption,  arguments);	  Option    iterator    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
64	[BUG]  [BUGGY]  Option  iterator  =  options.getOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  iterator  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  iterator  =  options.getOption(opt,  stopAtNonOption);	  Option    iterator    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
65	[BUG]  [BUGGY]  Iterator  iterator  =  tokenList.listIterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  tokenList.listIterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  tokenList.listIterator();	  Iterator    iterator    =    tokenList.next();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  Iterator  iterator  =  options.next();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  options.next();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  options.next();	  Iterator    iterator    =    tokenList.next();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
67	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();	  Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
68	[BUG]  [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  this.opts.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
69	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(t,  str,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(t,  str,  stopAtNonOption);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
70	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(str,  arguments,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(str,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  str);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  str);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(stopAtNonOption,  str);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption,  iterator);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption,  iterator);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(str,  stopAtNonOption,  iterator);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  arguments);	  Option    cmd    =    options.getOption(getArguments(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
74	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  argument);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  argument);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(getArguments(),  argument);	  Option    cmd    =    options.getOption(getArguments(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
75	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.getOptions().iterator(0);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  options.getOptions().iterator(0);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  options.getOptions().iterator(0);	  Iterator    <    String>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
76	[BUG]  [BUGGY]  while(iterator.hasNext()  ||  iterator.next())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  while(iterator.hasNext()  ||  iterator.next())  {  [BUGGY]      {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	while(iterator.hasNext()  ||  iterator.next())  {	  while    (iterator.hasNext()    &&    iterator.next())    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
77	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(options,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(options,  arguments);	  Option    option    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
78	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(options);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(options);	  Option    cmd    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
79	[BUG]  [BUGGY]  Option  opt  =  options.getOption(blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  opt  =  options.getOption(blockAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  opt  =  options.getOption(blockAtNonOption);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
80	[BUG]  [BUGGY]  Option  opt  =  options.getOption(tokenList);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  opt  =  options.getOption(tokenList);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  opt  =  options.getOption(tokenList);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
81	[BUG]  [BUGGY]  Iterator  iterator  =  neededOptions.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  neededOptions.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  neededOptions.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
82	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(opt,  stopAtNonOption);	  Option    cmd    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
83	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption,  str);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption,  str);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(stopAtNonOption,  str);	  Option    cmd    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
84	[BUG]  [BUGGY]  Iterator  iterator  =  optionList.values().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  optionList.values().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  optionList.values().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
85	[BUG]  [BUGGY]  Iterator  iterator  =  requiredOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  requiredOptions.keySet().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  requiredOptions.keySet().iterator();	  Iterator    iterator    =    optionList.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
86	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(opt,  options);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(opt,  options);	  Option    cmd    =    options.getOption(stopAtNonOption,    options);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
87	[BUG]  [BUGGY]  iterator.clear();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  iterator.clear();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	iterator.clear();	  iterator.remove();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
88	[BUG]  [BUGGY]  iterator.add( "-- ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  iterator.add( "-- ");  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	iterator.add( "-- ");	  iterator.remove();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
89	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  optionList.values().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  optionList.values().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  optionList.values().iterator();	  Iterator    <    String>    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
90	[BUG]  [BUGGY]  Option  iterator  =  options.getOption(options,  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  iterator  =  options.getOption(options,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  iterator  =  options.getOption(options,  arguments);	  Option    iterator    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
91	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opt.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  opt.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  opt.iterator();	  Iterator    <    String>    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
92	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  neededOptions.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  neededOptions.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  neededOptions.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
93	[BUG]  [BUGGY]  iterator.prependOr();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  iterator.prependOr();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	iterator.prependOr();	  iterator.remove();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
94	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  iterator();	  Iterator    <    String>    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
95	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  requiredOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  <  String>  iterator  =  requiredOptions.keySet().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  <  String>  iterator  =  requiredOptions.keySet().iterator();	  Iterator    <    String>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
96	[BUG]  [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.iterator()  :  tokenList.iterator();	  Iterator    iterator    =    this.requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
97	[BUG]  [BUGGY]  Iterator  iterator  =  options.options.list().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =  options.options.list().iterator();  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =  options.options.list().iterator();	  Iterator    iterator    =    options.options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
98	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  opt  =  options.getOption(t);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  opt  =  options.getOption(t);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
99	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption,  arguments);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(options,  stopAtNonOption,  arguments);	  Option    option    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
100	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(tokenList);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(tokenList);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(tokenList);	  Option    cmd    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
101	[BUG]  [BUGGY]  Iterator  iterator  =(this.options!=  null?  this.options.iterator()  :  null);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Iterator  iterator  =(this.options!=  null?  this.options.iterator()  :  null);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Iterator  iterator  =(this.options!=  null?  this.options.iterator()  :  null);	  Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
102	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(options,  str,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(options,  str,  stopAtNonOption);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
103	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  option  =  options.getOption(arguments,  stopAtNonOption);	  Option    option    =    options.getOption(tokenList);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
104	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  iterator,  stopsAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();        [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  iterator,  stopsAtNonOption);  [BUGGY]      while  (iterator.hasNext())  {  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }    [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	173	174	1	replace	Option  cmd  =  options.getOption(getArguments(),  iterator,  stopsAtNonOption);	  Option    cmd    =    options.getOption(getArguments(),    iterator);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
