bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opts ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption( "opts ");  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption( "opts ");	  Option    option    =    options.getOption(   "opt   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  Option  option  =  cmd.getOption( "opt ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption( "opt ");  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption( "opt ");	  Option    option    =    options.getOption(   "opt   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  arguments,  null),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  arguments,  null),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  arguments,  null),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(options,    arguments,    null));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  null,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  null,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  null,  eatTheRest);	  Option    option    =    options.getOption(str,    null,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  null,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  null,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  null,  eatTheRest);	  Option    option    =    options.getOption(str,    null,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  arguments,  null,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(str,  arguments,  null,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(str,  arguments,  null,  eatTheRest);	  Option    option    =    options.getOption(str,    null,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
7	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(str,  null,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(str,  null,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(str,  null,  eatTheRest);	  Option    option    =    options.getOption(str,    null,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
8	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(t,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(t,  null);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(t,  null);	  Option    option    =    cmd.getOption(str,    null);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
9	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(str,  arguments,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(str,  arguments,  null);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(str,  arguments,  null);	  Option    option    =    cmd.getOption(str,    null);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
10	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(options,  str,  null);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(options,  str,  null);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(options,  str,  null);	  Option    option    =    cmd.getOption(str,    null);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(options,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(options,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(options,  eatTheRest);	  Option    option    =    options.getOption(options,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
12	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  options,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  options,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  options,  eatTheRest);	  Option    option    =    options.getOption(options,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOption(opts,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(opts,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(opts,  eatTheRest);	  Option    option    =    options.getOption(options,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
14	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  null);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  str,  null);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  str,  null);	  Option    option    =    options.getOption(options,    str,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
15	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str,  arguments,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  str,  arguments,  null);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(options,  str,  arguments,  null);	  Option    option    =    options.getOption(options,    str,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
16	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str,  null,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  str,  null,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(options,  str,  null,  stopAtNonOption);	  Option    option    =    options.getOption(options,    str,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
17	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(options,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
18	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(options,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(options,  stopAtNonOption);	  Option    option    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(opts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(opts,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(opts,  stopAtNonOption);	  Option    option    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
20	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  options,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  options,  stopAtNonOption);	  Option    option    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
21	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  options,  eatTheRest));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  options,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getArguments(),  options,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
22	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  options,  stopAtNonOption),  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  options,  stopAtNonOption),  arguments);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getArguments(),  options,  stopAtNonOption),  arguments);	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  str,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  str,  stopAtNonOption);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  str,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  str,  eatTheRest);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
25	[BUG]  [BUGGY]  Option  options  =  option.getOptions();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  option.getOptions();  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  options  =  option.getOptions();	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
26	[BUG]  [BUGGY]  Options  options  =  opts.getOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Options  options  =  opts.getOptions();  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Options  options  =  opts.getOptions();	  Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
27	[BUG]  [BUGGY]  options  =  cmd.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  options  =  cmd.getOptions();  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	options  =  cmd.getOptions();	  Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
28	[BUG]  [BUGGY]  Option  option  =  cmd.getOption( "options ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption( "options ");  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption( "options ");	  Option    option    =    options.getOption(   "options   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.getOption( "options ",  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption( "options ",  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption( "options ",  eatTheRest);	  Option    option    =    options.getOption(   "options   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(cmd.getArguments(),  arguments,  eatTheRest));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(cmd.getArguments(),  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(cmd.getArguments(),  arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    eatTheRest));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
31	[BUG]  [BUGGY]  List  tokenList  =  new  ArrayList(flatten(getArguments(),  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  new  ArrayList(flatten(getArguments(),  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  new  ArrayList(flatten(getArguments(),  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    eatTheRest));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
32	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  options,  eatTheRest));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  options,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  options,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(options,    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
33	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  options,  stopAtNonOption),  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  options,  stopAtNonOption),  arguments);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  options,  stopAtNonOption),  arguments);	  List    tokenList    =    Arrays.asList(flatten(options,    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
34	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  opts,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  opts,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  opts,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
35	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  arguments,  eatTheRest));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
36	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  null,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  null,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  null,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(options,    getOptions(),    arguments,    null));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
37	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  null),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  null),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  null),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(options,    getOptions(),    arguments,    null));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
38	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  defaultOptions,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  defaultOptions,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  defaultOptions,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(defaultOptions,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
39	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(arguments);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(arguments);	  Option    option    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  cmd,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  cmd,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  cmd,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
41	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
42	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption,  arguments);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
43	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  arguments);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
44	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(str,  arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(str,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(str,    arguments);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
45	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(str,  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(str,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(str,  arguments);	  Option    option    =    options.getOption(str,    arguments);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
46	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(arguments,  stopAtNonOption);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  eatTheRest));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(options,    getOptions(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
48	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  options,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  options,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  options,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(options,    getOptions(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
49	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption),  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption),  eatTheRest);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption),  eatTheRest);	  List    tokenList    =    Arrays.asList(flatten(arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
50	[BUG]  [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  ArrayList  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	ArrayList  tokenList  =  Arrays.asList(flatten(arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
51	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  cmd);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  cmd);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  cmd);	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption),    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
52	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption),    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
53	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  opts,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  opts,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  opts,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(opts,    getOptions(),    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
54	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(opts,  getOptions(),  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(opts,  getOptions(),  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(opts,  getOptions(),  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(opts,    getOptions(),    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
55	[BUG]  [BUGGY]  Arrays.asList(flatten(getOptions(),  options,  eatTheRest));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getOptions(),  options,  eatTheRest));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getOptions(),  options,  eatTheRest));	  Arrays.asList(flatten(getOptions(),    arguments,    eatTheRest));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
56	[BUG]  [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments,  StopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments,  StopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getOptions(),  arguments,  StopAtNonOption));	  Arrays.asList(flatten(getOptions(),    arguments,    eatTheRest));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
57	[BUG]  [BUGGY]  Arrays.asList(flatten(getOptions(),  parameters,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getOptions(),  parameters,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getOptions(),  parameters,  stopAtNonOption));	  Arrays.asList(flatten(getOptions(),    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
58	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  options,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  options,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  options,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(arguments,    opts,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
59	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(cmd,  getOptions(),  options,  eatTheRest));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(cmd,  getOptions(),  options,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(cmd,  getOptions(),  options,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    options,    eatTheRest));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
60	[BUG]  [BUGGY]  Option  options  =  cmd.getOption(getOptions());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  cmd.getOption(getOptions());  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  options  =  cmd.getOption(getOptions());	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions(getOptions());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  cmd.getOptions(getOptions());  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  options  =  cmd.getOptions(getOptions());	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  Option  options  =  cmd.options();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  cmd.options();  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  options  =  cmd.options();	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments));	  List    tokenList    =    Arrays.asList(flatten(options,    getOptions(),    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
64	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  argument));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  argument));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  argument));	  List    tokenList    =    Arrays.asList(flatten(options,    getOptions(),    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
65	[BUG]  [BUGGY]  List  tokenList  =  options.asList(flatten(options,  getOptions(),  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  options.asList(flatten(options,  getOptions(),  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  options.asList(flatten(options,  getOptions(),  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(options,    getOptions(),    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
66	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  getOptions(),  cmd,  eatTheRest));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  getOptions(),  cmd,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  getOptions(),  cmd,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(cmd,    getOptions(),    arguments,    eatTheRest));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
67	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(cmd,  getOptions(),  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(cmd,  getOptions(),  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(cmd,  getOptions(),  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(cmd,    getOptions(),    arguments,    eatTheRest));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
68	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null),  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null),  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null),  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    null));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
69	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  cmd);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  cmd);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  cmd);	  Option    option    =    options.getOption(t,    null);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
70	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  null,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  null,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  null,  stopAtNonOption);	  Option    option    =    options.getOption(t,    null);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
71	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(stopAtNonOption);	  Option    option    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(stopAtNonOption,  arguments);	  Option    option    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  Option  tokenList  =  cmd.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  tokenList  =  cmd.getOptions();  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  tokenList  =  cmd.getOptions();	  Option    tokenList    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
74	[BUG]  [BUGGY]  Option  tokenList  =  options.getOptions(options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  tokenList  =  options.getOptions(options);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  tokenList  =  options.getOptions(options);	  Option    tokenList    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
75	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  options,  null,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  options,  null,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  options,  null,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    null,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  options,  null,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  options,  null,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getOptions(),  options,  null,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    null,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
77	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  options,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  options,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  options,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    null,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  Option  tokenList  =  cmd.getOptionList();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  tokenList  =  cmd.getOptionList();  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  tokenList  =  cmd.getOptionList();	  Option    tokenList    =    options.getOptionList();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
79	[BUG]  [BUGGY]  Option  tokenList  =  options.getOptionList(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  tokenList  =  options.getOptionList(),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  tokenList  =  options.getOptionList(),  stopAtNonOption);	  Option    tokenList    =    options.getOptionList();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
80	[BUG]  [BUGGY]  Option  tokenList  =  options.getOptionList(true);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  tokenList  =  options.getOptionList(true);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  tokenList  =  options.getOptionList(true);	  Option    tokenList    =    options.getOptionList();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
81	[BUG]  [BUGGY]  Arrays.asList(flatten(getOptions(),  options,  cmd,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getOptions(),  options,  cmd,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getOptions(),  options,  cmd,  stopAtNonOption));	  Arrays.asList(flatten(getOptions(),    cmd,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
82	[BUG]  [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments,  0,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments,  0,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getOptions(),  arguments,  0,  stopAtNonOption));	  Arrays.asList(flatten(getOptions(),    cmd,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
83	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(t);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(t);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(t);	  Option    option    =    cmd.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
84	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  stopAtNonOption);	  Option    option    =    options.getOption(t,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
85	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest,  arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  eatTheRest,  arguments);	  Option    option    =    options.getOption(t,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
86	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(str,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(str,  stopAtNonOption);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
87	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments,  null);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  arguments,  null);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  arguments,  null);	  Option    option    =    options.getOption(str,    arguments,    null);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
88	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  arguments,  null,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(str,  arguments,  null,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(str,  arguments,  null,  stopAtNonOption);	  Option    option    =    options.getOption(str,    arguments,    null);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
89	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  getOptions(),  cmd,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  getOptions(),  cmd,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  getOptions(),  cmd,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(cmd,    getOptions(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
90	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(t,  str);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(t,  str);	  Option    option    =    cmd.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
91	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(t,  arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(t,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(t,  arguments);	  Option    option    =    cmd.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
92	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  null,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  null,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  null,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    null);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
93	[BUG]  [BUGGY]  Option  option  =  cmd.getOption( "option ", "eatTheRest ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption( "option ", "eatTheRest ");  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption( "option ", "eatTheRest ");	  Option    option    =    options.getOption(   "option   ",    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
94	[BUG]  [BUGGY]  Option  option  =  options.getOption( "option ",  cmd);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption( "option ",  cmd);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption( "option ",  cmd);	  Option    option    =    options.getOption(   "option   ",    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
95	[BUG]  [BUGGY]  Option  option  =  cmd.getOption( "option ",  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption( "option ",  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption( "option ",  eatTheRest);	  Option    option    =    cmd.getOption(   "option   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
96	[BUG]  [BUGGY]  List  tokenList  =  options.asList(flatten(arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  options.asList(flatten(arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  options.asList(flatten(arguments,  stopAtNonOption));	  List    tokenList    =    options.asList(flatten(opts,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
97	[BUG]  [BUGGY]  List  tokenList  =  options.asList(flatten(cmd,  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  options.asList(flatten(cmd,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  options.asList(flatten(cmd,  arguments,  stopAtNonOption));	  List    tokenList    =    options.asList(flatten(opts,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
98	[BUG]  [BUGGY]  List  tokenList  =  options.asList(flatten(cmd,  opts,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  options.asList(flatten(cmd,  opts,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  options.asList(flatten(cmd,  opts,  stopAtNonOption));	  List    tokenList    =    options.asList(flatten(opts,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
99	[BUG]  [BUGGY]  List  tokenList  =  options.asList(flatten(options,  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  options.asList(flatten(options,  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  options.asList(flatten(options,  arguments,  stopAtNonOption));	  List    tokenList    =    options.asList(flatten(opts,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
100	[BUG]  [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption));	  Arrays.asList(flatten(getOptions(),    arguments));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
101	[BUG]  [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption);	  Arrays.asList(flatten(getOptions(),    arguments));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
102	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(options,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(options,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(options,  arguments);	  Option    option    =    options.getOption(options,    arguments);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
103	[BUG]  [BUGGY]  Option  options  =  opts.getOptions(true);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  opts.getOptions(true);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  options  =  opts.getOptions(true);	  Option    options    =    opts.getOptions();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
104	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  null,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(str,  null,  arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(str,  null,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(str,    null,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
105	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(str,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(str,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(str,  eatTheRest);	  Option    option    =    options.getOption(str,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
106	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  str,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  str,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  str,  eatTheRest);	  Option    option    =    options.getOption(str,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
107	[BUG]  [BUGGY]  Arrays.asList(flatten(getArguments(),  arguments,  null));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getArguments(),  arguments,  null));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getArguments(),  arguments,  null));	  Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
108	[BUG]  [BUGGY]  Arrays.asList(flatten(getArguments(),  options,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getArguments(),  options,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getArguments(),  options,  stopAtNonOption));	  Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
109	[BUG]  [BUGGY]  Options  options  =  cmd.getOptions(getOptions());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Options  options  =  cmd.getOptions(getOptions());  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Options  options  =  cmd.getOptions(getOptions());	  Options    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
110	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  false),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  false),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  false),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
111	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption,  requiredOptions);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption,  requiredOptions);	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
112	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption,  options);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption,  options);	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
113	[BUG]  [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption));	  Arrays.asList(flatten(getOptions(),    arguments,    null));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
114	[BUG]  [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption);	  Arrays.asList(flatten(getOptions(),    arguments,    null));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
115	[BUG]  [BUGGY]  List  tokenList  =  options.asList(flatten(cmd,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  options.asList(flatten(cmd,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  options.asList(flatten(cmd,  stopAtNonOption));	  List    tokenList    =    options.asList(flatten(opts,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
116	[BUG]  [BUGGY]  List  tokenList  =  options.asList(flatten(options,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  options.asList(flatten(options,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  options.asList(flatten(options,  stopAtNonOption));	  List    tokenList    =    options.asList(flatten(opts,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
117	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  opts);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  opts);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  opts);	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption),    options);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
118	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  arguments,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(t,    arguments);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
119	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  arguments,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  arguments,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  arguments,  eatTheRest);	  Option    option    =    options.getOption(t,    arguments);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
120	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  cmd,  eatTheRest);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  cmd,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  cmd,  eatTheRest);	  Option    option    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
121	[BUG]  [BUGGY]  List  tokenList  =  options.asList(flatten(options,  stopAtNonOption),  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  options.asList(flatten(options,  stopAtNonOption),  eatTheRest);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  options.asList(flatten(options,  stopAtNonOption),  eatTheRest);	  List    tokenList    =    options.asList(flatten(opts,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
122	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  eatTheRest));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    null,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
123	[BUG]  [BUGGY]  Option  tokenList  =  options.getOptionList(options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  tokenList  =  options.getOptionList(options);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  tokenList  =  options.getOptionList(options);	  Option    tokenList    =    options.getOptionList();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
124	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  eatTheRest);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  eatTheRest);	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
125	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  options,  null),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  options,  null),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getOptions(),  options,  null),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
126	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(option);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(option);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(option);	  Option    option    =    cmd.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
127	[BUG]  [BUGGY]  Arrays.asList(flatten(opts,  options,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(opts,  options,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(opts,  options,  stopAtNonOption));	  Arrays.asList(flatten(getOptions(),    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
128	[BUG]  [BUGGY]  Arrays.asList(flatten(opts,  getOptions(),  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(opts,  getOptions(),  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(opts,  getOptions(),  arguments,  stopAtNonOption));	  Arrays.asList(flatten(getOptions(),    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
129	[BUG]  [BUGGY]  Options  options  =  cmd.getOptions(options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Options  options  =  cmd.getOptions(options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Options  options  =  cmd.getOptions(options);	  Options    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
130	[BUG]  [BUGGY]  Options  options  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Options  options  =  opt.getOptions();  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Options  options  =  opt.getOptions();	  Options    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
131	[BUG]  [BUGGY]  Arrays.asList(flatten(options,  getOptions(),  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(options,  getOptions(),  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(options,  getOptions(),  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(opts,    getOptions(),    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
132	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  argument,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  argument,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  argument,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(arguments,    opts,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
133	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  null,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(opt,  null,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(opt,  null,  eatTheRest);	  Option    option    =    options.getOption(str,    null,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
134	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  null,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(str,  null,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(str,  null,  arguments);	  Option    option    =    options.getOption(str,    null,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
135	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  options));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  options));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  options));	  List    tokenList    =    Arrays.asList(flatten(options,    getOptions(),    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
136	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  options,  eattheRest));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  options,  eattheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  options,  eattheRest));	  List    tokenList    =    Arrays.asList(flatten(options,    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
137	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(cmd,  getArguments(),  arguments,  eatTheRest));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(cmd,  getArguments(),  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(cmd,  getArguments(),  arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    eatTheRest));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
138	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions(options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  cmd.getOptions(options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  options  =  cmd.getOptions(options);	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
139	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  null);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  arguments,  null);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  arguments,  null);	  Option    option    =    options.getOption(str,    arguments,    null);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
140	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  false),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  false),  stopAtNonOption);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  false),  stopAtNonOption);	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption),    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
141	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
142	[BUG]  [BUGGY]  Arrays.asList(flatten(getOptions(),  options,  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getOptions(),  options,  arguments,  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getOptions(),  options,  arguments,  stopAtNonOption));	  Arrays.asList(flatten(getOptions(),    cmd,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
143	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ",  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption( "opt ",  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption( "opt ",  eatTheRest);	  Option    option    =    options.getOption(   "opt   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
144	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ",  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption( "opt ",  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption( "opt ",  arguments);	  Option    option    =    options.getOption(   "opt   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
145	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  null,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(opt,  null,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(opt,  null,  stopAtNonOption);	  Option    option    =    options.getOption(str,    null,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
146	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(test);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(test);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(test);	  Option    option    =    cmd.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
147	[BUG]  [BUGGY]  Option  options  =  this.opts.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  options  =  this.opts.getOptions();  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  options  =  this.opts.getOptions();	  Option    options    =    opts.getOptions();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
148	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(opt,  stopAtNonOption);	  Option    option    =    options.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
149	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
150	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  arguments,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  arguments,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(options,  arguments,  eatTheRest);	  Option    option    =    options.getOption(options,    arguments);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
151	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(options,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption(options,  null);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption(options,  null);	  Option    option    =    cmd.getOption(str,    null);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
152	[BUG]  [BUGGY]  Arrays.asList(flatten(getArguments(),  arguments));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getArguments(),  arguments));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getArguments(),  arguments));	  Arrays.asList(flatten(getOptions(),    arguments));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
153	[BUG]  [BUGGY]  Arrays.asList(flatten(getArguments(),  arguments,  eatTheRest));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getArguments(),  arguments,  eatTheRest));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getArguments(),  arguments,  eatTheRest));	  Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
154	[BUG]  [BUGGY]  Option  option  =  options.getOption( "options. ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption( "options. ");  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption( "options. ");	  Option    option    =    options.getOption(   "options   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
155	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    null));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
156	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  this);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  this);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  this);	  Option    option    =    options.getOption(t,    null);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
157	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  str);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  str);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  str);	  Option    option    =    options.getOption(str,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
158	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  argument);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  argument);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  argument);	  Option    option    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
159	[BUG]  [BUGGY]  List  tokenList  =  options.asList(flatten(options,  arguments,  eatTheRest));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  options.asList(flatten(options,  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  options.asList(flatten(options,  arguments,  eatTheRest));	  List    tokenList    =    options.asList(flatten(opts,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
160	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  null),  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  null),  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  null),  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(options,    getOptions(),    arguments,    null));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
161	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(defaultOptions,  arguments,  eatTheRest));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(defaultOptions,  arguments,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(defaultOptions,  arguments,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(defaultOptions,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
162	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  eatTheRest),  options);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  eatTheRest),  options);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  eatTheRest),  options);	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption),    options);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
163	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  arguments,  null);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  arguments,  null);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(options,  arguments,  null);	  Option    option    =    options.getOption(options,    str,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
164	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  options,  stopAtNonOption),  eatTheRest);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  options,  stopAtNonOption),  eatTheRest);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  options,  stopAtNonOption),  eatTheRest);	  List    tokenList    =    Arrays.asList(flatten(options,    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
165	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getArguments(),  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getArguments(),  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  getArguments(),  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
166	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  getOptions(),  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(arguments,  getOptions(),  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(arguments,  getOptions(),  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(cmd,    getOptions(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
167	[BUG]  [BUGGY]  Option  tokenList  =  options.getOptions(true);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  tokenList  =  options.getOptions(true);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  tokenList  =  options.getOptions(true);	  Option    tokenList    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
168	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  str);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(arguments,  str);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(arguments,  str);	  Option    option    =    options.getOption(str,    arguments);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
169	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str,  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  str,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(options,  str,  arguments);	  Option    option    =    options.getOption(str,    arguments);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
170	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    null),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
171	[BUG]  [BUGGY]  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  stopAtNonOption));  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  stopAtNonOption));	  Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
172	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  argument);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  argument);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  argument);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
173	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(cmd,  getArguments(),  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(cmd,  getArguments(),  arguments,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(cmd,  getArguments(),  arguments,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    eatTheRest));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
174	[BUG]  [BUGGY]  Option  option  =  options.getOption( "options ",  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption( "options ",  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption( "options ",  arguments);	  Option    option    =    options.getOption(   "options   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
175	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  stopAtNonOption),  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  stopAtNonOption),  eatTheRest);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(options,  getOptions(),  arguments,  stopAtNonOption),  eatTheRest);	  List    tokenList    =    Arrays.asList(flatten(options,    getOptions(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
176	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  str,  null,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  str,  null,  eatTheRest);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(options,  str,  null,  eatTheRest);	  Option    option    =    options.getOption(options,    str,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
177	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null),  options);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null),  options);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null),  options);	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption),    options);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
178	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(options,  t);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(options,  t);	  Option    option    =    options.getOption(options,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
179	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  eatTheRest,  arguments);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(cmd,  eatTheRest,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(cmd,  eatTheRest,  arguments);	  Option    option    =    options.getOption(cmd,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
180	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(opts,  getOptions(),  options,  eatTheRest));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(opts,  getOptions(),  options,  eatTheRest));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(opts,  getOptions(),  options,  eatTheRest));	  List    tokenList    =    Arrays.asList(flatten(getOptions(),    options,    eatTheRest));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
181	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  null,  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption(t,  null,  arguments);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption(t,  null,  arguments);	  Option    option    =    options.getOption(t,    null);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
182	[BUG]  [BUGGY]  List  tokenList  =  options.asList(flatten(defaultOptions,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  options.asList(flatten(defaultOptions,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  options.asList(flatten(defaultOptions,  stopAtNonOption));	  List    tokenList    =    options.asList(flatten(opts,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
183	[BUG]  [BUGGY]  Option  tokenList  =  options.opts.getOptionList();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  tokenList  =  options.opts.getOptionList();  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  tokenList  =  options.opts.getOptionList();	  Option    tokenList    =    options.getOptionList();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
184	[BUG]  [BUGGY]  Option  tokenList  =  options.getOptOptionList();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  tokenList  =  options.getOptOptionList();  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  tokenList  =  options.getOptOptionList();	  Option    tokenList    =    options.getOptionList();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
185	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ", "eatTheRest ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption( "opt ", "eatTheRest ");  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption( "opt ", "eatTheRest ");	  Option    option    =    options.getOption(   "option   ",    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
186	[BUG]  [BUGGY]  Option  option  =  options.getOption( "options ", "eatTheRest ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  options.getOption( "options ", "eatTheRest ");  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  options.getOption( "options ", "eatTheRest ");	  Option    option    =    options.getOption(   "option   ",    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
187	[BUG]  [BUGGY]  Option  option  =  cmd.getOption( "option ",  options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  Option  option  =  cmd.getOption( "option ",  options);  [BUGGY]      List  tokenList  =  Arrays.asList(flatten(getOptions(),            arguments,                        stopAtNonOption));  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	Option  option  =  cmd.getOption( "option ",  options);	  Option    option    =    cmd.getOption(   "option   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
188	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(defaultOptions,  getOptions(),  options,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(defaultOptions,  getOptions(),  options,  stopAtNonOption));  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(defaultOptions,  getOptions(),  options,  stopAtNonOption));	  List    tokenList    =    Arrays.asList(flatten(opts,    getOptions(),    options,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
189	[BUG]  [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption)&  0);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }      [BUGGY]  List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption)&  0);  [BUGGY]      arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	166	168	1	replace	List  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption)&  0);	  List    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption),    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
