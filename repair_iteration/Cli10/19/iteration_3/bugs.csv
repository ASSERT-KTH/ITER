bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(tokenList,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOptions(tokenList,  arguments,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOptions(tokenList,  arguments,  stopAtNonOption);	  Option    cmd    =    options.getOptions(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(tokenList,  arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOptions(tokenList,  arguments);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOptions(tokenList,  arguments);	  Option    cmd    =    options.getOptions(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOptions(arguments,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOptions(arguments,  stopAtNonOption);	  Option    cmd    =    options.getOptions(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
4	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(tokenList,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOptions(tokenList,  stopAtNonOption,  arguments);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOptions(tokenList,  stopAtNonOption,  arguments);	  Option    cmd    =    options.getOptions(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(tokenList,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(tokenList,  arguments,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(tokenList,  arguments,  stopAtNonOption);	  Option    cmd    =    options.getOption(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(tokenList,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(tokenList,  stopAtNonOption,  arguments);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(tokenList,  stopAtNonOption,  arguments);	  Option    cmd    =    options.getOption(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
7	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(tokenList,  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(tokenList,  arguments);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(tokenList,  arguments);	  Option    cmd    =    options.getOption(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
8	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  tokenList,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(t,  tokenList,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(t,  tokenList,  stopAtNonOption);	  Option    cmd    =    options.getOption(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
9	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(block,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(block,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(block,  stopAtNonOption);	  Option    cmd    =    options.getOption(block);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
10	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(tokenList,  block);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(tokenList,  block);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(tokenList,  block);	  Option    cmd    =    options.getOption(block);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
11	[BUG]  [BUGGY]  Arrays.sort(arguments,  tokenList);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(arguments,  tokenList);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(arguments,  tokenList);	  Arrays.sort(tokenList,    arguments);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
12	[BUG]  [BUGGY]  Arrays.sort(tokenList,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(tokenList,  arguments,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(tokenList,  arguments,  stopAtNonOption);	  Arrays.sort(tokenList,    arguments);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
13	[BUG]  [BUGGY]  Arrays.sort(parameters,  tokenList);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(parameters,  tokenList);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(parameters,  tokenList);	  Arrays.sort(tokenList,    arguments);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
14	[BUG]  [BUGGY]  Arrays.sort(parameterList,  tokenList);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(parameterList,  tokenList);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(parameterList,  tokenList);	  Arrays.sort(tokenList,    arguments);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
15	[BUG]  [BUGGY]  Iterator  iterator  =  tokenList.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  iterator  =  tokenList.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  iterator  =  tokenList.iterator();	  ListIterator    iterator    =    this.tokenList.iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
16	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  stopAtNonOption);	  List    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    options,    stopAtNonOption),    arguments);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
17	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getRequiredOptions(),  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getRequiredOptions(),  arguments,  stopAtNonOption));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getRequiredOptions(),  arguments,  stopAtNonOption));	  List    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    options,    arguments));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
18	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  tokenList);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  tokenList);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(stopAtNonOption,  tokenList);	  Option    option    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(t,  stopAtNonOption);	  Option    option    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
20	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  tokenList.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =  tokenList.keySet().iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =  tokenList.keySet().iterator();	  Iterator    <    String>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
21	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  optionList.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =  optionList.keySet().iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =  optionList.keySet().iterator();	  Iterator    <    String>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
22	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =  this.requiredOptions.iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =  this.requiredOptions.iterator();	  Iterator    <    String>    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
23	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.arguments.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =  this.arguments.iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =  this.arguments.iterator();	  Iterator    <    String>    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
24	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption,  tokenList);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption,  tokenList);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(stopAtNonOption,  tokenList);	  Option    cmd    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(t,  stopAtNonOption);	  Option    cmd    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  Option  option  =  tokenList.getOption(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  tokenList.getOption(options,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  tokenList.getOption(options,  stopAtNonOption);	  Option    option    =    tokenList.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
27	[BUG]  [BUGGY]  Option  option  =  options.getOption(thenAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(thenAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(thenAtNonOption);	  Option    option    =    tokenList.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
28	[BUG]  [BUGGY]  ListIterator  iterator  =  options.asList(tokenList.iterator());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  options.asList(tokenList.iterator());  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  options.asList(tokenList.iterator());	  ListIterator    iterator    =    Arrays.asList(tokenList.iterator());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
29	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.iterator(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.iterator(),  stopAtNonOption);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(tokenList.iterator(),  stopAtNonOption);	  ListIterator    iterator    =    Arrays.asList(tokenList.iterator());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
30	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  true));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  true));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  true));	  List    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    false));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  Arrays.sort(arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(arguments,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(arguments,  stopAtNonOption);	  Arrays.sort(arguments);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
32	[BUG]  [BUGGY]  Arrays.sort(parameterList);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(parameterList);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(parameterList);	  Arrays.sort(arguments);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
33	[BUG]  [BUGGY]  Option  cmd  =  tokenList.getOption(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  tokenList.getOption(options,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  tokenList.getOption(options,  stopAtNonOption);	  Option    cmd    =    tokenList.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
34	[BUG]  [BUGGY]  Option  cmd  =  tokenList.getOption(arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  tokenList.getOption(arguments);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  tokenList.getOption(arguments);	  Option    cmd    =    tokenList.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
35	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  options),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  options),  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  options),  stopAtNonOption);	  List    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    options));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
36	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  null));	  List    <    String>    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
37	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  options);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  options);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  options);	  List    <    String>    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
38	[BUG]  [BUGGY]  ArrayList  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ArrayList  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ArrayList  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null));	  ArrayList    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
39	[BUG]  [BUGGY]  ArrayList  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption),  options);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ArrayList  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption),  options);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ArrayList  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption),  options);	  ArrayList    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
40	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(arguments,  stopAtNonOption);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
41	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(options,  stopAtNonOption);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
42	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  options);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  options);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null),  options);	  List    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    stopAtNonOption),    options);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  arguments,  stopAtNonOption);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  arguments,  stopAtNonOption);	  ListIterator    iterator    =    Arrays.asList(tokenList.listIterator(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
44	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  arguments);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  arguments);	  ListIterator    iterator    =    Arrays.asList(tokenList.listIterator(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
45	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(options.listIterator(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(options.listIterator(),  stopAtNonOption);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(options.listIterator(),  stopAtNonOption);	  ListIterator    iterator    =    Arrays.asList(tokenList.listIterator(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
46	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(getOptions(),  tokenList.listIterator(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(getOptions(),  tokenList.listIterator(),  stopAtNonOption);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(getOptions(),  tokenList.listIterator(),  stopAtNonOption);	  ListIterator    iterator    =    Arrays.asList(tokenList.listIterator(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
47	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption,  options);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption,  options);	  List    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
48	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(str);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(str);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
49	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(str,  stopAtNonOption);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
50	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();	  Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
51	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  stopAtNonOption));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  stopAtNonOption));	  List    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    stopAtNonOption,    options));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
52	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  false,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  false,  stopAtNonOption));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  false,  stopAtNonOption));	  List    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    stopAtNonOption,    options));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
53	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  tokenList.values().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =  tokenList.values().iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =  tokenList.values().iterator();	  Iterator    <    String>    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
54	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.values(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.values(),  stopAtNonOption);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(tokenList.values(),  stopAtNonOption);	  ListIterator    iterator    =    Arrays.asList(tokenList.values());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
55	[BUG]  [BUGGY]  ListIterator  iterator  =  tokenList.values();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  tokenList.values();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  tokenList.values();	  ListIterator    iterator    =    Arrays.asList(tokenList.values());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
56	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.keySet());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.keySet());  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(tokenList.keySet());	  ListIterator    iterator    =    Arrays.asList(tokenList.values());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
57	[BUG]  [BUGGY]  ListIterator  iterator  =  tokenList.keySet().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  tokenList.keySet().iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  tokenList.keySet().iterator();	  ListIterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
58	[BUG]  [BUGGY]  ListIterator  iterator  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  options.values().iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  options.values().iterator();	  ListIterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
59	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenList,  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(tokenList,  arguments);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(tokenList,  arguments);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
60	[BUG]  [BUGGY]  ListIterator  iterator  =(tokenList!=  null)?  this.tokenList.listIterator()  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =(tokenList!=  null)?  this.tokenList.listIterator()  :  null;  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =(tokenList!=  null)?  this.tokenList.listIterator()  :  null;	  ListIterator    iterator    =(this.tokenList!=    null)?    tokenList.listIterator()    :    null;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
61	[BUG]  [BUGGY]  ListIterator  iterator  =(tokenList!=  null)?  tokenList.listIterator()  :  null;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =(tokenList!=  null)?  tokenList.listIterator()  :  null;  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =(tokenList!=  null)?  tokenList.listIterator()  :  null;	  ListIterator    iterator    =(this.tokenList!=    null)?    tokenList.listIterator()    :    null;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
62	[BUG]  [BUGGY]  ListIterator  iterator  =(tokenList  ==  null)?  this.tokenList.listIterator()  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =(tokenList  ==  null)?  this.tokenList.listIterator()  :  null;  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =(tokenList  ==  null)?  this.tokenList.listIterator()  :  null;	  ListIterator    iterator    =(this.tokenList!=    null)?    tokenList.listIterator()    :    null;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
63	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenList,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(tokenList,  arguments,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(tokenList,  arguments,  stopAtNonOption);	  Option    option    =    options.getOption(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
64	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  tokenList,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(t,  tokenList,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(t,  tokenList,  stopAtNonOption);	  Option    option    =    options.getOption(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
65	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenList,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(tokenList,  stopAtNonOption,  arguments);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(tokenList,  stopAtNonOption,  arguments);	  Option    option    =    options.getOption(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
66	[BUG]  [BUGGY]  Arrays.sort(options,  tokenList,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(options,  tokenList,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(options,  tokenList,  stopAtNonOption);	  Arrays.sort(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
67	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.tokenList.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =  this.tokenList.iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =  this.tokenList.iterator();	  Iterator    <    String>    iterator    =    tokenList.iterator();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
68	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  tokenList.listIterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =  tokenList.listIterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =  tokenList.listIterator();	  Iterator    <    String>    iterator    =    tokenList.iterator();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
69	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  arguments,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(getArguments(),  arguments,  stopAtNonOption);	  Option    cmd    =    options.getOption(getArguments(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
70	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  arguments);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(getArguments(),  arguments);	  Option    cmd    =    options.getOption(getArguments(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
71	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  tokenList);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  tokenList);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  tokenList);	  Option    cmd    =    options.getOption(getArguments(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
72	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  argument);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  argument);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(getArguments(),  argument);	  Option    cmd    =    options.getOption(getArguments(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
73	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(tokenList,  getArguments(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(tokenList,  getArguments(),  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(tokenList,  getArguments(),  stopAtNonOption);	  Option    cmd    =    options.getOption(tokenList,    getArguments());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
74	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  getArguments());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(t,  getArguments());  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(t,  getArguments());	  Option    cmd    =    options.getOption(tokenList,    getArguments());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
75	[BUG]  [BUGGY]  Iterator  iterator  =  options.listIterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  iterator  =  options.listIterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  iterator  =  options.listIterator();	  Iterator    iterator    =    tokenList.listIterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  Iterator  iterator  =  this.tokenList.listIterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  iterator  =  this.tokenList.listIterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  iterator  =  this.tokenList.listIterator();	  Iterator    iterator    =    tokenList.listIterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  Iterator  iterator  =  arguments.listIterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  iterator  =  arguments.listIterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  iterator  =  arguments.listIterator();	  Iterator    iterator    =    tokenList.listIterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  Arrays.sort(tokenList,  options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(tokenList,  options,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(tokenList,  options,  stopAtNonOption);	  Arrays.sort(tokenList,    options);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
79	[BUG]  [BUGGY]  Arrays.sort(options,  tokenList);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(options,  tokenList);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(options,  tokenList);	  Arrays.sort(tokenList,    options);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
80	[BUG]  [BUGGY]  Arrays.sort(arguments,  options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(arguments,  options);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(arguments,  options);	  Arrays.sort(tokenList,    options);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
81	[BUG]  [BUGGY]  ListIterator  iterator  =  this.requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  this.requiredOptions.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  this.requiredOptions.iterator();	  ListIterator    iterator    =    this.requiredOptions.listIterator();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
82	[BUG]  [BUGGY]  ListIterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.listIterator()  :  tokenList;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.listIterator()  :  tokenList;  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =(this.requiredOptions!=  null)?  this.requiredOptions.listIterator()  :  tokenList;	  ListIterator    iterator    =    this.requiredOptions.listIterator();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
83	[BUG]  [BUGGY]  ListIterator  iterator  =  options.listIterator(tokenList,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  options.listIterator(tokenList,  stopAtNonOption);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  options.listIterator(tokenList,  stopAtNonOption);	  ListIterator    iterator    =    options.listIterator(tokenList);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
84	[BUG]  [BUGGY]  ListIterator  iterator  =  options.listIterator(arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  options.listIterator(arguments);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  options.listIterator(arguments);	  ListIterator    iterator    =    options.listIterator(tokenList);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
85	[BUG]  [BUGGY]  ListIterator  iterator  =  tokenList.listIterator(options);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  tokenList.listIterator(options);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  tokenList.listIterator(options);	  ListIterator    iterator    =    options.listIterator(tokenList);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
86	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(options,  tokenList.listIterator());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(options,  tokenList.listIterator());  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(options,  tokenList.listIterator());	  ListIterator    iterator    =    Arrays.asList(options.listIterator());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
87	[BUG]  [BUGGY]  IllegalArgumentIterator  iterator  =  tokenList.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  IllegalArgumentIterator  iterator  =  tokenList.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	IllegalArgumentIterator  iterator  =  tokenList.iterator();	  ListIterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
88	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(str);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(str);	  Option    cmd    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
89	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(str,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(str,  stopAtNonOption);	  Option    cmd    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
90	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(arguments,  stopAtNonOption);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
91	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  stopAtNonOption,  options);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  stopAtNonOption,  options);	  ListIterator    iterator    =    Arrays.asList(tokenList.listIterator(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
92	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(options);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(options);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
93	[BUG]  [BUGGY]  ListIterator  iterator  =(tokenList  ==  null)?  tokenList.listIterator()  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =(tokenList  ==  null)?  tokenList.listIterator()  :  null;  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =(tokenList  ==  null)?  tokenList.listIterator()  :  null;	  ListIterator    iterator    =(this.tokenList!=    null)?    tokenList.listIterator()    :    null;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
94	[BUG]  [BUGGY]  ListIterator  iterator  =(this.tokenList  ==  null)?  tokenList.listIterator()  :  null;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =(this.tokenList  ==  null)?  tokenList.listIterator()  :  null;  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =(this.tokenList  ==  null)?  tokenList.listIterator()  :  null;	  ListIterator    iterator    =(this.tokenList!=    null)?    tokenList.listIterator()    :    null;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
95	[BUG]  [BUGGY]  ListIterator  iterator  =  optionList.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  optionList.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  optionList.iterator();	  ListIterator    iterator    =    optionList.listIterator();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
96	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(options.values());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(options.values());  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(options.values());	  ListIterator    iterator    =    Arrays.asList(tokenList.values());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
97	[BUG]  [BUGGY]  ListIterator  iterator  =  options.asList(tokenList.values());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  options.asList(tokenList.values());  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  options.asList(tokenList.values());	  ListIterator    iterator    =    Arrays.asList(tokenList.values());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
98	[BUG]  [BUGGY]  ListIterator  iterator  =  this.arguments.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  this.arguments.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  this.arguments.iterator();	  ListIterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
99	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(options,  tokenList,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOptions(options,  tokenList,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOptions(options,  tokenList,  stopAtNonOption);	  Option    cmd    =    options.getOptions(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
100	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  tokenList);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(t,  tokenList);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(t,  tokenList);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
101	[BUG]  [BUGGY]  ListIterator  iterator  =(tokenList!=  null)?  this.tokenList.iterator()  :  tokenList.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =(tokenList!=  null)?  this.tokenList.iterator()  :  tokenList.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =(tokenList!=  null)?  this.tokenList.iterator()  :  tokenList.iterator();	  ListIterator    iterator    =    this.tokenList.iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
102	[BUG]  [BUGGY]  ListIterator  iterator  =(tokenList!=  null)?  tokenList.iterator()  :  this.tokenList.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =(tokenList!=  null)?  tokenList.iterator()  :  this.tokenList.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =(tokenList!=  null)?  tokenList.iterator()  :  this.tokenList.iterator();	  ListIterator    iterator    =    this.tokenList.iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
103	[BUG]  [BUGGY]  ArrayList  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ArrayList  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ArrayList  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption));	  ArrayList    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
104	[BUG]  [BUGGY]  Iterator  iterator  =  optionList.listIterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  iterator  =  optionList.listIterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  iterator  =  optionList.listIterator();	  Iterator    iterator    =    tokenList.listIterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
105	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(options,  stopAtNonOption);	  Option    option    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
106	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(arguments!=  null)?  options.iterator()  :  arguments.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =(arguments!=  null)?  options.iterator()  :  arguments.iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =(arguments!=  null)?  options.iterator()  :  arguments.iterator();	  Iterator    <    String>    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
107	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  arguments);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(getArguments(),  stopAtNonOption,  arguments);	  Option    cmd    =    options.getOption(getArguments(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
108	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList,  stopAtNonOption);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(tokenList,  stopAtNonOption);	  ListIterator    iterator    =    Arrays.asList(tokenList.iterator());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
109	[BUG]  [BUGGY]  Option  cmd  =  optionList.getOption(options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  optionList.getOption(options);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  optionList.getOption(options);	  Option    cmd    =    tokenList.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
110	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments));	  List    <    String>    tokenList    =    Arrays.asList(flatten(getArguments(),    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
111	[BUG]  [BUGGY]  ListIterator  iterator  =  tokens.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  tokens.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  tokens.iterator();	  ListIterator    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
112	[BUG]  [BUGGY]  ListIterator  iterator  =  optionList.keySet().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  optionList.keySet().iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  optionList.keySet().iterator();	  ListIterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
113	[BUG]  [BUGGY]  ListIterator  iterator  =  options.listIterator(options);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  options.listIterator(options);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  options.listIterator(options);	  ListIterator    iterator    =    options.listIterator(tokenList);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
114	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  optionList.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =  optionList.iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =  optionList.iterator();	  Iterator    <    String>    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
115	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(blockAtNonOption,  tokenList);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(blockAtNonOption,  tokenList);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(blockAtNonOption,  tokenList);	  Option    cmd    =    options.getOption(blockAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
116	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(options.getIterator());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(options.getIterator());  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(options.getIterator());	  ListIterator    iterator    =    Arrays.asList(options.listIterator());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
117	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(options.keySet());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(options.keySet());  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(options.keySet());	  ListIterator    iterator    =    Arrays.asList(options.listIterator());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
118	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  optionList.values().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =  optionList.values().iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =  optionList.values().iterator();	  Iterator    <    String>    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
119	[BUG]  [BUGGY]  ListIterator  iterator  =  this.requiredOptions.listIterator(tokenList);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  this.requiredOptions.listIterator(tokenList);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  this.requiredOptions.listIterator(tokenList);	  ListIterator    iterator    =    this.requiredOptions.listIterator();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
120	[BUG]  [BUGGY]  Arrays.sort(tokenList,  preferredOptions);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(tokenList,  preferredOptions);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(tokenList,  preferredOptions);	  Arrays.sort(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
121	[BUG]  [BUGGY]  ListIterator  iterator  =(tokenList  ==  null)?  this.tokenList.iterator()  :  tokenList.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =(tokenList  ==  null)?  this.tokenList.iterator()  :  tokenList.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =(tokenList  ==  null)?  this.tokenList.iterator()  :  tokenList.iterator();	  ListIterator    iterator    =    this.tokenList.iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
122	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options  ==  null)?  options.iterator()  :  this.options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =(this.options  ==  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =(this.options  ==  null)?  options.iterator()  :  this.options.iterator();	  Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
123	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(blockAtNonOption,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(blockAtNonOption,  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(blockAtNonOption,  stopAtNonOption);	  Option    cmd    =    options.getOption(blockAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
124	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  false));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  false));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  false));	  List    <    String>    tokenList    =    Arrays.asList(flatten(getArguments(),    arguments,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
125	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  argument);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  argument);  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(tokenList.listIterator(),  argument);	  ListIterator    iterator    =    Arrays.asList(tokenList.listIterator(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
126	[BUG]  [BUGGY]  Option  cmd  =  options.getOptions(tokenList,  argument);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOptions(tokenList,  argument);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOptions(tokenList,  argument);	  Option    cmd    =    options.getOptions(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
127	[BUG]  [BUGGY]  ListIterator  iterator  =(options!=  null)?  options.iterator()  :  tokenList.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =(options!=  null)?  options.iterator()  :  tokenList.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =(options!=  null)?  options.iterator()  :  tokenList.iterator();	  ListIterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
128	[BUG]  [BUGGY]  ListIterator  iterator  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  this.options.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  this.options.iterator();	  ListIterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
129	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(options.iterator());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(options.iterator());  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(options.iterator());	  ListIterator    iterator    =    Arrays.asList(options.listIterator());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
130	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(requiredOptions!=  null)?  tokenList.iterator()  :  requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  <  String>  iterator  =(requiredOptions!=  null)?  tokenList.iterator()  :  requiredOptions.iterator();  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  <  String>  iterator  =(requiredOptions!=  null)?  tokenList.iterator()  :  requiredOptions.iterator();	  Iterator    <    String>    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
131	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments),  stopAtNonOption));	  List    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
132	[BUG]  [BUGGY]  ListIterator  iterator  =  Arrays.asList(arguments.iterator());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  ListIterator  iterator  =  Arrays.asList(arguments.iterator());  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	ListIterator  iterator  =  Arrays.asList(arguments.iterator());	  ListIterator    iterator    =    Arrays.asList(tokenList.iterator());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
133	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(tokenList,  argument);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(tokenList,  argument);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(tokenList,  argument);	  Option    cmd    =    options.getOption(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
134	[BUG]  [BUGGY]  Iterator  iterator  =  options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Iterator  iterator  =  options.iterator();  [BUGGY]        while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Iterator  iterator  =  options.iterator();	  Iterator    iterator    =    tokenList.listIterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
135	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(t,  arguments);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  cmd  =  options.getOption(t,  arguments);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  cmd  =  options.getOption(t,  arguments);	  Option    cmd    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
136	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  stopAtNonOption);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getArguments(),  arguments,  stopAtNonOption),  stopAtNonOption);	  List    <    String>    tokenList    =    Arrays.asList(flatten(getArguments(),    argument,    stopAtNonOption));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
137	[BUG]  [BUGGY]  Arrays.sort(parameterList,  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Arrays.sort(parameterList,  arguments);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Arrays.sort(parameterList,  arguments);	  Arrays.sort(tokenList,    arguments);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
138	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenList,  argument);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  Option  option  =  options.getOption(tokenList,  argument);  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	Option  option  =  options.getOption(tokenList,  argument);	  Option    option    =    options.getOption(tokenList,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
139	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  options));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  options));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  options));	  List    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    stopAtNonOption,    options));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
140	[BUG]  [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  null));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));      [BUGGY]  List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  null));  [BUGGY]      ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	170	170	1	replace	List  <  String>  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  null,  null));	  List    <    String>    tokenList    =    Arrays.asList(flatten(getOptions(),    arguments,    stopAtNonOption,    options));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
