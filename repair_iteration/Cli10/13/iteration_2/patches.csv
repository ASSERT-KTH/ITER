bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
3	[BUG]  [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
7	[BUG]  [BUGGY]  Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
8	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  option.clearValues();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  option.clearValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.next();  option.clearValues();	  Option    option    =(Option)it.next();    option.clearValues();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
9	[BUG]  [BUGGY]  Option  preferredOption  =  opt.helpOption(option);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  opt.helpOption(option);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =  opt.helpOption(option);	  Option    preferredOption    =    options.helpOption(opt);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  Option  preferredOption  =  options.helpOption(opt,  t);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.helpOption(opt,  t);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =  options.helpOption(opt,  t);	  Option    preferredOption    =    options.helpOption(opt);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  Option  preferredOption  =  opt.helpOption(options);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  opt.helpOption(options);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =  opt.helpOption(options);	  Option    preferredOption    =    options.helpOption(opt);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  Option  option  =  opt.getOption(option.getKey());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(option.getKey());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.getOption(option.getKey());	  Option    option    =    options.getOption(option.getKey());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getValue());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt.getValue());	  Option    option    =    options.getOption(option.getKey());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
14	[BUG]  [BUGGY]  Options  option  =  options.getOption(opt.getKey());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  option  =  options.getOption(opt.getKey());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Options  option  =  options.getOption(opt.getKey());	  Option    option    =    options.getOption(option.getKey());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
15	[BUG]  [BUGGY]  Option  option  =  opt.getOption(option);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(option);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.getOption(option);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
16	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt,  stopAtNonOption);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
17	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str,  options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(str,  options);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.getOption(str,  options);	  Option    option    =    opt.getOption(t,    options);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
18	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  opt);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t,  opt);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t,  opt);	  Option    option    =    opt.getOption(t,    options);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
19	[BUG]  [BUGGY]  Option  option  =  opt.getOption(t,  options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(t,  options,  stopAtNonOption);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.getOption(t,  options,  stopAtNonOption);	  Option    option    =    opt.getOption(t,    options);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
20	[BUG]  [BUGGY]  Option  option  =  opt.getOption(t,  arguments);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(t,  arguments);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.getOption(t,  arguments);	  Option    option    =    opt.getOption(t,    options);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
21	[BUG]  [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
22	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
24	[BUG]  [BUGGY]  Option  option  =(Option)option.next();  opt.clearValues();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)option.next();  opt.clearValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)option.next();  opt.clearValues();	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
25	[BUG]  [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
26	[BUG]  [BUGGY]  Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
27	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
28	[BUG]  [BUGGY]  Option  option  =  opt.helpOptions().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.helpOptions().iterator();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.helpOptions().iterator();	  Option    option    =    options.helpOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.opts().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.opts().iterator();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.opts().iterator();	  Option    option    =    options.helpOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
30	[BUG]  [BUGGY]  Option  option  =  options.options().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options().iterator();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options().iterator();	  Option    option    =    options.helpOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
31	[BUG]  [BUGGY]  Option  option  =  opt.clearValues();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.clearValues();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.clearValues();	  Option    option    =    options.clearValues();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
32	[BUG]  [BUGGY]  Option  option  =  options.options();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options();	  Option    option    =    options.clearValues();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
33	[BUG]  [BUGGY]  Option  option  =  options.opts();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.opts();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.opts();	  Option    option    =    options.clearValues();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
34	[BUG]  [BUGGY]  Option  preferredOption  =(Option)opt.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =(Option)opt.clone();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =(Option)opt.clone();	  Option    preferredOption    =(Option)opt.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
35	[BUG]  [BUGGY]  Option  preferredOption  =(Option)opt.getOption();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =(Option)opt.getOption();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =(Option)opt.getOption();	  Option    preferredOption    =(Option)opt.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
36	[BUG]  [BUGGY]  Option  preferredOption  =(Option)opt.getOptionValue();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =(Option)opt.getOptionValue();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =(Option)opt.getOptionValue();	  Option    preferredOption    =(Option)opt.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  options.addAll(opt);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.addAll(opt);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.addAll(opt);	  options.add(option);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
38	[BUG]  [BUGGY]  Option  option  =  opt.helpOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.helpOptions();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.helpOptions();	  Option    option    =    options.helpOptions();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
39	[BUG]  [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
41	[BUG]  [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
42	[BUG]  [BUGGY]  Option  option  =  options.getOption(str);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(str);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(str);	  Option    option    =    opt.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
43	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t,  str);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t,  str);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
44	[BUG]  [BUGGY]  Options  options  =  opt.getOptions(t);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  options  =  opt.getOptions(t);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Options  options  =  opt.getOptions(t);	  Options    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  Options  options  =  opt.getOptions(true);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  options  =  opt.getOptions(true);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Options  options  =  opt.getOptions(true);	  Options    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getOption(str);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.getOption(str);	  Option    option    =(Option)opt.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
47	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(t,  options);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getOption(t,  options);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.getOption(t,  options);	  Option    option    =(Option)opt.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
48	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getOption(options);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.getOption(options);	  Option    option    =(Option)opt.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
49	[BUG]  [BUGGY]  Options  options  =(Option)opt.next();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  options  =(Option)opt.next();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Options  options  =(Option)opt.next();	  options    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
50	[BUG]  [BUGGY]  Option  options  =(Option)opt.next();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =(Option)opt.next();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  options  =(Option)opt.next();	  options    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  Option  option  =(Option)opt.clone();  opt.addValue(option.getKey());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.clone();  opt.addValue(option.getKey());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.clone();  opt.addValue(option.getKey());	  Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  options.addValue(option.getKey());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  options.addValue(option.getKey());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.next();  options.addValue(option.getKey());	  Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
53	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  str);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  str);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt.getKey(),  str);	  Option    option    =    options.getOption(opt.getKey());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  arguments);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt.getKey(),  arguments);	  Option    option    =    options.getOption(opt.getKey());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  Option  option  =  opt.helpOption(option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.helpOption(option);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.helpOption(option);	  Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
56	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt,  t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt,  t);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt,  t);	  Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
57	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt,  str);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt,  str);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt,  str);	  Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
58	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  preferredOption.clearValues();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  preferredOption.clearValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.next();  preferredOption.clearValues();	  Option    option    =(Option)it.next();    preferredOption.clearValues();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
59	[BUG]  [BUGGY]  Option  preferredOption  =  opt.getOption(option);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  opt.getOption(option);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =  opt.getOption(option);	  Option    preferredOption    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
60	[BUG]  [BUGGY]  Option  preferredOption  =  options.getOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =  options.getOption(opt,  stopAtNonOption);	  Option    preferredOption    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
61	[BUG]  [BUGGY]  Option  preferredOption  =  opt.getOption(options);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  opt.getOption(options);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =  opt.getOption(options);	  Option    preferredOption    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
62	[BUG]  [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
63	[BUG]  [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
64	[BUG]  [BUGGY]  Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
65	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
66	[BUG]  [BUGGY]  options  =(Option)opt.cloneTree();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options  =(Option)opt.cloneTree();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options  =(Option)opt.cloneTree();	  Option    option    =(Option)opt.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
67	[BUG]  [BUGGY]  Option  option  =(Option)opt.cloneTree(),  options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.cloneTree(),  options);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.cloneTree(),  options);	  Option    option    =(Option)opt.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
68	[BUG]  [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
69	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
70	[BUG]  [BUGGY]  Option  option  =(Option)option.next();  preferredOption.clearValues();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)option.next();  preferredOption.clearValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)option.next();  preferredOption.clearValues();	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getName());  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getName());  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt.getName());  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  t);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(str,  t);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(str,  t);	  Option    option    =    opt.getOption(str,    t);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
73	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str,  arguments);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(str,  arguments);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.getOption(str,  arguments);	  Option    option    =    opt.getOption(str,    t);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
74	[BUG]  [BUGGY]  Option  option  =  t.getOption(str,  opt);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  t.getOption(str,  opt);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  t.getOption(str,  opt);	  Option    option    =    opt.getOption(str,    t);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
75	[BUG]  [BUGGY]  Option  option  =  opt.clearOptions();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.clearOptions();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.clearOptions();	  Option    option    =    options.clearOptions();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
76	[BUG]  [BUGGY]  options.addOption(t,  opt);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.addOption(t,  opt);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.addOption(t,  opt);	  options.addOption(opt,    t);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
77	[BUG]  [BUGGY]  options.addOption(str,  opt);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.addOption(str,  opt);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.addOption(str,  opt);	  options.addOption(opt,    t);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
78	[BUG]  [BUGGY]  Option  options  =  opt.getOptions(t);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =  opt.getOptions(t);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  options  =  opt.getOptions(t);	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
79	[BUG]  [BUGGY]  Option  options  =  opt.getOption(t);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =  opt.getOption(t);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  options  =  opt.getOption(t);	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
80	[BUG]  [BUGGY]  Option  option  =  opt.helpOptions().get(option);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.helpOptions().get(option);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.helpOptions().get(option);	  Option    option    =    options.helpOptions().get(opt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
81	[BUG]  [BUGGY]  Option  option  =  options.options().get(opt);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options().get(opt);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options().get(opt);	  Option    option    =    options.helpOptions().get(opt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
82	[BUG]  [BUGGY]  Option  option  =  options.helpOptions().get(option);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions().get(option);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions().get(option);	  Option    option    =    options.helpOptions().get(opt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
83	[BUG]  [BUGGY]  option  =(Option)opt.next();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  option  =(Option)opt.next();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	option  =(Option)opt.next();	  Option    option    =(Option)option.next();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
84	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(option,  options);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getOption(option,  options);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.getOption(option,  options);	  Option    option    =(Option)opt.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
85	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.removeValues();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  opt.removeValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)it.next();  opt.removeValues();	  Option    option    =(Option)it.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
86	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  it.remove();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  it.remove();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.next();  it.remove();	  Option    option    =(Option)it.next();    it.remove();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
87	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.remove();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  opt.remove();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)it.next();  opt.remove();	  Option    option    =(Option)it.next();    it.remove();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
88	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  options.remove();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  options.remove();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)it.next();  options.remove();	  Option    option    =(Option)it.next();    it.remove();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
89	[BUG]  [BUGGY]  Option  option  =  options.opts().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.opts().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.opts().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
90	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
91	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt);  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt);  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
92	[BUG]  [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
93	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt.next());  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt.next());  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt.next());  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
94	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt.next());  preferredOption.clearValues();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt.next());  preferredOption.clearValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt.next());  preferredOption.clearValues();	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
95	[BUG]  [BUGGY]  options.addOption(t,  str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.addOption(t,  str);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.addOption(t,  str);	  options.addOption(opt,    str);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
96	[BUG]  [BUGGY]  options.addOption(opt,  arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.addOption(opt,  arguments);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.addOption(opt,  arguments);	  options.addOption(opt,    str);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
97	[BUG]  [BUGGY]  Option  option  =  options.helpOptions().iterator();  it.remove();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions().iterator();  it.remove();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions().iterator();  it.remove();	  if(opt!=    null)    {    for(Iterator    it    =    options.clearValues().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
98	[BUG]  [BUGGY]  options  =(Option)opt.getOption();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options  =(Option)opt.getOption();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options  =(Option)opt.getOption();	  Option    option    =(Option)opt.getOption();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
99	[BUG]  [BUGGY]  Option  preferredOption  =(Option)opt.getNext();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =(Option)opt.getNext();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =(Option)opt.getNext();	  Option    preferredOption    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
100	[BUG]  [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();  }  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.options().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
101	[BUG]  [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  it.remove();	  if(opt!=    null)    {    for(Iterator    it    =    options.options().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
102	[BUG]  [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();	  if(opt!=    null)    {    for(Iterator    it    =    options.options().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
103	[BUG]  [BUGGY]  Options  options  =(Option)opt.clone();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  options  =(Option)opt.clone();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Options  options  =(Option)opt.clone();	  options    =(Option)opt.clone();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
104	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  opt.removeValues();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  opt.removeValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.next();  opt.removeValues();	  Option    option    =(Option)opt.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
105	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  opt.addValue(option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  opt.addValue(option);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.next();  opt.addValue(option);	  Option    option    =(Option)opt.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
106	[BUG]  [BUGGY]  options.addOption(opt,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.addOption(opt,  stopAtNonOption,  arguments);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.addOption(opt,  stopAtNonOption,  arguments);	  options.addOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
107	[BUG]  [BUGGY]  options.addOption(option,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.addOption(option,  stopAtNonOption,  arguments);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.addOption(option,  stopAtNonOption,  arguments);	  options.addOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
108	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(opt.getKey());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(opt.getKey());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)it.next();  opt.addValue(opt.getKey());	  Option    option    =(Option)it.next();    opt.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
109	[BUG]  [BUGGY]  options.add(opt.toString(),  str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(opt.toString(),  str);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(opt.toString(),  str);	  options.add(opt.toString());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
110	[BUG]  [BUGGY]  options.add(option.toString());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(option.toString());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(option.toString());	  options.add(opt.toString());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
111	[BUG]  [BUGGY]  Options  options  =  opt.helpOptions();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  options  =  opt.helpOptions();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Options  options  =  opt.helpOptions();	  Options    options    =    options.helpOptions();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
112	[BUG]  [BUGGY]  Option  options  =  opt.helpOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =  opt.helpOptions();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  options  =  opt.helpOptions();	  Options    options    =    options.helpOptions();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
113	[BUG]  [BUGGY]  options  =  opt.helpOptions();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options  =  opt.helpOptions();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options  =  opt.helpOptions();	  Options    options    =    options.helpOptions();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
114	[BUG]  [BUGGY]  options.add(opt,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(opt,  stopAtNonOption,  arguments);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(opt,  stopAtNonOption,  arguments);	  options.add(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
115	[BUG]  [BUGGY]  options.add(option,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(option,  stopAtNonOption,  arguments);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(option,  stopAtNonOption,  arguments);	  options.add(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
116	[BUG]  [BUGGY]  options.add(opt,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(opt,  eatTheRest);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(opt,  eatTheRest);	  options.add(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
117	[BUG]  [BUGGY]  options.add(option,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(option,  stopAtNonOption);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(option,  stopAtNonOption);	  options.add(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
118	[BUG]  [BUGGY]  Option  opt  =  options.opts().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  opt  =  options.opts().iterator();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  opt  =  options.opts().iterator();	  Option    opt    =    options.helpOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
119	[BUG]  [BUGGY]  Option  opt  =  options.options().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  opt  =  options.options().iterator();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  opt  =  options.options().iterator();	  Option    opt    =    options.helpOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
120	[BUG]  [BUGGY]  Option  opt  =  options.helpOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  opt  =  options.helpOptions();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  opt  =  options.helpOptions();	  Option    opt    =    options.helpOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
121	[BUG]  [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
122	[BUG]  [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
123	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
124	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.next());  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.next());  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt.next());  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
125	[BUG]  [BUGGY]  Option  option  =  options.optOption(t);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.optOption(t);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.optOption(t);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
126	[BUG]  [BUGGY]  Option  preferredOption  =(Option)opt.getKey();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =(Option)opt.getKey();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =(Option)opt.getKey();	  Option    preferredOption    =(Option)opt.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
127	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt,  stopAtNonOption);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt,  stopAtNonOption);	  Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
128	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  stopAtNonOption);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt.getKey(),  stopAtNonOption);	  Option    option    =    options.getOption(opt.getKey());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
129	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getKey(),  options);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt.getKey(),  options);	  Option    option    =    options.getOption(opt.getKey());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
130	[BUG]  [BUGGY]  Option  option  =  options.clearOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.clearOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.clearOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
131	[BUG]  [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
132	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
133	[BUG]  [BUGGY]  Option  option  =  options.addOption(opt);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.addOption(opt);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.addOption(opt);	  Option    option    =    options.clearValues();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
134	[BUG]  [BUGGY]  Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
135	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
136	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  it.clearValues();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  it.clearValues();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.next();  it.clearValues();	  Option    option    =(Option)it.next();    it.remove();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
137	[BUG]  [BUGGY]  options.requireOptions();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.requireOptions();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.requireOptions();	  options.clearOptions();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
138	[BUG]  [BUGGY]  Option  option  =(Option)opt.clonePath();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.clonePath();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.clonePath();	  Option    option    =(Option)opt.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
139	[BUG]  [BUGGY]  Option  option  =(Option)opt.cloneOrEqual();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.cloneOrEqual();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.cloneOrEqual();	  Option    option    =(Option)opt.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
140	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  options.clearValues();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  options.clearValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.next();  options.clearValues();	  Option    option    =(Option)it.next();    option.clearValues();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
141	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(option,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getOption(option,  stopAtNonOption);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.getOption(option,  stopAtNonOption);	  Option    option    =(Option)opt.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
142	[BUG]  [BUGGY]  Option  option  =  options.helpOptions().get(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions().get(opt,  stopAtNonOption);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions().get(opt,  stopAtNonOption);	  Option    option    =    options.helpOptions().get(opt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
143	[BUG]  [BUGGY]  Option  option  =  options.helpOptions().get(opt,  t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions().get(opt,  t);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions().get(opt,  t);	  Option    option    =    options.helpOptions().get(opt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
144	[BUG]  [BUGGY]  Option  option  =  options.helpOptions().get(opt,  str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions().get(opt,  str);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions().get(opt,  str);	  Option    option    =    options.helpOptions().get(opt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
145	[BUG]  [BUGGY]  Option  preferredOption  =  options.helpOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.helpOption(opt,  stopAtNonOption);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =  options.helpOption(opt,  stopAtNonOption);	  Option    preferredOption    =    options.helpOption(opt);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
146	[BUG]  [BUGGY]  Option  preferredOption  =  options.helpOption(opt,  str);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.helpOption(opt,  str);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =  options.helpOption(opt,  str);	  Option    preferredOption    =    options.helpOption(opt);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
147	[BUG]  [BUGGY]  Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
148	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getName()).iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getName()).iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt.getName()).iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
149	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
150	[BUG]  [BUGGY]  Option  option  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
151	[BUG]  [BUGGY]  Option  option  =  options.clearOptions();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.clearOptions();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.clearOptions();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
152	[BUG]  [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOptions();  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
153	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
154	[BUG]  [BUGGY]  Option  opt  =  options.addOption(opt);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  opt  =  options.addOption(opt);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  opt  =  options.addOption(opt);	  Option    opt    =    options.helpOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
155	[BUG]  [BUGGY]  Option  option  =  options.optOptions();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.optOptions();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.optOptions();	  Option    option    =    options.clearOptions();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
156	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  opt.addValue(option.getKey(),  option);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.next();  opt.addValue(option.getKey(),  option);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.next();  opt.addValue(option.getKey(),  option);	  Option    option    =(Option)opt.next();    opt.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
157	[BUG]  [BUGGY]  options.add(opt,  stopAtNonOption,  t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(opt,  stopAtNonOption,  t);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(opt,  stopAtNonOption,  t);	  options.add(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
158	[BUG]  [BUGGY]  options.add(opt,  t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(opt,  t);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(opt,  t);	  options.add(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
159	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  opt);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(str,  opt);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(str,  opt);	  Option    option    =    opt.getOption(str,    t);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
160	[BUG]  [BUGGY]  options.add(opt.getName());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(opt.getName());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(opt.getName());	  options.add(opt.toString());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
161	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  t);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt,  t);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt,  t);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
162	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)it.next();  opt.addValue(option);	  Option    option    =(Option)it.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
163	[BUG]  [BUGGY]  options.addOption(opt,  stopAtNonOption,  t);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.addOption(opt,  stopAtNonOption,  t);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.addOption(opt,  stopAtNonOption,  t);	  options.addOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
164	[BUG]  [BUGGY]  Option  preferredOption  =  options.getOption(opt,  t);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.getOption(opt,  t);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =  options.getOption(opt,  t);	  Option    preferredOption    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
165	[BUG]  [BUGGY]  Option  preferredOption  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =  options.getOption(t);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =  options.getOption(t);	  Option    preferredOption    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
166	[BUG]  [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  it.remove();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  it.remove();  }  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  it.remove();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.options().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
167	[BUG]  [BUGGY]  Option  option  =  opt.getOption(t,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.getOption(t,  null);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.getOption(t,  null);	  Option    option    =    opt.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
168	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
169	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.requiresOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.requiresOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	if(opt!=  null)  {  for(Iterator  it  =  options.requiresOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
170	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.addOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  if(opt!=  null)  {  for(Iterator  it  =  options.addOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	if(opt!=  null)  {  for(Iterator  it  =  options.addOptions().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  it.remove();  }	  if(opt!=    null)    {    for(Iterator    it    =    options.getOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
171	[BUG]  [BUGGY]  Options  options  =  opt.cloneOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  options  =  opt.cloneOptions();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Options  options  =  opt.cloneOptions();	  Options    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
172	[BUG]  [BUGGY]  Option  options  =  opt.cloneOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =  opt.cloneOptions();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  options  =  opt.cloneOptions();	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
173	[BUG]  [BUGGY]  Option  options  =  opt.getOptions(true);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =  opt.getOptions(true);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  options  =  opt.getOptions(true);	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
174	[BUG]  [BUGGY]  Option  preferredOption  =(Option)opt.get();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =(Option)opt.get();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =(Option)opt.get();	  Option    preferredOption    =(Option)opt.next();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
175	[BUG]  [BUGGY]  Option  option  =(Option)opt.getValue();  opt.clearValues();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getValue();  opt.clearValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.getValue();  opt.clearValues();	  Option    option    =(Option)opt.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
176	[BUG]  [BUGGY]  Option  option  =  options.clearOptions();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.clearOptions();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.clearOptions();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
177	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
178	[BUG]  [BUGGY]  option  option  =  options.getOption(opt.getKey());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  option  option  =  options.getOption(opt.getKey());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	option  option  =  options.getOption(opt.getKey());	  Option    option    =    options.getOption(option.getKey());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
179	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option.getKey(),  option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  opt.addValue(option.getKey(),  option);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)it.next();  opt.addValue(option.getKey(),  option);	  Option    option    =(Option)it.next();    opt.addValue(option.getKey());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
180	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)opt.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
181	[BUG]  [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(opt);  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
182	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getName());  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getName());  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt.getName());  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
183	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.getKey());  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.getKey());  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt.getKey());  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
184	[BUG]  [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
185	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
186	[BUG]  [BUGGY]  option  =(Option)option.clone();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  option  =(Option)option.clone();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	option  =(Option)option.clone();	  option    =(Option)opt.clone();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
187	[BUG]  [BUGGY]  Option  option  =  options.options().iterator();  it.remove();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options().iterator();  it.remove();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options().iterator();  it.remove();	  if(opt!=    null)    {    for(Iterator    it    =    options.options().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
188	[BUG]  [BUGGY]  Option  option  =  options.options().get(t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.options().get(t);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.options().get(t);	  if(opt!=    null)    {    for(Iterator    it    =    options.options().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    it.remove();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
189	[BUG]  [BUGGY]  Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  option  =(Option)it.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
190	[BUG]  [BUGGY]  Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.stopAtNonOption();  it.hasNext();)  {  Option  option  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
191	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(option);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
192	[BUG]  [BUGGY]  Option  preferredOption  =(Option)opt.getAssignedValue();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  preferredOption  =(Option)opt.getAssignedValue();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  preferredOption  =(Option)opt.getAssignedValue();	  Option    preferredOption    =(Option)opt.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
193	[BUG]  [BUGGY]  Option  option  =  options.helpOption(option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(option);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(option);	  Option    option    =    options.helpOption(opt);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
194	[BUG]  [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
195	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
196	[BUG]  [BUGGY]  Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)option.next();  opt.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    opt.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
197	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  it.clearValues();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  it.clearValues();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)it.next();  it.clearValues();	  Option    option    =(Option)it.next();    it.remove();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
198	[BUG]  [BUGGY]  options.add(opt.getKey());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(opt.getKey());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(opt.getKey());	  options.add(opt.toString());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
199	[BUG]  [BUGGY]  options.add(opt.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(opt.getValue());  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(opt.getValue());	  options.add(opt.toString());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
200	[BUG]  [BUGGY]  Options  options  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  options  =  options.getOptions();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Options  options  =  options.getOptions();	  Options    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
201	[BUG]  [BUGGY]  Options  options  =  option.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  options  =  option.getOptions();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Options  options  =  option.getOptions();	  Options    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
202	[BUG]  [BUGGY]  Option  option  =  str.getOption(t,  opt);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  str.getOption(t,  opt);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  str.getOption(t,  opt);	  Option    option    =    opt.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
203	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.getOption(t,  str);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.getOption(t,  str);	  Option    option    =(Option)opt.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
204	[BUG]  [BUGGY]  Option  option  =  options.next();  preferredOption.clearValues();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.next();  preferredOption.clearValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.next();  preferredOption.clearValues();	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
205	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.next());  preferredOption.clearValues();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(opt.next());  preferredOption.clearValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(opt.next());  preferredOption.clearValues();	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)option.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
206	[BUG]  [BUGGY]  Option  option  =  opt.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  opt.clone();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  opt.clone();	  Option    option    =(Option)option.clone();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
207	[BUG]  [BUGGY]  options.add(opt,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  options.add(opt,  blockAtNonOption);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	options.add(opt,  blockAtNonOption);	  options.add(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
208	[BUG]  [BUGGY]  Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.helpOption(t);  it.hasNext();)  {  Option  option  =(Option)it.next();  opt.addValue(option.getKey());  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    opt.addValue(option.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
209	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  preferredOption.removeValues();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  preferredOption.removeValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)it.next();  preferredOption.removeValues();	  Option    option    =(Option)it.next();    preferredOption.clearValues();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
210	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  preferredOption.setValues(options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)it.next();  preferredOption.setValues(options);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)it.next();  preferredOption.setValues(options);	  Option    option    =(Option)it.next();    preferredOption.clearValues();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
211	[BUG]  [BUGGY]  Option  option  =(Option)opt.clone();  opt.clearValues();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =(Option)opt.clone();  opt.clearValues();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =(Option)opt.clone();  opt.clearValues();	  Option    option    =(Option)opt.next();    opt.clearValues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
212	[BUG]  [BUGGY]  Option  options  =  option.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  options  =  option.getOptions();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  options  =  option.getOptions();	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
213	[BUG]  [BUGGY]  Option  option  =  options.getOption(option.getKey(),  opt);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(option.getKey(),  opt);  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(option.getKey(),  opt);	  Option    option    =    options.getOption(option.getKey());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
214	[BUG]  [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t).iterator();  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
215	[BUG]  [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  options.getOption(t);  it.hasNext();)  {  Option  opt  =(Option)opt.next();  preferredOption.clearValues();  }	  Option    option    =    options.helpOptions().iterator();    it.hasNext();)    {    Option    opt    =(Option)opt.next();    preferredOption.clearValues();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
216	[BUG]  [BUGGY]  Options  option  =(Option)option.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Options  option  =(Option)option.clone();  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Options  option  =(Option)option.clone();	  Options    option    =(Option)opt.clone();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
217	[BUG]  [BUGGY]  Option  option  =  t.getOption(opt);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  option  =  t.getOption(opt);  [BUGGY]        setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  option  =  t.getOption(opt);	  Option    option    =    opt.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
218	[BUG]  [BUGGY]  Option  opt  =  options.stopAtNonOptions().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  opt  =  options.stopAtNonOptions().iterator();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  opt  =  options.stopAtNonOptions().iterator();	  Option    opt    =    options.helpOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
219	[BUG]  [BUGGY]  Option  opt  =  options.stopAtNonOption();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();      [BUGGY]  Option  opt  =  options.stopAtNonOption();  [BUGGY]      }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	152	152	1	replace	Option  opt  =  options.stopAtNonOption();	  Option    opt    =    options.helpOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
