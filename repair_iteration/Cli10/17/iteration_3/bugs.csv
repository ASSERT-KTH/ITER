bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(parameters  ==  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(parameters  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(parameters  ==  null  ||  arguments.length  ==  0)  {	  if(options    ==    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
2	[BUG]  [BUGGY]  if(options!=  null  &&  options.hasOption(opt))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options!=  null  &&  options.hasOption(opt))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options!=  null  &&  options.hasOption(opt))  {	  if(opt!=    null    &&    options.hasOption(opt))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
3	[BUG]  [BUGGY]  if(options  ==  null  &&  options.hasOption(opt))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  &&  options.hasOption(opt))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options  ==  null  &&  options.hasOption(opt))  {	  if(opt!=    null    &&    options.hasOption(opt))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
4	[BUG]  [BUGGY]  if(opt!=  null  ||  options.hasOption(opt))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(opt!=  null  ||  options.hasOption(opt))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt!=  null  ||  options.hasOption(opt))  {	  if(opt!=    null    &&    options.hasOption(opt))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
5	[BUG]  [BUGGY]  if(opt!=  null  &&  options.hasOption(options))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(opt!=  null  &&  options.hasOption(options))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt!=  null  &&  options.hasOption(options))  {	  if(opt!=    null    &&    options.hasOption(opt))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
6	[BUG]  [BUGGY]  if(parameters  ==  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(parameters  ==  null  ||  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(parameters  ==  null  ||  arguments.length!=  0)  {	  if(options    ==    null    ||    arguments.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
7	[BUG]  [BUGGY]  Option  options  =  opts.getOptions(true);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  opts.getOptions(true);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  opts.getOptions(true);	  Option    options    =    opts.getOptions();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  if(options!=  null  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options!=  null  &&  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options!=  null  &&  arguments.length  >  0)  {	  if(opt!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
9	[BUG]  [BUGGY]  if(opt!=  null  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(opt!=  null  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt!=  null  ||  arguments.length  >  0)  {	  if(opt!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
10	[BUG]  [BUGGY]  if(options  ==  null  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  &&  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options  ==  null  &&  arguments.length  >  0)  {	  if(opt!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
11	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  cmd.getOption(t);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  cmd.getOption(t);	  Option    option    =    cmd.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  cmd.getOption(str,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  cmd.getOption(str,  stopAtNonOption);	  Option    option    =    cmd.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  cmd.getOption(t,  str);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  cmd.getOption(t,  str);	  Option    option    =    cmd.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length!=  1)  {	  if(arguments    ==    null    ||    arguments.length!=    2)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  2)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  >=  2)  {	  if(arguments    ==    null    ||    arguments.length!=    2)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions(true);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  cmd.getOptions(true);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  cmd.getOptions(true);	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  Option  options  =  cmd.getOption(t);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  cmd.getOption(t);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  cmd.getOption(t);	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  Option  option  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOptions();	  Option    option    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
19	[BUG]  [BUGGY]  Option  option  =  cmd.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  cmd.getOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  cmd.getOptions();	  Option    option    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
20	[BUG]  [BUGGY]  Option  option  =  opt.getOption(t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  opt.getOption(t);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  opt.getOption(t);	  Option    option    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
21	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  1)  {	  if(arguments    ==    null    ||    arguments.length    <    2    ||    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
22	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  0)  {	  if(arguments    ==    null    ||    arguments.length    <    2    ||    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
23	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  2  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  2  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  >  2  ||  arguments.length  >  0)  {	  if(arguments    ==    null    ||    arguments.length    <    2    ||    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
24	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  >  0)  {	  if(arguments    ==    null    ||    arguments.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
25	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(t,  str,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(t,  str,  stopAtNonOption);	  Option    option    =    options.getOption(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  cmd);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(t,  cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(t,  cmd);	  Option    option    =    options.getOption(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption,  arguments);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(t,  stopAtNonOption,  arguments);	  Option    option    =    options.getOption(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
28	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(options,  stopAtNonOption);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  cmd);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(stopAtNonOption,  cmd);	  Option    option    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  Option  options  =  opt.getOptions(t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  opt.getOptions(t);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  opt.getOptions(t);	  Option    options    =    options.getOptions(t);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
31	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions(t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  cmd.getOptions(t);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  cmd.getOptions(t);	  Option    options    =    options.getOptions(t);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
32	[BUG]  [BUGGY]  Option  options  =  opts.getOptions(t);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  opts.getOptions(t);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  opts.getOptions(t);	  Option    options    =    options.getOptions(t);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
33	[BUG]  [BUGGY]  Option  options  =  t.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  t.getOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  t.getOptions();	  Option    options    =    options.getOptions(t);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
34	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  arguments);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption,  arguments);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
35	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption,  eatTheRest);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
36	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  cmd,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(t,  cmd,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(t,  cmd,  stopAtNonOption);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
37	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(cmd,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(cmd,  eatTheRest);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
38	[BUG]  [BUGGY]  if(opt  ==  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(opt  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt  ==  null  ||  arguments.length  ==  0)  {	  if(opt!=    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
39	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  cmd.getOption(options,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  cmd.getOption(options,  stopAtNonOption);	  Option    option    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
40	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(opt);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  cmd.getOption(opt);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  cmd.getOption(opt);	  Option    option    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
41	[BUG]  [BUGGY]  Option  option  =  opt.getOption(options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  opt.getOption(options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  opt.getOption(options);	  Option    option    =    cmd.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
42	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  2)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  2)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  1)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  1  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  1  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  >  1  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  opt);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  opt);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(stopAtNonOption,  opt);	  Option    option    =    options.getOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
47	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  cmd);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(opt,  cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(opt,  cmd);	  Option    option    =    options.getOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
48	[BUG]  [BUGGY]  Option  options  =  opt.getOptions(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  opt.getOptions(),  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  opt.getOptions(),  stopAtNonOption);	  Option    options    =    opt.getOptions();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  if(options!=  null  &&  options.hasOption(arguments[0]))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options!=  null  &&  options.hasOption(arguments[0]))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options!=  null  &&  options.hasOption(arguments[0]))  {	  if(arguments!=    null    &&    options.hasOption(arguments[0]))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
50	[BUG]  [BUGGY]  if(arguments!=  null  ||  options.hasOption(arguments[0]))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  options.hasOption(arguments[0]))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments!=  null  ||  options.hasOption(arguments[0]))  {	  if(arguments!=    null    &&    options.hasOption(arguments[0]))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
51	[BUG]  [BUGGY]  if(options  ==  null  &&  options.hasOption(arguments[0]))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  &&  options.hasOption(arguments[0]))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options  ==  null  &&  options.hasOption(arguments[0]))  {	  if(arguments!=    null    &&    options.hasOption(arguments[0]))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
52	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(cmd,  t,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(cmd,  t,  eatTheRest);	  Option    option    =    options.getOption(t,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
53	[BUG]  [BUGGY]  if(options  ==  null  ||  options.hasOption(arguments,  stopAtNonOption))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  ||  options.hasOption(arguments,  stopAtNonOption))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options  ==  null  ||  options.hasOption(arguments,  stopAtNonOption))  {	  if(options    ==    null    ||    options.hasOption(arguments))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
54	[BUG]  [BUGGY]  if(arguments  ==  null  ||  options.hasOption(arguments))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  options.hasOption(arguments))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  options.hasOption(arguments))  {	  if(options    ==    null    ||    options.hasOption(arguments))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
55	[BUG]  [BUGGY]  if(options!=  null  ||  options.hasOption(arguments))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options!=  null  ||  options.hasOption(arguments))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options!=  null  ||  options.hasOption(arguments))  {	  if(options    ==    null    ||    options.hasOption(arguments))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
56	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments!=  null  ||  arguments.length  >  0)  {	  if(arguments!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
57	[BUG]  [BUGGY]  if(arguments  ==  null  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  &&  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  &&  arguments.length  >  0)  {	  if(arguments!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
58	[BUG]  [BUGGY]  if(opt!=  null  &&  options.hasOption(arguments))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(opt!=  null  &&  options.hasOption(arguments))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt!=  null  &&  options.hasOption(arguments))  {	  if(opt!=    null    &&    options.hasOption(opt))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
59	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  1  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  1  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length!=  1  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
60	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  1  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  1  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  >=  1  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
61	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >=  2)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >=  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >=  2)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
62	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  cmd.getOption(eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  cmd.getOption(eatTheRest);	  Option    option    =    cmd.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
63	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption,  eatTheRest);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(t,  stopAtNonOption,  eatTheRest);	  Option    option    =    options.getOption(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
64	[BUG]  [BUGGY]  if(opt!=  null  &&  options.hasOption(arguments[0]))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(opt!=  null  &&  options.hasOption(arguments[0]))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt!=  null  &&  options.hasOption(arguments[0]))  {	  if(arguments!=    null    &&    options.hasOption(arguments[0]))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
65	[BUG]  [BUGGY]  if(opt  ==  null  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(opt  ==  null  &&  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt  ==  null  &&  arguments.length  >  0)  {	  if(opt!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
66	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest,  cmd);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest,  cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(t,  eatTheRest,  cmd);	  Option    option    =    options.getOption(t,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
67	[BUG]  [BUGGY]  Option  options  =  options.getOptions(t,  str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  options.getOptions(t,  str);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  options.getOptions(t,  str);	  Option    options    =    options.getOptions(t);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
68	[BUG]  [BUGGY]  Option  options  =  options.getOptions(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  options.getOptions(t,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  options.getOptions(t,  eatTheRest);	  Option    options    =    options.getOptions(t);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
69	[BUG]  [BUGGY]  Option  options  =  options.getOptions(cmd);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  options.getOptions(cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  options.getOptions(cmd);	  Option    options    =    options.getOptions(t);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
70	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(opt,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(opt,  eatTheRest);	  Option    option    =    options.getOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
71	[BUG]  [BUGGY]  if(opt!=  null  ||  eatTheRest)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(opt!=  null  ||  eatTheRest)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt!=  null  ||  eatTheRest)  {	  if(opt    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
72	[BUG]  [BUGGY]  if(opt!=  null  &&  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(opt!=  null  &&  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt!=  null  &&  arguments.length  ==  0)  {	  if(opt!=    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
73	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions(options);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  cmd.getOptions(options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  cmd.getOptions(options);	  Option    options    =    cmd.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
74	[BUG]  [BUGGY]  if(opt  ==  null  ||  options.hasOption(arguments))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(opt  ==  null  ||  options.hasOption(arguments))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt  ==  null  ||  options.hasOption(arguments))  {	  if(options    ==    null    ||    options.hasOption(arguments))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
75	[BUG]  [BUGGY]  if(opt  ==  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(opt  ==  null  ||  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt  ==  null  ||  arguments.length!=  0)  {	  if(options    ==    null    ||    arguments.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
76	[BUG]  [BUGGY]  if(option  ==  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(option  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(option  ==  null  ||  arguments.length  ==  0)  {	  if(opt!=    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
77	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(t,  blockAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(t,  blockAtNonOption);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
78	[BUG]  [BUGGY]  if(options  ==  null  ||  options.hasArg(arguments))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options  ==  null  ||  options.hasArg(arguments))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options  ==  null  ||  options.hasArg(arguments))  {	  if(options    ==    null    ||    options.hasOption(arguments))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
79	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(t,  str,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(t,  str,  eatTheRest);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  if(option!=  null  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(option!=  null  &&  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(option!=  null  &&  arguments.length  >  0)  {	  if(opt!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
81	[BUG]  [BUGGY]  if(options!=  null  &&  options.hasOption(options))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(options!=  null  &&  options.hasOption(options))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options!=  null  &&  options.hasOption(options))  {	  if(opt!=    null    &&    options.hasOption(opt))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
82	[BUG]  [BUGGY]  if(args  ==  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(args  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(args  ==  null  ||  arguments.length  ==  0)  {	  if(options    ==    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
83	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments!=  null  &&  arguments.length  ==  0)  {	  if(arguments!=    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
84	[BUG]  [BUGGY]  Option  options  =  options.getOptions(str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  options  =  options.getOptions(str);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  options.getOptions(str);	  Option    options    =    options.getOptions(t);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
85	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  argument);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption,  argument);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption,  argument);	  Option    option    =    options.getOption(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
86	[BUG]  [BUGGY]  if(arguments  ==  null  &&  options.hasOption(arguments[0]))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  &&  options.hasOption(arguments[0]))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  &&  options.hasOption(arguments[0]))  {	  if(arguments!=    null    &&    options.hasOption(arguments[0]))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
87	[BUG]  [BUGGY]  if(arguments  ==  null  ||  options.hasOption(arguments[0]))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  options.hasOption(arguments[0]))  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  options.hasOption(arguments[0]))  {	  if(arguments!=    null    &&    options.hasOption(arguments[0]))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
88	[BUG]  [BUGGY]  if(args  ==  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(args  ==  null  ||  arguments.length!=  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(args  ==  null  ||  arguments.length!=  0)  {	  if(options    ==    null    ||    arguments.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
