bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments!=  null  ||  arguments.length  ==  0)  {	  if(arguments!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(stopAtNonOption);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  <  1)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  2)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  2)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length!=  2)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  <  2)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(str);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  cmd.getOption(str);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  cmd.getOption(str);	      Option    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(t,  str);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(t,  str);	      Option    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  Option  option  =  opt.getOption(str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  opt.getOption(str);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  opt.getOption(str);	      Option    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  Option  options  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  options  =  opt.getOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  opt.getOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  Option  options  =  cmd.getOptions();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  options  =  cmd.getOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  cmd.getOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  Option  options  =  opts.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  options  =  opts.getOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  opts.getOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
12	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(t,  stopAtNonOption);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(t,  eatTheRest);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  if(options  ==  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(options  ==  null  ||  arguments.length  ==  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options  ==  null  ||  arguments.length  ==  0)  {	  if(options    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
15	[BUG]  [BUGGY]  if(options  ==  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(options  ==  null  ||  arguments.length!=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options  ==  null  ||  arguments.length!=  0)  {	  if(options    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  Option  option  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  opt.getOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  opt.getOptions();	      Option    options    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  Options  options  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Options  options  =  opt.getOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Options  options  =  opt.getOptions();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  Options  options  =  cmd.getOptions();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Options  options  =  cmd.getOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Options  options  =  cmd.getOptions();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  Options  options  =  opts.getOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Options  options  =  opts.getOptions();  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Options  options  =  opts.getOptions();	      Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length!=  0)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  >=  0)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  if(options!=  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(options!=  null)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options!=  null)  {	  if(opt!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
23	[BUG]  [BUGGY]  if(opt  ==  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(opt  ==  null)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt  ==  null)  {	  if(opt!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(cmd,  stopAtNonOption);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(cmd,  stopAtNonOption);	      Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(options);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  cmd.getOption(options);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  cmd.getOption(options);	      Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(options);	      Option    option    =    options.getOption(cmd);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(opt,  stopAtNonOption);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  2)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  2)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  ==  2)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
29	[BUG]  [BUGGY]  if(opt!=  null  ||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(opt!=  null  ||  arguments.length  ==  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt!=  null  ||  arguments.length  ==  0)  {	  if(opt!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
30	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  ==  1)  {	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  if(opt!=  null  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(opt!=  null  &&  arguments.length  >  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt!=  null  &&  arguments.length  >  0)  {	  if(opt!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  if(opt!=  null  &&  options.hasOption(opt))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(opt!=  null  &&  options.hasOption(opt))  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(opt!=  null  &&  options.hasOption(opt))  {	  if(opt!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  &&  arguments.length  >  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments!=  null  &&  arguments.length  >  0)  {	  if(arguments!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  if(arguments!=  null  &&  options.hasOption(arguments[0]))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments!=  null  &&  options.hasOption(arguments[0]))  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments!=  null  &&  options.hasOption(arguments[0]))  {	  if(arguments!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  if(options  ==  null  ||  options.hasOption(arguments))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(options  ==  null  ||  options.hasOption(arguments))  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(options  ==  null  ||  options.hasOption(arguments))  {	  if(options    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
36	[BUG]  [BUGGY]  Option  options  =  options.getOptions(t);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  options  =  options.getOptions(t);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  options  =  options.getOptions(t);	      Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption);  [BUGGY]    if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	Option  option  =  options.getOption(str,  stopAtNonOption);	      Option    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;    [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  0)  {  [BUGGY]    {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	161	162	1	replace	if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  0)  {	  if(arguments    ==    null    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
