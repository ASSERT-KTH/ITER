bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  eatTheRest  =  true;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]  boolean  eatTheRest  =  true;  [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	boolean  eatTheRest  =  true;	boolean  eatTheRest  =  false;  	non-compiled	[CE]  illegal  start  of  type	32	None	replace
2	[BUG]  [BUGGY]  boolean  eattheRest  =  true;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]  boolean  eattheRest  =  true;  [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	boolean  eattheRest  =  true;	boolean  eatTheRest  =  false;  	non-compiled	[CE]  illegal  start  of  type	32	None	replace
3	[BUG]  [BUGGY]  boolean  stopAtNonOption  =  false;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]  boolean  stopAtNonOption  =  false;  [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	boolean  stopAtNonOption  =  false;	boolean  eatTheRest  =  false;  	non-compiled	[CE]  illegal  start  of  type	32	None	replace
4	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    [BUGGY]    if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	  	boolean  eatTheRest  =  false;  	non-compiled	[CE]  illegal  start  of  type	32	None	replace
5	[BUG]  [BUGGY]    Option  option  =  options.helpOption(cmd);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =  options.helpOption(cmd);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	    Option  option  =  options.helpOption(cmd);		non-compiled	[CE]  illegal  start  of  type	33	None	add
6	[BUG]  [BUGGY]    Option  option  =  options.getOption(opt);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =  options.getOption(opt);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	    Option  option  =  options.getOption(opt);		non-compiled	[CE]  illegal  start  of  type	33	None	add
7	[BUG]  [BUGGY]    Option  option  =(Option)opt.getOption();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =(Option)opt.getOption();  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	    Option  option  =(Option)opt.getOption();		non-compiled	[CE]  illegal  start  of  type	33	None	add
8	[BUG]  [BUGGY]    Option  option  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =  options.getOption(t);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	    Option  option  =  options.getOption(t);		non-compiled	[CE]  illegal  start  of  type	33	None	add
9	[BUG]  [BUGGY]    Option  option  =  cmd.getOption(opt);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =  cmd.getOption(opt);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	    Option  option  =  cmd.getOption(opt);		non-compiled	[CE]  illegal  start  of  type	33	None	add
10	[BUG]  [BUGGY]    Option  option  =  options.helpOptions();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =  options.helpOptions();  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	    Option  option  =  options.helpOptions();		non-compiled	[CE]  illegal  start  of  type	33	None	add
11	[BUG]  [BUGGY]    if(opt!=  null)  {  cmd  =  new  CommandLine();  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    if(opt!=  null)  {  cmd  =  new  CommandLine();  }  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	    if(opt!=  null)  {  cmd  =  new  CommandLine();  }		non-compiled	[CE]  illegal  start  of  type	33	None	add
12	[BUG]  [BUGGY]    Option  option  =  options.getOption(cmd);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =  options.getOption(cmd);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	    Option  option  =  options.getOption(cmd);		non-compiled	[CE]  illegal  start  of  type	33	None	add
13	[BUG]  [BUGGY]    if(opt!=  null)  {  cmd.addValue(getOptions());  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    if(opt!=  null)  {  cmd.addValue(getOptions());  }  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	    if(opt!=  null)  {  cmd.addValue(getOptions());  }		non-compiled	[CE]  illegal  start  of  type	33	None	add
14	[BUG]  [BUGGY]    Option  options  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    Option  options  =  options.getOptions();  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	    Option  options  =  options.getOptions();		non-compiled	[CE]  illegal  start  of  type	33	None	add
15	[BUG]  [BUGGY]    Option  option  =  options.addOption(opt);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  for  (Iterator  it  =  options.helpOptions().iterator();  it.hasNext();)  {  Option  opt  =  (Option)  it.next();  opt.clearValues();  }  setOptions(options);  cmd  =  new  CommandLine();  [BUGGY]    Option  option  =  options.addOption(opt);  [BUGGY]  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	159	159	1	replace	    Option  option  =  options.addOption(opt);		non-compiled	[CE]  illegal  start  of  type	33	None	add
