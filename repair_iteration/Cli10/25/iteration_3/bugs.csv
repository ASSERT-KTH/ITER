bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  getOptions().hasArg(t))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  getOptions().hasArg(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  getOptions().hasArg(t))  {	  if(!stopAtNonOption    &&    getOptions().hasOption(t))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption  ||  iterator.hasNext())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  iterator.hasNext())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  iterator.hasNext())  {	  if(stopAtNonOption    &&    iterator.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  iterator.hasNext())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  iterator.hasNext())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  iterator.hasNext())  {	  if(stopAtNonOption    &&    iterator.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  ||  arguments[t.toString()  ].equals( "- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  ||  arguments[t.toString()  ].equals( "- "))  {  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	||  arguments[t.toString()  ].equals( "- "))  {	  ||    t.startsWith(arguments[t.toString()    ]))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
5	[BUG]  [BUGGY]  ||  arguments[t.toString()  ].startsWith(t.toString()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  ||  arguments[t.toString()  ].startsWith(t.toString()))  {  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	||  arguments[t.toString()  ].startsWith(t.toString()))  {	  ||    t.startsWith(arguments[t.toString()    ]))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
6	[BUG]  [BUGGY]  ||  arguments[t.toString()  ].startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  ||  arguments[t.toString()  ].startsWith( "- "))  {  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	||  arguments[t.toString()  ].startsWith( "- "))  {	  ||    t.startsWith(arguments[t.toString()    ]))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
7	[BUG]  [BUGGY]  ||  arguments.startsWith(t))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  ||  arguments.startsWith(t))  {  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	||  arguments.startsWith(t))  {	  ||    t.startsWith(arguments))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
8	[BUG]  [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  iterator  =  this.opts.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
9	[BUG]  [BUGGY]  Iterator  iterator  =  parameters.iterator();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  iterator  =  parameters.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  iterator  =  parameters.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
10	[BUG]  [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  iterator  =  this.arguments.iterator();	  Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
11	[BUG]  [BUGGY]  ||  t.startsWith( "--))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  ||  t.startsWith( "--))  {  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	||  t.startsWith( "--))  {	  ||    t.startsWith(   "-))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
12	[BUG]  [BUGGY]  Iterator  iterator  =  str.iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  iterator  =  str.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  iterator  =  str.iterator();	  Iterator    iterator    =    t.iterator();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
13	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opt.values().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  opt.values().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  opt.values().iterator();	  Iterator    <    Option>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
14	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  option.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  option.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  option.keySet().iterator();	  Iterator    <    Option>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption  &&  getOptions().contains(t)||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  getOptions().contains(t)||  arguments.length  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  getOptions().contains(t)||  arguments.length  >  0)  {	  if(stopAtNonOption    &&    getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption  &&  getOptions().contains(t,  arguments))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  getOptions().contains(t,  arguments))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  getOptions().contains(t,  arguments))  {	  if(stopAtNonOption    &&    getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
17	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  getOptions().contains(t)||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  getOptions().contains(t)||  arguments.length  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  getOptions().contains(t)||  arguments.length  >  0)  {	  if(!stopAtNonOption    &&    getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
18	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  arguments.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  arguments.iterator();	  Iterator    <    Option>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
19	[BUG]  [BUGGY]  String  str  =  t.substring(0,  t.length()  -  1).trim();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  String  str  =  t.substring(0,  t.length()  -  1).trim();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	String  str  =  t.substring(0,  t.length()  -  1).trim();	  String    str    =    t.substring(0,    t.length()).trim();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
20	[BUG]  [BUGGY]  String  str  =  t.substring(0,  t.length()  -  2).trim();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  String  str  =  t.substring(0,  t.length()  -  2).trim();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	String  str  =  t.substring(0,  t.length()  -  2).trim();	  String    str    =    t.substring(0,    t.length()).trim();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
21	[BUG]  [BUGGY]  String  str  =  t.substring(0,  t.length()  -  1,  t.length()).trim();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  String  str  =  t.substring(0,  t.length()  -  1,  t.length()).trim();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	String  str  =  t.substring(0,  t.length()  -  1,  t.length()).trim();	  String    str    =    t.substring(0,    t.length()).trim();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
22	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getIterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  options.getIterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  options.getIterator();	  Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
23	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  properties.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  properties.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  properties.keySet().iterator();	  Iterator    <    String>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
24	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  t.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  t.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  t.keySet().iterator();	  Iterator    <    String>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
25	[BUG]  [BUGGY]  Iterator  iterator  =  opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  iterator  =  opts.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  iterator  =  opts.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
26	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  t.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  t.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  t.iterator();	  Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
27	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.getOptions().contains(t))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  options.getOptions().contains(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  options.getOptions().contains(t))  {	  if(stopAtNonOption    &&    options.getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
28	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOptions().contains(t)||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.getOptions().contains(t)||  arguments.length  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  options.getOptions().contains(t)||  arguments.length  >  0)  {	  if(stopAtNonOption    &&    options.getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
29	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.getOptions().contains(t))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  options.getOptions().contains(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  options.getOptions().contains(t))  {	  if(stopAtNonOption    &&    options.getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
30	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOptions().contains(t,  arguments))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.getOptions().contains(t,  arguments))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  options.getOptions().contains(t,  arguments))  {	  if(stopAtNonOption    &&    options.getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
31	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasArg(t))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  options.hasArg(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  options.hasArg(t))  {	  if(stopAtNonOption    &&    options.hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
32	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasArg(t))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasArg(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  options.hasArg(t))  {	  if(stopAtNonOption    &&    options.hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
33	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasArg(t)||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.hasArg(t)||  arguments.length  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  options.hasArg(t)||  arguments.length  >  0)  {	  if(stopAtNonOption    &&    options.hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasArg())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.hasArg())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  options.hasArg())  {	  if(stopAtNonOption    &&    options.hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
35	[BUG]  [BUGGY]  t  =  iterator.nextToken();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  t  =  iterator.nextToken();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	t  =  iterator.nextToken();	  t    =    iterator.nextIterator();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
36	[BUG]  [BUGGY]  if(stopAtNonOption  ||!getOptions().isEmpty(t))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||!getOptions().isEmpty(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||!getOptions().isEmpty(t))  {	  if(stopAtNonOption    &&!getOptions().isEmpty(t))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption  ||  getOptions().isEmpty(t))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  getOptions().isEmpty(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  getOptions().isEmpty(t))  {	  if(stopAtNonOption    &&!getOptions().isEmpty(t))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
38	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!getOptions().isEmpty(t))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&!getOptions().isEmpty(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&!getOptions().isEmpty(t))  {	  if(stopAtNonOption    &&!getOptions().isEmpty(t))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
39	[BUG]  [BUGGY]  ||  t.startsWith(arguments[t.length()  -  1]))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  ||  t.startsWith(arguments[t.length()  -  1]))  {  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	||  t.startsWith(arguments[t.length()  -  1]))  {	  ||    t.startsWith(arguments[t.length()    ]))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
40	[BUG]  [BUGGY]  ||  arguments[t.length()  ].equals( "- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  ||  arguments[t.length()  ].equals( "- "))  {  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	||  arguments[t.length()  ].equals( "- "))  {	  ||    t.startsWith(arguments[t.length()    ]))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
41	[BUG]  [BUGGY]  ||  arguments[t.length()  ].startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  ||  arguments[t.length()  ].startsWith( "- "))  {  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	||  arguments[t.length()  ].startsWith( "- "))  {	  ||    t.startsWith(arguments[t.length()    ]))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
42	[BUG]  [BUGGY]  if(stopAtNonOption  &&  iterator.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  iterator.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  iterator.startsWith( "-- "))  {	  if(stopAtNonOption    &&    iterator.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
43	[BUG]  [BUGGY]  if(stopAtNonOption  ||  iterator.startsWith( "-   "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  iterator.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  iterator.startsWith( "-   "))  {	  if(stopAtNonOption    &&    iterator.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
44	[BUG]  [BUGGY]  if(stopAtNonOption  &&  iterator.startsWith( "- ")||  iterator.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  iterator.startsWith( "- ")||  iterator.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  iterator.startsWith( "- ")||  iterator.startsWith( "-- "))  {	  if(stopAtNonOption    &&    iterator.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
45	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opt.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  opt.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  opt.iterator();	  Iterator    <    String>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
46	[BUG]  [BUGGY]  if(stopAtNonOption  ||  getOptions().hasOption(t)&&  iterator.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  getOptions().hasOption(t)&&  iterator.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  getOptions().hasOption(t)&&  iterator.startsWith( "-- "))  {	  if(stopAtNonOption    ||    getOptions().hasOption(t)&&    iterator.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
47	[BUG]  [BUGGY]  if(stopAtNonOption  &&  getOptions().hasOption(t)&&  iterator.startsWith( "-   "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  getOptions().hasOption(t)&&  iterator.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  getOptions().hasOption(t)&&  iterator.startsWith( "-   "))  {	  if(stopAtNonOption    ||    getOptions().hasOption(t)&&    iterator.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
48	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  getOptions().hasOption(t)&&  iterator.startsWith( "-   "))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  getOptions().hasOption(t)&&  iterator.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  getOptions().hasOption(t)&&  iterator.startsWith( "-   "))  {	  if(stopAtNonOption    ||    getOptions().hasOption(t)&&    iterator.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
49	[BUG]  [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  iterator  =  opts.values().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
50	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.arguments.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  this.arguments.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  this.arguments.iterator();	  Iterator    <    String>    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
51	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  properties.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  properties.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  properties.iterator();	  Iterator    <    Option>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
52	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  this.opts.iterator();	  Iterator    <    Option>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption  &&  getOptions().hasArg(t))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  getOptions().hasArg(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  getOptions().hasArg(t))  {	  if(stopAtNonOption    &&    getOptions().hasOption(t))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  if(stopAtNonOption  &&  getOptions().get(t))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  getOptions().get(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  getOptions().get(t))  {	  if(stopAtNonOption    &&    getOptions().hasOption(t))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  opts.values().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  opts.values().iterator();	  Iterator    <    String>    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption  &&  eatTheRest)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  eatTheRest)  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  if(stopAtNonOption  ||  it.hasNext())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  it.hasNext())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  it.hasNext())  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  stopAtNonOption)  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
59	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  stopAtNonOption)  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
60	[BUG]  [BUGGY]  if(stopAtNonOption  &&  it.hasNext()  ||  it.hasNext())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  it.hasNext()  ||  it.hasNext())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  it.hasNext()  ||  it.hasNext())  {	  if(stopAtNonOption    &&    it.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  String  str  =  t.substring(0,  t.length()  -  2);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  String  str  =  t.substring(0,  t.length()  -  2);  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	String  str  =  t.substring(0,  t.length()  -  2);	  String    str    =    t.substring(0,    t.length());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
62	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.getAllOptions().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  options.getAllOptions().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  options.getAllOptions().iterator();	  Iterator    <    String>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
63	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.getIterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  options.getIterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  options.getIterator();	  Iterator    <    String>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
64	[BUG]  [BUGGY]  t  =  iterator.first();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  t  =  iterator.first();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	t  =  iterator.first();	  t    =    iterator.previous();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
65	[BUG]  [BUGGY]  String  str  =  t.substring(0,  t.length()  -  1));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  String  str  =  t.substring(0,  t.length()  -  1));  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	String  str  =  t.substring(0,  t.length()  -  1));	  String    str    =    t.substring(0,    t.length()));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
66	[BUG]  [BUGGY]  String  str  =  t.substring(0,  t.length()  -  2));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  String  str  =  t.substring(0,  t.length()  -  2));  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	String  str  =  t.substring(0,  t.length()  -  2));	  String    str    =    t.substring(0,    t.length()));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
67	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(t)||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(t)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  options.hasOption(t)||  stopAtNonOption)  {	  if(!stopAtNonOption    &&    options.hasOption(t))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
68	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(t))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  options.hasOption(t))  {	  if(!stopAtNonOption    &&    options.hasOption(t))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
69	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Option  option  =  options.getOption(t,  stopAtNonOption);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
70	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Option  option  =  options.getOption(t,  eatTheRest);  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Option  option  =  options.getOption(t,  eatTheRest);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Option  option  =  options.getOption(t,  str);  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Option  option  =  options.getOption(t,  str);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
72	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  properties.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  properties.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  properties.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
73	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  opts.values().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  opts.values().iterator();	  Iterator    <    Option>    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
74	[BUG]  [BUGGY]  if(stopAtNonOption  ||  getOptions().contains(t)&&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  getOptions().contains(t)&&  arguments.length  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  getOptions().contains(t)&&  arguments.length  >  0)  {	  if(stopAtNonOption    ||    getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  it.hasNext())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  it.hasNext())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  it.hasNext())  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!opts.contains(t))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&!opts.contains(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&!opts.contains(t))  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
77	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  arguments.length  >  0)  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
78	[BUG]  [BUGGY]  t  =  iterator.getIterator(str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  t  =  iterator.getIterator(str);  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	t  =  iterator.getIterator(str);	  t    =    iterator.getIterator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
79	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  properties.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  properties.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  properties.keySet().iterator();	  Iterator    <    Option>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
80	[BUG]  [BUGGY]  t  =  iterator.clone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  t  =  iterator.clone();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	t  =  iterator.clone();	  t    =    iterator.remove();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
81	[BUG]  [BUGGY]  if(stopAtNonOption  &&  str.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  str.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  str.startsWith( "-- "))  {	  if(stopAtNonOption    ||    str.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
82	[BUG]  [BUGGY]  if(stopAtNonOption  ||  t.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  t.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  t.startsWith( "-- "))  {	  if(stopAtNonOption    ||    str.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
83	[BUG]  [BUGGY]  if(stopAtNonOption  ||  str.startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  str.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  str.startsWith( "- "))  {	  if(stopAtNonOption    ||    str.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
84	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasArg(t,  str))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.hasArg(t,  str))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  options.hasArg(t,  str))  {	  if(stopAtNonOption    &&    options.hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
85	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasArg(t)||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.hasArg(t)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  options.hasArg(t)||  stopAtNonOption)  {	  if(stopAtNonOption    &&    options.hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
86	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptions().iterator(t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptions().iterator(t);  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  options.getOptions().iterator(t);	  Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
87	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionList().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionList().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  options.getOptionList().iterator();	  Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
88	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptions().iterator(0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptions().iterator(0);  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  options.getOptions().iterator(0);	  Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
89	[BUG]  [BUGGY]  if(stopAtNonOption  &&  getOptions().contains(t)||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  getOptions().contains(t)||  arguments.length  ==  0)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  getOptions().contains(t)||  arguments.length  ==  0)  {	  if(stopAtNonOption    &&    getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
90	[BUG]  [BUGGY]  if(stopAtNonOption  &&  getArguments().contains(t))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  getArguments().contains(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  getArguments().contains(t))  {	  if(stopAtNonOption    &&    getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
91	[BUG]  [BUGGY]  String  str  =  t.substring(0,  t.length()  -  4);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  String  str  =  t.substring(0,  t.length()  -  4);  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	String  str  =  t.substring(0,  t.length()  -  4);	  String    str    =    t.substring(0,    t.length());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
92	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOptions().contains(t)||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.getOptions().contains(t)||  arguments.length  ==  0)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  options.getOptions().contains(t)||  arguments.length  ==  0)  {	  if(stopAtNonOption    &&    options.getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
93	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOptions().contains(t)||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.getOptions().contains(t)||  arguments.length  <  2)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  options.getOptions().contains(t)||  arguments.length  <  2)  {	  if(stopAtNonOption    &&    options.getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
94	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!opts.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&!opts.isEmpty())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&!opts.isEmpty())  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
95	[BUG]  [BUGGY]  Iterator  iterator  =  options.options().iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  iterator  =  options.options().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  iterator  =  options.options().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
96	[BUG]  [BUGGY]  if(stopAtNonOption  ||!getOptions().contains(t))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||!getOptions().contains(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||!getOptions().contains(t))  {	  if(stopAtNonOption    ||!getOptions().hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
97	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  requiredOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  requiredOptions.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  requiredOptions.keySet().iterator();	  Iterator    <    String>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
98	[BUG]  [BUGGY]  if(stopAtNonOption  &&  iterator.startsWith( "- ")||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  iterator.startsWith( "- ")||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  iterator.startsWith( "- ")||  stopAtNonOption)  {	  if(stopAtNonOption    &&    iterator.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
99	[BUG]  [BUGGY]  ||  t.startsWith(arguments[t.toString()  +  1]))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  ||  t.startsWith(arguments[t.toString()  +  1]))  {  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	||  t.startsWith(arguments[t.toString()  +  1]))  {	  ||    t.startsWith(arguments[t.toString()    ]))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
100	[BUG]  [BUGGY]  if(stopAtNonOption  &&  getOptions().isEmpty(t))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  getOptions().isEmpty(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  getOptions().isEmpty(t))  {	  if(stopAtNonOption    &&!getOptions().isEmpty(t))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
101	[BUG]  [BUGGY]  t  =  iterator.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  t  =  iterator.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	t  =  iterator.iterator();	  t    =    iterator.getIterator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
102	[BUG]  [BUGGY]  t  =  iterator.getIterator(0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  t  =  iterator.getIterator(0);  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	t  =  iterator.getIterator(0);	  t    =    iterator.getIterator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
103	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.getOptions().iterator(t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  options.getOptions().iterator(t);  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  options.getOptions().iterator(t);	  Iterator    <    String>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
104	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.getOptionList().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  options.getOptionList().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  options.getOptionList().iterator();	  Iterator    <    String>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
105	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.getOptions().iterator(0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  options.getOptions().iterator(0);  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  options.getOptions().iterator(0);	  Iterator    <    String>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
106	[BUG]  [BUGGY]  ||  t.startsWith(arguments[ "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  ||  t.startsWith(arguments[ "-- "))  {  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	||  t.startsWith(arguments[ "-- "))  {	  ||    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
107	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  requiredOptions.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  requiredOptions.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
108	[BUG]  [BUGGY]  if(stopAtNonOption  ||  arguments.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  arguments.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  arguments.startsWith( "-- "))  {	  if(stopAtNonOption    ||    str.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
109	[BUG]  [BUGGY]  if(haltAtNonOption  ||  getOptions().hasOption(t))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(haltAtNonOption  ||  getOptions().hasOption(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(haltAtNonOption  ||  getOptions().hasOption(t))  {	  if(eatTheRest    ||    getOptions().hasOption(t))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
110	[BUG]  [BUGGY]  if(stopAtNonOption  &&  iterator!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  iterator!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  iterator!=  null)  {	  if(stopAtNonOption    &&    iterator.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
111	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  preferredOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  preferredOptions.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  preferredOptions.keySet().iterator();	  Iterator    <    String>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
112	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  requiredOptions.iterator();	  Iterator    <    Option>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
113	[BUG]  [BUGGY]  Iterator  iterator  =  options.options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  iterator  =  options.options.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  iterator  =  options.options.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
114	[BUG]  [BUGGY]  if(stopAtNonOption  &&  getOptions().containsKey(t))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  getOptions().containsKey(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  getOptions().containsKey(t))  {	  if(stopAtNonOption    &&    getOptions().hasOption(t))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
115	[BUG]  [BUGGY]  if(stopAtNonOption  ||  iterator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  iterator)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  iterator)  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
116	[BUG]  [BUGGY]  if(stopAtNonOption  ||  getOptions().contains(t)||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  getOptions().contains(t)||  arguments.length  ==  0)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  getOptions().contains(t)||  arguments.length  ==  0)  {	  if(stopAtNonOption    ||    getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
117	[BUG]  [BUGGY]  if(eatTheRest  ||  getOptions().contains(t))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(eatTheRest  ||  getOptions().contains(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(eatTheRest  ||  getOptions().contains(t))  {	  if(stopAtNonOption    ||    getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
118	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opt.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  opt.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  opt.iterator();	  Iterator    <    Option>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
119	[BUG]  [BUGGY]  if(eatTheRest  &&  it.hasNext())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(eatTheRest  &&  it.hasNext())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(eatTheRest  &&  it.hasNext())  {	  if(stopAtNonOption    &&    it.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
120	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  requiredOptions.keySet().iterator();	  Iterator    <    Option>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
121	[BUG]  [BUGGY]  Iterator  iterator  =  requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  iterator  =  requiredOptions.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  iterator  =  requiredOptions.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
122	[BUG]  [BUGGY]  if(stopAtNonOption  ||  getOptions().containsKey(t))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  getOptions().containsKey(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  getOptions().containsKey(t))  {	  if(stopAtNonOption    ||    getOptions().hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
123	[BUG]  [BUGGY]  if(stopAtNonOption  ||  getOptions().hasArg(t)||  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  getOptions().hasArg(t)||  arguments.length  ==  0)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  getOptions().hasArg(t)||  arguments.length  ==  0)  {	  if(stopAtNonOption    ||    getOptions().hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
124	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  preferredOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  preferredOptions.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  preferredOptions.keySet().iterator();	  Iterator    <    Option>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
125	[BUG]  [BUGGY]  if(stopAtNonOption  &&  getOptions().contains(t,  iterator))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  getOptions().contains(t,  iterator))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  getOptions().contains(t,  iterator))  {	  if(stopAtNonOption    &&    getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
126	[BUG]  [BUGGY]  t  =  iterator.requires();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  t  =  iterator.requires();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	t  =  iterator.requires();	  t    =    iterator.getIterator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
127	[BUG]  [BUGGY]  t  =  iterator.toString();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  t  =  iterator.toString();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	t  =  iterator.toString();	  t    =    iterator.getIterator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
128	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  getOptions().hasOption(t,  str))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  getOptions().hasOption(t,  str))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  getOptions().hasOption(t,  str))  {	  if(!stopAtNonOption    &&    getOptions().hasOption(t))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
129	[BUG]  [BUGGY]  t  =  iterator.nextIterator(str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  t  =  iterator.nextIterator(str);  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	t  =  iterator.nextIterator(str);	  t    =    iterator.nextIterator();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
130	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.getOptions().values().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  options.getOptions().values().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  options.getOptions().values().iterator();	  Iterator    <    String>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
131	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  option.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  option.getOptions().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  option.getOptions().iterator();	  Iterator    <    String>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
132	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  getOptions().contains(t,  iterator))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  getOptions().contains(t,  iterator))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  getOptions().contains(t,  iterator))  {	  if(!stopAtNonOption    &&    getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
133	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  getOptions().contains(t)||  str.startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  getOptions().contains(t)||  str.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  getOptions().contains(t)||  str.startsWith( "- "))  {	  if(!stopAtNonOption    &&    getOptions().contains(t))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
134	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(t))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  options.hasOption(t))  {	  if(stopAtNonOption    &&    options.hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
135	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.isEmpty(t))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  options.isEmpty(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  options.isEmpty(t))  {	  if(stopAtNonOption    &&!getOptions().isEmpty(t))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
136	[BUG]  [BUGGY]  Iterator  iterator  =  options.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  iterator  =  options.getOptions().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  iterator  =  options.getOptions().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
137	[BUG]  [BUGGY]  String  str  =  t.substring(0,  t.length()  -  3);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  String  str  =  t.substring(0,  t.length()  -  3);  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	String  str  =  t.substring(0,  t.length()  -  3);	  String    str    =    t.substring(0,    t.length());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
138	[BUG]  [BUGGY]  if(eatTheRest  ||  stopAtNonOption  &&  iterator.hasNext())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(eatTheRest  ||  stopAtNonOption  &&  iterator.hasNext())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(eatTheRest  ||  stopAtNonOption  &&  iterator.hasNext())  {	  if(stopAtNonOption    &&    iterator.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
139	[BUG]  [BUGGY]  if(stopAtNonOption  &&  iterator!=  null  &&  iterator.hasNext())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  iterator!=  null  &&  iterator.hasNext())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  iterator!=  null  &&  iterator.hasNext())  {	  if(stopAtNonOption    &&    iterator.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
140	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  iterator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Option  option  =  options.getOption(t,  iterator);  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Option  option  =  options.getOption(t,  iterator);	  Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
141	[BUG]  [BUGGY]  if(eatTheRest  ||  stopAtNonOption  &&  it.hasNext())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(eatTheRest  ||  stopAtNonOption  &&  it.hasNext())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(eatTheRest  ||  stopAtNonOption  &&  it.hasNext())  {	  if(stopAtNonOption    &&    it.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
142	[BUG]  [BUGGY]  t  =  iterator.peek();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  t  =  iterator.peek();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	t  =  iterator.peek();	  t    =    iterator.remove();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
143	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(t,  str))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(t,  str))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&  options.hasOption(t,  str))  {	  if(!stopAtNonOption    &&    options.hasOption(t))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
144	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptions().values().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptions().values().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  options.getOptions().values().iterator();	  Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
145	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opt.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  opt.getOptions().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  opt.getOptions().iterator();	  Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
146	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  option.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  Option>  iterator  =  option.getOptions().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  Option>  iterator  =  option.getOptions().iterator();	  Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
147	[BUG]  [BUGGY]  if(eatTheRest  ||  getOptions().hasArg(t))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(eatTheRest  ||  getOptions().hasArg(t))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(eatTheRest  ||  getOptions().hasArg(t))  {	  if(stopAtNonOption    ||    getOptions().hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
148	[BUG]  [BUGGY]  if(stopAtNonOption  ||  getOptions().size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  getOptions().size()  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  getOptions().size()  >  0)  {	  if(stopAtNonOption    ||    getOptions().hasArg(t))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
149	[BUG]  [BUGGY]  if(stopAtNonOption  ||  iterator.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  iterator.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  iterator.startsWith( "-- "))  {	  if(stopAtNonOption    &&    iterator.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
150	[BUG]  [BUGGY]  if(stopAtNonOption  &&  iterator.startsWith( "-- ")||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  iterator.startsWith( "-- ")||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  iterator.startsWith( "-- ")||  stopAtNonOption)  {	  if(stopAtNonOption    &&    iterator.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
151	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  this.opts.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  this.opts.keySet().iterator();	  Iterator    <    String>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
152	[BUG]  [BUGGY]  if(stopAtNonOption  &&  getOptions().hasOption(t)&&  iterator.hasNext())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  &&  getOptions().hasOption(t)&&  iterator.hasNext())  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&  getOptions().hasOption(t)&&  iterator.hasNext())  {	  if(stopAtNonOption    &&    getOptions().hasOption(t))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
153	[BUG]  [BUGGY]  ||  t.startsWith( ".- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  ||  t.startsWith( ".- "))  {  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	||  t.startsWith( ".- "))  {	  ||    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
154	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  iterator  =  this.options.keySet().iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  iterator  =  this.options.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
155	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  Iterator  <  String>  iterator  =  this.opts.iterator();  [BUGGY]      if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	Iterator  <  String>  iterator  =  this.opts.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
156	[BUG]  [BUGGY]  if(stopAtNonOption  ||  getOptions().hasOption(t)&&  iterator.endsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith(     "-     "))  {      [BUGGY]  if(stopAtNonOption  ||  getOptions().hasOption(t)&&  iterator.endsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  getOptions().hasOption(t)&&  iterator.endsWith( "-- "))  {	  if(stopAtNonOption    ||    getOptions().hasOption(t)&&    iterator.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
