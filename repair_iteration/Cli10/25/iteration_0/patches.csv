bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption  ||!getOptions().hasOption(t))  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]  if(stopAtNonOption  ||!getOptions().hasOption(t))  {  [BUGGY]  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||!getOptions().hasOption(t))  {	if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  	non-compiled	[CE]  illegal  start  of  type	50	None	replace
2	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!getOptions().hasOption(t))  {  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]  if(!stopAtNonOption  &&!getOptions().hasOption(t))  {  [BUGGY]  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(!stopAtNonOption  &&!getOptions().hasOption(t))  {	if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  	non-compiled	[CE]  illegal  start  of  type	50	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption  &&!getOptions().contains(t))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]  if(stopAtNonOption  &&!getOptions().contains(t))  {  [BUGGY]  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&!getOptions().contains(t))  {	if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  	non-compiled	[CE]  illegal  start  of  type	50	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption  &&!getOptions().hasArg(t))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]  if(stopAtNonOption  &&!getOptions().hasArg(t))  {  [BUGGY]  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  &&!getOptions().hasArg(t))  {	if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  	non-compiled	[CE]  illegal  start  of  type	50	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]    [BUGGY]  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	  	if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  	non-compiled	[CE]  illegal  start  of  type	50	None	replace
6	[BUG]  [BUGGY]    ||  t.startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]    ||  t.startsWith( "- "))  {  [BUGGY]  if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	    ||  t.startsWith( "- "))  {		non-compiled	[CE]  illegal  start  of  type	51	None	add
7	[BUG]  [BUGGY]    t  =  iterator.next();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]    t  =  iterator.next();  [BUGGY]  if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	    t  =  iterator.next();		non-compiled	[CE]  illegal  start  of  type	51	None	add
8	[BUG]  [BUGGY]    Iterator  <  Option>  iterator  =  options.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]    Iterator  <  Option>  iterator  =  options.iterator();  [BUGGY]  if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	    Iterator  <  Option>  iterator  =  options.iterator();		non-compiled	[CE]  illegal  start  of  type	51	None	add
9	[BUG]  [BUGGY]    String  str  =  t.substring(0,  t.length()  -  1);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]    String  str  =  t.substring(0,  t.length()  -  1);  [BUGGY]  if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	    String  str  =  t.substring(0,  t.length()  -  1);		non-compiled	[CE]  illegal  start  of  type	51	None	add
10	[BUG]  [BUGGY]    Iterator  iterator  =  options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]    Iterator  iterator  =  options.iterator();  [BUGGY]  if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	    Iterator  iterator  =  options.iterator();		non-compiled	[CE]  illegal  start  of  type	51	None	add
11	[BUG]  [BUGGY]    Iterator  <  String>  iterator  =  options.iterator();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]    Iterator  <  String>  iterator  =  options.iterator();  [BUGGY]  if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	    Iterator  <  String>  iterator  =  options.iterator();		non-compiled	[CE]  illegal  start  of  type	51	None	add
12	[BUG]  [BUGGY]    Iterator  <  String>  iterator  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]    Iterator  <  String>  iterator  =  options.keySet().iterator();  [BUGGY]  if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	    Iterator  <  String>  iterator  =  options.keySet().iterator();		non-compiled	[CE]  illegal  start  of  type	51	None	add
13	[BUG]  [BUGGY]    Iterator  <  Option>  iterator  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]    Iterator  <  Option>  iterator  =  options.keySet().iterator();  [BUGGY]  if  (stopAtNonOption  &&  !getOptions().hasOption(t))    {  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	    Iterator  <  Option>  iterator  =  options.keySet().iterator();		non-compiled	[CE]  illegal  start  of  type	51	None	add
14	[BUG]  [BUGGY]  if(stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]  if(stopAtNonOption)  {  [BUGGY]  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption)  {	if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  	non-compiled	[CE]  illegal  start  of  type	50	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption  ||  getOptions().hasOption(t))  {  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  }  else  {  cmd.addArg(t);  }  }  else  if  (t.startsWith( "- "))  {  [BUGGY]  if(stopAtNonOption  ||  getOptions().hasOption(t))  {  [BUGGY]  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	199	200	1	replace	if(stopAtNonOption  ||  getOptions().hasOption(t))  {	if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  	non-compiled	[CE]  illegal  start  of  type	50	None	replace
