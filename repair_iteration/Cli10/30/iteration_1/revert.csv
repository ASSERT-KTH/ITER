projects/Cli10/src/java/org/apache/commons/cli/Parser.java238checkRequiredOptions();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238if(stopAtNonOption){checkRequiredOptions();}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238if(!stopAtNonOption){checkRequiredOptions();}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238if(stopAtNonOption){checkRequiredOptions();}else{thrownewIllegalArgumentException("");}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238if(stopAtNonOption){checkRequiredOptions();}else{cmd.addArg(t);}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=options.iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iteratoriterator=options.iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optionoption=options.getOption(t);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=options.keySet().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=arguments.iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=options.values().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optioncmd=options.getOption(t);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238if(stopAtNonOption){checkRequiredOptions();}else{cmd.addArg(str);}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iteratoriterator=options.keySet().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iteratoriterator=options.values().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iteratoriterator=opts.keySet().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238||stopAtNonOption){checkRequiredOptions();}else{thrownewIllegalArgumentException("");}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238||stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optioncmd=options.getOption("stopAtNonOption");
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238||stopAtNonOption){checkRequiredOptions();}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238tehnicătehnicăstopAtNonOption){checkRequiredOptions();}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238if(stopAtNonOption){checkRequireOptions();}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238if(stopAtNonOption){checkTheRest();}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238requiredOptions=stopAtNonOption?getRequiredOptions():null;
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optionoption=options.getOption("stopAtNonOption");
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238aughtExceptionHandler.handleMissingException(t);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238aughtExceptionHandler.handleMissingArguments(t);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238options.addArg(str);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optioncmd=options.getOption(str);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optioncmd=options.getOption(t,str);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optioncmd=options.getOption(t,arguments);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optioncmd=options.getOption(t,stopAtNonOption);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=this.arguments.iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=properties.iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iteratoriterator=this.options.iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iteratoriterator=opts.iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=opts.keySet().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=this.options.iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=opts.iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optionoption=options.getOption(t,stopAtNonOption);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optionoption=options.getOption(t,eatTheRest);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optionoption=options.getOption(t,str);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optionoption=options.getOption(str);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=opts.values().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238parse(t,iterator);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238options.addArg(t);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optioncmd=options.getOption(t,eatTheRest);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optioncmd=options.getOption("call");
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optionoption=options.getOption("opt");
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optionoption=options.getOption(t,arguments);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238MutableIteratoriterator=options.getOptions().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238MutableIteratoriterator=options.opts.iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optionoption=options.getOption("opt").getOption("requiredOptions");
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iteratoriterator=options.options.keySet().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optioncmd=options.getOption(t);if(cmd!=null){cmd.addArg(t);}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238ListIterator<String>iterator=options.keySet().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238requiredOptions=stopAtNonOption;
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238requiredOptions=stopAtNonOption?checkRequiredOptions():null;
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238aughtExceptionHandler.handleMissingException("");
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iteratoriterator=this.options.keySet().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=this.options.keySet().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238tryFailedToParse(opt,stopAtNonOption){checkRequiredOptions();}else{cmd.addArg(t);}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238tryFailedToParse(opt,stopAtNonOption){if(stopAtNonOption){checkRequiredOptions();}else{cmd.addArg(t);}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238tryFailedToParse(opt,stopAtNonOption){if(stopAtNonOption){checkRequiredOptions();}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238aughtExceptionHandler.handleMissingArguments(cmd,stopAtNonOption);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optioncmd=options.getOption(t,iterator);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Iterator<String>iterator=this.options.values().iterator();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238iterator.remove();
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238if(stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238if(stopAtNonOption){thrownewIllegalStateException("");}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238if(stopAtNonOption){log.warning("msg.bad.required.options",str);}
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238aughtExceptionHandler.handleMissingArguments(cmd,str);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238aughtExceptionHandler.handleMissingClass(cmd,str);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238aughtExceptionHandler.handleMissingRequiredOptions(cmd,str);
projects/Cli10/src/java/org/apache/commons/cli/Parser.java238Optionoption=options.getOption(t,iterator);
