bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError( "Properties  cannot  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError( "Properties  cannot  be  null. ");	  throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");	  throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(properties.propertyNames()));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(properties.propertyNames()));  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(properties.propertyNames()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(propertyNames));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(propertyNames));  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(propertyNames));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().nextElement().getValue();  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Property  value  =  properties.propertyNames().nextElement().getValue();  if(value.equals(value))  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().nextElement().getValue();  if(value.equals(value))  {  return;  }	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    value    =    c.nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().getValue();  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Property  value  =  properties.propertyNames().getValue();  if(value.equals(value))  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().getValue();  if(value.equals(value))  {  return;  }	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    value    =    c.nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(c.nextElement().getValue());  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Property  value  =  properties.propertyNames().get(c.nextElement().getValue());  if(value.equals(value))  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(c.nextElement().getValue());  if(value.equals(value))  {  return;  }	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    value    =    c.nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals(value))  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals(value))  {  return;  }	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    value    =    c.nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value);  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
11	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp);  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
12	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString());  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString());	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
13	[BUG]  [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  ||  properties.propertyNames()  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  ||  properties.propertyNames()  ==  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties.propertyNames()  ==  null)  {  return;  }	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
22	[BUG]  [BUGGY]  ||  properties.propertyNames()!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  ||  properties.propertyNames()!=  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties.propertyNames()!=  null)  {  return;  }	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
23	[BUG]  [BUGGY]  ||  properties  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  ||  properties  ==  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties  ==  null)  {  return;  }	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
24	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingProperty(properties);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleMissingProperty(properties);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingProperty(properties);	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
25	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requiredOptions();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requiredOptions();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  properties.requiredOptions();	      Enumeration    <    String>    requiredOptions    =    properties.values();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.keySet();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.keySet();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  properties.keySet();	      Enumeration    <    String>    requiredOptions    =    properties.values();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ");  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  RuntimeException( " ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " ");	  throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ",  exp);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  RuntimeException( " ",  exp);  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " ",  exp);	  throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requires();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requires();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  properties.requires();	      Enumeration    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  Iterator  <  Properties>  it  =  properties.propertyNames().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Iterator  <  Properties>  it  =  properties.propertyNames().iterator();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  Properties>  it  =  properties.propertyNames().iterator();	      if(properties    ==    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    if(cmd.hasOption(option))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyNames();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  cmd  =  properties.propertyNames();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  cmd  =  properties.propertyNames();	      if(properties    ==    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    if(cmd.hasOption(option))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
32	[BUG]  [BUGGY]  Properties  properties  =  properties.propertyNames();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Properties  properties  =  properties.propertyNames();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  properties  =  properties.propertyNames();	      if(properties    ==    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    if(cmd.hasOption(option))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  Iterator  <  Properties>  it  =  properties.propertyNames();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Iterator  <  Properties>  it  =  properties.propertyNames();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  Properties>  it  =  properties.propertyNames();	      if(properties    ==    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    if(cmd.hasOption(option))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(properties.propertyNames()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(propertyNames));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(propertyNames));  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(propertyNames));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions();	      Enumeration    <    String>    requiredOptions    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
38	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequires();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequires();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  properties.propertyRequires();	      Enumeration    <    String>    requiredOptions    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
39	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
40	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
41	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
42	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.propertyNames();	      Enumeration    <    String>    cmd    =    properties.properties();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
44	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties().iterator().next();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties().iterator().next();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.properties().iterator().next();	      Enumeration    <    String>    cmd    =    properties.properties();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
45	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.keySet();	      Enumeration    <    String>    cmd    =    properties.properties();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
46	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(key);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(key);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(key);	      Enumeration    <    String>    cmd    =    properties.get(value);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
47	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(propertyName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(propertyName);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(propertyName);	      Enumeration    <    String>    cmd    =    properties.get(value);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
48	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  -  1);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(value  -  1);	      Enumeration    <    String>    cmd    =    properties.get(value);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ")+ "  cannot  access  properties: "  +  properties.propertyNames();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  RuntimeException( " ")+ "  cannot  access  properties: "  +  properties.propertyNames();  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " ")+ "  cannot  access  properties: "  +  properties.propertyNames();	  throw    new    RuntimeException(   "   ")    +   "    cannot    access    properties:   "    +    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values());  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values());	      List    requiredOptions    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
51	[BUG]  [BUGGY]  List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.keySet());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.keySet());  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.keySet());	      List    requiredOptions    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
52	[BUG]  [BUGGY]  ArrayList  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  ArrayList  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values());  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	ArrayList  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values());	      List    requiredOptions    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
53	[BUG]  [BUGGY]  List  <  Option>  requiredOptions  =  new  LinkedList  <  Option>(properties.values());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  List  <  Option>  requiredOptions  =  new  LinkedList  <  Option>(properties.values());  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  requiredOptions  =  new  LinkedList  <  Option>(properties.values());	      List    requiredOptions    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
54	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
55	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
56	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
57	[BUG]  [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(options  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
58	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.values();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.values();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.values();	      Enumeration    <    String>    cmd    =    properties.properties();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
59	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions);  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
60	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.propertyNames();	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
61	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getOption(option);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  AssertionFailedError  exp  =  getOptions().getOption(option);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getOption(option);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
62	[BUG]  [BUGGY]  Iterator  <  String>  it  =  properties.propertyNames();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Iterator  <  String>  it  =  properties.propertyNames();  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  String>  it  =  properties.propertyNames();	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
63	[BUG]  [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(value);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(value);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  new  AssertionFailedError(value);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
64	[BUG]  [BUGGY]  if(properties!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties!=  null)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties!=  null)  {  return;  }	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
65	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingException( " ");	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
66	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreElements(e);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleMoreElements(e);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMoreElements(e);	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
67	[BUG]  [BUGGY]  Throw  new  AssertionFailedError( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throw  new  AssertionFailedError( "Properties  cannot  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  AssertionFailedError( "Properties  cannot  be  null. ");	  throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
68	[BUG]  [BUGGY]  new  AssertionFailedError( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  new  AssertionFailedError( "Properties  cannot  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	new  AssertionFailedError( "Properties  cannot  be  null. ");	  throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
69	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  +  1);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(value  +  1);	      Enumeration    <    String>    cmd    =    properties.get(value);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
70	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ".equals(value));  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  RuntimeException( " ".equals(value));  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " ".equals(value));	  throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(value));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(value));  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(value));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.values());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.values());  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.values());	      List    requiredOptions    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
73	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(option);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Option  cmd  =  getOptions().getOption(option);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Option  cmd  =  getOptions().getOption(option);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Option  option  =  getOptions().getOption(option);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Option  option  =  getOptions().getOption(option);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingName(e,  value);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    value    =    c.nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
76	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(e);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleMissingException(e);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingException(e);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    value    =    c.nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
77	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleFailedError(e,  value);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    value    =    c.nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(value));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(value));  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(value));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getExpr(option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  AssertionFailedError  exp  =  getOptions().getExpr(option);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getExpr(option);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
81	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExp(option);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExp(option);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getOptionExp(option);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
82	[BUG]  [BUGGY]  if(cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(cmd.hasOption(value))  {  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(cmd.hasOption(value))  {	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
83	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet().get(value);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet().get(value);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.keySet().get(value);	      Enumeration    <    String>    cmd    =    properties.get(value);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
84	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(0);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(0);	      Enumeration    <    String>    cmd    =    properties.get(value);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
85	[BUG]  [BUGGY]  Throw  new  RuntimeException( " ");  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throw  new  RuntimeException( " ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  RuntimeException( " ");	  throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
86	[BUG]  [BUGGY]  throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "'  for  value ");  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "'  for  value ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "'  for  value ");	  throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
87	[BUG]  [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value);  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  AssertionFailedError( "Missing  property  value: "  +  value);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
88	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  return  new  AssertionFailedError( "Properties  cannot  be  null. ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	return  new  AssertionFailedError( "Properties  cannot  be  null. ");	  throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
89	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  [Delete]  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	[Delete]	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    value    =    c.nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
90	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(c,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleMissingName(c,  value);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingName(c,  value);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    value    =    c.nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
91	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingValue(c,  value);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleMissingValue(c,  value);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingValue(c,  value);	      if(properties    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    Property    value    =    c.nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
92	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties  ==  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties  ==  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
93	[BUG]  [BUGGY]  if(properties  ==  null  ||  values.size()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  if(properties  ==  null  ||  values.size()  ==  0)  {  return;  }  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties  ==  null  ||  values.size()  ==  0)  {  return;  }	      if(properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
94	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(propertyNames());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.handleOption(propertyNames());  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleOption(propertyNames());	      if(properties    ==    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    if(cmd.hasOption(option))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
95	[BUG]  [BUGGY]  aughtExceptionHandler.processProperties(properties,  cmd);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  aughtExceptionHandler.processProperties(properties,  cmd);  [BUGGY]    return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.processProperties(properties,  cmd);	      if(properties    ==    null)    {    for(Enumeration    cmd    :    properties.propertyNames())    {    if(cmd.hasOption(option))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
96	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {    [BUGGY]  Throwable  cause  =  new  IllegalStateException( " ");  [BUGGY]    }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
