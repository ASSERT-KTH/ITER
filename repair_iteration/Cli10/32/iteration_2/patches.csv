bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Set  <  Option>  requiredOptions  =  new  HashSet  <  Option>(properties.keySet());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Set  <  Option>  requiredOptions  =  new  HashSet  <  Option>(properties.keySet());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Set  <  Option>  requiredOptions  =  new  HashSet  <  Option>(properties.keySet());	  List    <    Option>    requiredOptions    =    new    ArrayList    <    Option>(properties.keySet());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
2	[BUG]  [BUGGY]  List  <  Option>  requiredOptions  =  new  LinkedList  <  Option>(properties.keySet());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  <  Option>  requiredOptions  =  new  LinkedList  <  Option>(properties.keySet());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  requiredOptions  =  new  LinkedList  <  Option>(properties.keySet());	  List    <    Option>    requiredOptions    =    new    ArrayList    <    Option>(properties.keySet());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
3	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  value.equals(value));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  value.equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " "  +  value.equals(value));	  Throwables.throw    new    IllegalStateException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
4	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(value));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " ").equals(value));	  Throwables.throw    new    IllegalStateException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
5	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequires(value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequires(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  properties.propertyRequires(value);	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequires();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
6	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requireRequires();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requireRequires();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  properties.requireRequires();	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequires();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
7	[BUG]  [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
8	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
9	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");	  Throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
10	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalStateException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  IllegalStateException( "Properties  cannot  be  null. ");	  Throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
11	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.getPropertyNames();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.getPropertyNames();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.getPropertyNames();	  Enumeration    <    String>    c    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
12	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.keySet();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.keySet();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.keySet();	  Enumeration    <    String>    c    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
13	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyKeys();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyKeys();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.propertyKeys();	  Enumeration    <    String>    c    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
14	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.values().iterator().next();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.values().iterator().next();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.values().iterator().next();	  Enumeration    <    String>    cmd    =    properties.values();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
15	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value	  if(opt    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value)    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
16	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(	  if(opt    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value)    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
17	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().nextElement().toString();  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().nextElement().toString();  if(value.equals(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().nextElement().toString();  if(value.equals(value))  {  return;  }	  Property    value    =    properties.propertyNames().nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().nextElement().getValue();  if(value.equals( " "))  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().nextElement().getValue();  if(value.equals( " "))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().nextElement().getValue();  if(value.equals( " "))  {  return;  }	  Property    value    =    properties.propertyNames().nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().nextElement().getValue();  if(value.equals(option))  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().nextElement().getValue();  if(value.equals(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().nextElement().getValue();  if(value.equals(option))  {  return;  }	  Property    value    =    properties.propertyNames().nextElement().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  Properties  properties  =  properties.propertyProperties();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  properties.propertyProperties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  properties  =  properties.propertyProperties();	  Properties    properties    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
21	[BUG]  [BUGGY]  Properties  properties  =  this.properties.propertyNames();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  this.properties.propertyNames();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  properties  =  this.properties.propertyNames();	  Properties    properties    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
22	[BUG]  [BUGGY]  Properties  properties  =  properties.properties();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  properties.properties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  properties  =  properties.properties();	  Properties    properties    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
23	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(c.nextElement().toString());  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().get(c.nextElement().toString());  if(value.equals(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(c.nextElement().toString());  if(value.equals(value))  {  return;  }	  Property    value    =    properties.propertyNames().get(c.nextElement().getValue());    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(c.nextElement().toString());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().get(c.nextElement().toString());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(c.nextElement().toString());	  Property    value    =    properties.propertyNames().get(c.nextElement().getValue());    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  Properties  value  =  properties.propertyNames().get(c.nextElement().toString());  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  value  =  properties.propertyNames().get(c.nextElement().toString());  if(value.equals(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  value  =  properties.propertyNames().get(c.nextElement().toString());  if(value.equals(value))  {  return;  }	  Property    value    =    properties.propertyNames().get(c.nextElement().getValue());    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(c.nextElement().getKey());  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().get(c.nextElement().getKey());  if(value.equals(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(c.nextElement().getKey());  if(value.equals(value))  {  return;  }	  Property    value    =    properties.propertyNames().get(c.nextElement().getValue());    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet().get(key);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet().get(key);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.keySet().get(key);	  Enumeration    <    String>    cmd    =    properties.keySet().get(value);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
28	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().get(value);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().get(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.propertyNames().get(value);	  Enumeration    <    String>    cmd    =    properties.keySet().get(value);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
29	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet().get(0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet().get(0);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.keySet().get(0);	  Enumeration    <    String>    cmd    =    properties.keySet().get(value);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
30	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
31	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  properties.propertyNames());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " "  +  properties.propertyNames());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
32	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames()));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(properties.propertyNames()));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
33	[BUG]  [BUGGY]  ||  properties.propertyNames()!=  null)  {  throw  new  RuntimeException( " ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties.propertyNames()!=  null)  {  throw  new  RuntimeException( " ");  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties.propertyNames()!=  null)  {  throw  new  RuntimeException( " ");	  ||    properties.propertyNames()    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
34	[BUG]  [BUGGY]  ||  properties.propertyNames()  ==  null)  {  throw  new  RuntimeException( " ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties.propertyNames()  ==  null)  {  throw  new  RuntimeException( " ");  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties.propertyNames()  ==  null)  {  throw  new  RuntimeException( " ");	  ||    properties.propertyNames()    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
35	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value,    exp);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
36	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  properties);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  properties);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  properties);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value,    exp);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
37	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  e);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  e);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  e);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value,    exp);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
38	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option,  value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  getOptions().getOption(option,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Option  option  =  getOptions().getOption(option,  value);	  Option    option    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
39	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(value);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  getOptions().getOption(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Option  option  =  getOptions().getOption(value);	  Option    option    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
40	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  getOptions().getOption(option  +  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Option  option  =  getOptions().getOption(option  +  1);	  Option    option    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
41	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(propertyName,  value);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(propertyName,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(propertyName,  value);	  Enumeration    <    String>    cmd    =    properties.get(propertyName);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
42	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(propertyName  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(propertyName  +  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(propertyName  +  1);	  Enumeration    <    String>    cmd    =    properties.get(propertyName);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
43	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(value,  c);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(value,  c);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingName(value,  c);	  aughtExceptionHandler.handleMissingName(c,    value);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
44	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(c,  value,  exp);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(c,  value,  exp);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingName(c,  value,  exp);	  aughtExceptionHandler.handleMissingName(c,    value);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
45	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(c,  value,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(c,  value,  requiredOptions);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingName(c,  value,  requiredOptions);	  aughtExceptionHandler.handleMissingName(c,    value);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
46	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreElements(e,  value);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMoreElements(e,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMoreElements(e,  value);	  aughtExceptionHandler.handleMoreElements(e);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
47	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreElements(properties);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMoreElements(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMoreElements(properties);	  aughtExceptionHandler.handleMoreElements(e);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
48	[BUG]  [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption	  if(options    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
49	[BUG]  [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti	  if(options    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
50	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti	  if(options    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
51	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
52	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions,  exp);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions,  exp);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions,  exp);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
53	[BUG]  [BUGGY]  Set  <  Option>  requiredOptions  =  new  HashSet  <  Option>(properties.values());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Set  <  Option>  requiredOptions  =  new  HashSet  <  Option>(properties.values());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Set  <  Option>  requiredOptions  =  new  HashSet  <  Option>(properties.values());	  ArrayList    <    Option>    requiredOptions    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
54	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ",  exp);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingException( " ",  exp);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingException( " ",  exp);	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
55	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.requires();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.requires();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  props.requires();	  Enumeration    <    String>    requiredOptions    =    properties.requires();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
56	[BUG]  [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp);	  Throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
57	[BUG]  [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString());	  Throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
58	[BUG]  [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  cmd);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  cmd);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  cmd);	  Throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
59	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	  Enumeration    <    String>    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.getPropertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.getPropertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.getPropertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	  Enumeration    <    String>    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
61	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	  Enumeration    <    String>    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
62	[BUG]  [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.has  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.has  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.has	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
63	[BUG]  [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
64	[BUG]  [BUGGY]  For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
65	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
66	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(0).propertyNames();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(0).propertyNames();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(0).propertyNames();	  Enumeration    <    String>    cmd    =    properties.get(0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
67	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(properties.size()  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(properties.size()  -  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(properties.size()  -  1);	  Enumeration    <    String>    cmd    =    properties.get(0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
68	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(0).properties;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(0).properties;  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(0).properties;	  Enumeration    <    String>    cmd    =    properties.get(0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
69	[BUG]  [BUGGY]  properties  ==  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  properties  ==  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	properties  ==  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }	  if(properties    ==    null    ||    properties.propertyNames().size()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
70	[BUG]  [BUGGY]  ||  properties.propertyNames().size()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties.propertyNames().size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties.propertyNames().size()  ==  0)  {  return;  }	  if(properties    ==    null    ||    properties.propertyNames().size()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
71	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.propertyNames().size()!=  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null  ||  properties.propertyNames().size()!=  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties  ==  null  ||  properties.propertyNames().size()!=  0)  {  return;  }	  if(properties    ==    null    ||    properties.propertyNames().size()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
72	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(key,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(key,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(key,  value);	  Enumeration    <    String>    cmd    =    properties.get(key);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
73	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(key  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(key  +  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(key  +  1);	  Enumeration    <    String>    cmd    =    properties.get(key);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
74	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(value,  e);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(value,  e);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingName(value,  e);	  aughtExceptionHandler.handleMissingName(e,    value);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
75	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value,  exp);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value,  exp);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingName(e,  value,  exp);	  aughtExceptionHandler.handleMissingName(e,    value);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
76	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.getValue().toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
77	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.getValue().toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
78	[BUG]  [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.getValue().toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
79	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  propertyNames.equals(propertyNames));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  propertyNames.equals(propertyNames));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " "  +  propertyNames.equals(propertyNames));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(propertyNames));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
80	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(propertyNames));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(propertyNames));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(propertyNames));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(propertyNames));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
81	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getExp(option);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getExp(option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getExp(option);	  AssertionFailedError    exp    =    getOptions().getOptionExp(option);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
82	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExp(option,  value);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExp(option,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getOptionExp(option,  value);	  AssertionFailedError    exp    =    getOptions().getOptionExp(option);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
83	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExp(option,  values);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExp(option,  values);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getOptionExp(option,  values);	  AssertionFailedError    exp    =    getOptions().getOptionExp(option);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
84	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Option  cmd  =  getOptions().getOption(option,  value);	  Option    cmd    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
85	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  getOptions().getOption(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Option  cmd  =  getOptions().getOption(value);	  Option    cmd    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
86	[BUG]  [BUGGY]  Option  cmd  =  getOptions().get(option);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  cmd  =  getOptions().get(option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Option  cmd  =  getOptions().get(option);	  Option    cmd    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
87	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  value.equals(value));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  value.equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " "  +  value.equals(value));	  Throwables.throw    new    RuntimeException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
88	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  value.toString());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  value.toString());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " "  +  value.toString());	  Throwables.throw    new    RuntimeException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
89	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Expected  value: "  +  value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Expected  value: "  +  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( "Expected  value: "  +  value);	  Throwables.throw    new    RuntimeException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
90	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals( " "))  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals( " "))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals( " "))  {  return;  }	  Property    value    =    properties.propertyNames().get(0).getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals( "prototype "))  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals( "prototype "))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals( "prototype "))  {  return;  }	  Property    value    =    properties.propertyNames().get(0).getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
92	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals(option))  {  return;  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals(option))  {  return;  }	  Property    value    =    properties.propertyNames().get(0).getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
93	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals( "property "))  {  return;  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals( "property "))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(0).getValue();  if(value.equals( "property "))  {  return;  }	  Property    value    =    properties.propertyNames().get(0).getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
94	[BUG]  [BUGGY]  For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
95	[BUG]  [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
96	[BUG]  [BUGGY]  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(!cmd.hasOption(value))  {	  if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
97	[BUG]  [BUGGY]  if(cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(cmd.hasOption(option))  {	  if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
98	[BUG]  [BUGGY]  if(value.hasOption(cmd))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(value.hasOption(cmd))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(value.hasOption(cmd))  {	  if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
99	[BUG]  [BUGGY]  if(properties.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties.hasOption(value))  {	  if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
100	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  null. ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
101	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  deprecated. ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  deprecated. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  deprecated. ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
102	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Properties  must  be  initialized. ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Properties  must  be  initialized. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Properties  must  be  initialized. ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
103	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  declared. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  declared. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  declared. ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
104	[BUG]  [BUGGY]  ||  properties!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties!=  null)  {  return;  }	  ||    properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
105	[BUG]  [BUGGY]  ||  properties  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
106	[BUG]  [BUGGY]  ||  properties  ==  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties  ==  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties  ==  null)  {  throw  new  RuntimeException( " ");  }	  ||    properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
107	[BUG]  [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
108	[BUG]  [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
109	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator().next();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyNames().iterator().next();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.propertyNames().iterator().next();	  Enumeration    <    String>    cmd    =    properties.properties().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
110	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties().keySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties().keySet().iterator().next();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.properties().keySet().iterator().next();	  Enumeration    <    String>    cmd    =    properties.properties().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
111	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties().iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties().iterator();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.properties().iterator();	  Enumeration    <    String>    cmd    =    properties.properties().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
112	[BUG]  [BUGGY]  List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values(),  properties.propertyNames());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values(),  properties.propertyNames());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values(),  properties.propertyNames());	  List    <    Option>    requiredOptions    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
113	[BUG]  [BUGGY]  new  AssertionFailedError( "Properties  cannot  be  null.   ",  value);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  AssertionFailedError( "Properties  cannot  be  null.   ",  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	new  AssertionFailedError( "Properties  cannot  be  null.   ",  value);	  new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
114	[BUG]  [BUGGY]  new  AssertionFailedError( "Properties  cannot  be  null.  Please  check  that  the  property  name. ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  AssertionFailedError( "Properties  cannot  be  null.  Please  check  that  the  property  name. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	new  AssertionFailedError( "Properties  cannot  be  null.  Please  check  that  the  property  name. ");	  new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
115	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalStateException( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalStateException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalStateException( "Properties  cannot  be  null. ");	  Throwable    cause    =    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
116	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalStateException( "Properties  cannot  be  deprecated. ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalStateException( "Properties  cannot  be  deprecated. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalStateException( "Properties  cannot  be  deprecated. ");	  Throwable    cause    =    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
117	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalStateException( "Properties  are  not  supported  by  default. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalStateException( "Properties  are  not  supported  by  default. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalStateException( "Properties  are  not  supported  by  default. ");	  Throwable    cause    =    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
118	[BUG]  [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.size());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.size());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  requiredOptions  =  new  ArrayList(properties.size());	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
119	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(propertyNames());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(propertyNames());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(propertyNames());	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
120	[BUG]  [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.values());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.values());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  requiredOptions  =  new  ArrayList(properties.values());	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
121	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.getProperty(value);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.getProperty(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.getProperty(value);	  [Delete]    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
122	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption	  if(opt    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
123	[BUG]  [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption!=  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption!=  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption!=	  if(opt    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
124	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  ==  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  ==  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  ==	  if(opt    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
125	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "'  for  value ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "'  for  value ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "'  for  value ");	  throw    new    RuntimeException(   "Expected    property    '   "    +    properties.get(0).toString()    +   "'    for    value   ");    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
126	[BUG]  [BUGGY]  throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + ",'  for  value ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + ",'  for  value ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + ",'  for  value ");	  throw    new    RuntimeException(   "Expected    property    '   "    +    properties.get(0).toString()    +   "'    for    value   ");    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
127	[BUG]  [BUGGY]  Iterator  <  Properties>  it  =  this.properties.propertyNames().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  Properties>  it  =  this.properties.propertyNames().iterator();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  Properties>  it  =  this.properties.propertyNames().iterator();	  Iterator    <    Properties>    it    =    properties.propertyNames().iterator();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
128	[BUG]  [BUGGY]  Iterator  <  Properties>  it  =  properties.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  Properties>  it  =  properties.keySet().iterator();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  Properties>  it  =  properties.keySet().iterator();	  Iterator    <    Properties>    it    =    properties.propertyNames().iterator();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
129	[BUG]  [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(value,  values);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(value,  values);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  new  AssertionFailedError(value,  values);	  AssertionFailedError    exp    =    new    AssertionFailedError(value);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
130	[BUG]  [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(cmd,  value);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(cmd,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  new  AssertionFailedError(cmd,  value);	  AssertionFailedError    exp    =    new    AssertionFailedError(value);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
131	[BUG]  [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(properties,  value);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(properties,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  new  AssertionFailedError(properties,  value);	  AssertionFailedError    exp    =    new    AssertionFailedError(value);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
132	[BUG]  [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(cmd);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(cmd);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  new  AssertionFailedError(cmd);	  AssertionFailedError    exp    =    new    AssertionFailedError(value);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
133	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  /  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  /  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(value  /  1);	  Enumeration    <    String>    cmd    =    properties.get(value    +    1);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
134	[BUG]  [BUGGY]  ||  properties.propertyNames()!=  null)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties.propertyNames()!=  null)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties.propertyNames()!=  null)  {  throw  new  IllegalArgumentException( " ");	  ||    properties.propertyNames()!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
135	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  value);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  value);	  Throwables.throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
136	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(String.valueOf( "Properties  cannot  be  null. "));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(String.valueOf( "Properties  cannot  be  null. "));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError(String.valueOf( "Properties  cannot  be  null. "));	  Throwables.throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
137	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(String.format( "Properties  cannot  be  null. ",  value));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(String.format( "Properties  cannot  be  null. ",  value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError(String.format( "Properties  cannot  be  null. ",  value));	  Throwables.throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
138	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(String.format( "Properties  cannot  be  null. ",  properties));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(String.format( "Properties  cannot  be  null. ",  properties));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError(String.format( "Properties  cannot  be  null. ",  properties));	  Throwables.throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
139	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.requiredOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  props.requiredOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  props.requiredOptions();	  Enumeration    <    String>    requiredOptions    =    properties.requiredOptions();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
140	[BUG]  [BUGGY]  List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.keySet());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.keySet());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.keySet());	  List    <    Option>    properties    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
141	[BUG]  [BUGGY]  List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.values(),  requiredOptions);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.values(),  requiredOptions);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.values(),  requiredOptions);	  List    <    Option>    properties    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
142	[BUG]  [BUGGY]  Set  <  Option>  properties  =  new  HashSet  <  Option>(properties.values());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Set  <  Option>  properties  =  new  HashSet  <  Option>(properties.values());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Set  <  Option>  properties  =  new  HashSet  <  Option>(properties.values());	  List    <    Option>    properties    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
143	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( "Properties  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
144	[BUG]  [BUGGY]  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  IllegalArgumentException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	new  IllegalArgumentException( "Properties  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
145	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingProperty(properties,  value);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingProperty(properties,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingProperty(properties,  value);	  aughtExceptionHandler.handleMissingProperty(properties);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
146	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingProperty(properties,  exp);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingProperty(properties,  exp);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingProperty(properties,  exp);	  aughtExceptionHandler.handleMissingProperty(properties);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
147	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(properties.propertyNames());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " ").equals(properties.propertyNames());	  Throwables.throw    new    IllegalStateException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
148	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  properties.propertyNames());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " "  +  properties.propertyNames());	  Throwables.throw    new    IllegalStateException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
149	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(properties.propertyNames()));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(properties.propertyNames()));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " ").equals(properties.propertyNames()));	  Throwables.throw    new    IllegalStateException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
150	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(e,  exp);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingException(e,  exp);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingException(e,  exp);	  aughtExceptionHandler.handleMissingException(e);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
151	[BUG]  [BUGGY]  aughtExceptionHandler.processProperties(cmd,  properties);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.processProperties(cmd,  properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.processProperties(cmd,  properties);	  aughtExceptionHandler.processProperties(properties,    cmd);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
152	[BUG]  [BUGGY]  aughtExceptionHandler.processProperties(cmd,  property);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.processProperties(cmd,  property);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.processProperties(cmd,  property);	  aughtExceptionHandler.processProperties(properties,    cmd);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
153	[BUG]  [BUGGY]  aughtExceptionHandler.processProperties(properties,  cmd,  exp);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.processProperties(properties,  cmd,  exp);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.processProperties(properties,  cmd,  exp);	  aughtExceptionHandler.processProperties(properties,    cmd);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
154	[BUG]  [BUGGY]  aughtExceptionHandler.processProperties(properties,  exp);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.processProperties(properties,  exp);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.processProperties(properties,  exp);	  aughtExceptionHandler.processProperties(properties,    cmd);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
155	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Failed  to  access  properties: "  +  properties.propertyNames());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Failed  to  access  properties: "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( "Failed  to  access  properties: "  +  properties.propertyNames());	  Throwables.throw    new    RuntimeException(   "   ")+   "    cannot    access    properties:   "    +    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
156	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  value.equals(value));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  value.equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " "  +  value.equals(value));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
157	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(value));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(value));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(value));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
158	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString());	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value.toString());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
159	[BUG]  [BUGGY]  Throwables.warning( "Missing  property  value: "  +  value.toString());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.warning( "Missing  property  value: "  +  value.toString());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.warning( "Missing  property  value: "  +  value.toString());	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value.toString());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
160	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value.getMessage());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value.getMessage());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Missing  property  value: "  +  value.getMessage());	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value.toString());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
161	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( "Properties  cannot  be  null. ");	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
162	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Failed  to  parse: ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Failed  to  parse: ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( "Failed  to  parse: ");	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
163	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Failed  to  parse: "  +  cmd);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Failed  to  parse: "  +  cmd);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( "Failed  to  parse: "  +  cmd);	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
164	[BUG]  [BUGGY]  Iterator  <  Properties>  it  =  properties.propertyIterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  Properties>  it  =  properties.propertyIterator();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  Properties>  it  =  properties.propertyIterator();	  Iterator    <    Properties>    it    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
165	[BUG]  [BUGGY]  Iterator  <  Properties>  it  =  this.properties.propertyNames();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  Properties>  it  =  this.properties.propertyNames();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  Properties>  it  =  this.properties.propertyNames();	  Iterator    <    Properties>    it    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
166	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value,  exp);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value,  exp);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleFailedError(e,  value,  exp);	  aughtExceptionHandler.handleFailedError(e,    value);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
167	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailedError(value,  e);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailedError(value,  e);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleFailedError(value,  e);	  aughtExceptionHandler.handleFailedError(e,    value);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
168	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value,  requiredOptions);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleFailedError(e,  value,  requiredOptions);	  aughtExceptionHandler.handleFailedError(e,    value);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
169	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingValue(value,  c);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingValue(value,  c);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingValue(value,  c);	  aughtExceptionHandler.handleMissingValue(c,    value);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
170	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingValue(c,  value,  exp);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingValue(c,  value,  exp);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingValue(c,  value,  exp);	  aughtExceptionHandler.handleMissingValue(c,    value);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
171	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingValue(c,  value,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingValue(c,  value,  requiredOptions);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingValue(c,  value,  requiredOptions);	  aughtExceptionHandler.handleMissingValue(c,    value);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
172	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingValue(c,  value,  values);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingValue(c,  value,  values);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingValue(c,  value,  values);	  aughtExceptionHandler.handleMissingValue(c,    value);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
173	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.getPropertyNames();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.getPropertyNames();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.getPropertyNames();	  Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
174	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyArguments();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyArguments();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.propertyArguments();	  Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
175	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(properties.propertyNames());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleOption(properties.propertyNames());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleOption(properties.propertyNames());	  aughtExceptionHandler.handleOption(propertyNames());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
176	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(propertyValues());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleOption(propertyValues());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleOption(propertyValues());	  aughtExceptionHandler.handleOption(propertyNames());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
177	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.getRequiredOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.getRequiredOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  properties.getRequiredOptions();	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
178	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions(value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions(value);	  Enumeration    <    String>    requiredOptions    =    properties.propertyRequiredOptions();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
179	[BUG]  [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value)    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
180	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyCmd();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.propertyCmd();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  cmd  =  properties.propertyCmd();	  Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
181	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyParameters();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.propertyParameters();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  cmd  =  properties.propertyParameters();	  Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
182	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyConfig();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.propertyConfig();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  cmd  =  properties.propertyConfig();	  Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
183	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  propertyNames.equals(propertyNames));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  propertyNames.equals(propertyNames));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " "  +  propertyNames.equals(propertyNames));	  Throwables.throw    new    IllegalStateException(   "   ".equals(propertyNames));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
184	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(propertyNames));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(propertyNames));  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " ").equals(propertyNames));	  Throwables.throw    new    IllegalStateException(   "   ".equals(propertyNames));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
185	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(propertyNames);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(propertyNames);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " ").equals(propertyNames);	  Throwables.throw    new    IllegalStateException(   "   ".equals(propertyNames));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
186	[BUG]  [BUGGY]  Iterator  <  String>  it  =  properties.propertyNames().iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  String>  it  =  properties.propertyNames().iterator();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  String>  it  =  properties.propertyNames().iterator();	  Iterator    <    String>    it    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
187	[BUG]  [BUGGY]  Iterator  <  String>  it  =  properties.propertyIterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  String>  it  =  properties.propertyIterator();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  String>  it  =  properties.propertyIterator();	  Iterator    <    String>    it    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
188	[BUG]  [BUGGY]  Iterator  <  String>  it  =  properties.values();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  String>  it  =  properties.values();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  String>  it  =  properties.values();	  Iterator    <    String>    it    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
189	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  exp);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  exp);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " "  +  exp);	  Throwables.throw    new    RuntimeException(   "   ",    exp);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
190	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ",  exp,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ",  exp,  requiredOptions);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " ",  exp,  requiredOptions);	  Throwables.throw    new    RuntimeException(   "   ",    exp);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
191	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ", "Expected  exp: "  +  exp);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ", "Expected  exp: "  +  exp);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " ", "Expected  exp: "  +  exp);	  Throwables.throw    new    RuntimeException(   "   ",    exp);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
192	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().getValue();  if(value.equals( " "))  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().getValue();  if(value.equals( " "))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().getValue();  if(value.equals( " "))  {  return;  }	  Property    value    =    properties.propertyNames().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
193	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().getValue();  if(value.equals( "prototype "))  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().getValue();  if(value.equals( "prototype "))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().getValue();  if(value.equals( "prototype "))  {  return;  }	  Property    value    =    properties.propertyNames().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
194	[BUG]  [BUGGY]  Property  value  =  properties.values().getValue();  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.values().getValue();  if(value.equals(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.values().getValue();  if(value.equals(value))  {  return;  }	  Property    value    =    properties.propertyNames().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
195	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().getValue();  if(value.equals( "property "))  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().getValue();  if(value.equals( "property "))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().getValue();  if(value.equals( "property "))  {  return;  }	  Property    value    =    properties.propertyNames().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
196	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
197	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.getPropertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.getPropertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.getPropertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
198	[BUG]  [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
199	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getOption(option,  value);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getOption(option,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getOption(option,  value);	  AssertionFailedError    exp    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
200	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getOption(value);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getOption(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getOption(value);	  AssertionFailedError    exp    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
201	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getOption(option,  values);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getOption(option,  values);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getOption(option,  values);	  AssertionFailedError    exp    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
202	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  IllegalArgumentException( " ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  IllegalArgumentException( " ");	  Throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
203	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Failed  to  add  properties: "  +  properties.propertyNames());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Failed  to  add  properties: "  +  properties.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  RuntimeException( "Failed  to  add  properties: "  +  properties.propertyNames());	  Throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
204	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Properties  cannot  be  deprecated. ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Properties  cannot  be  deprecated. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  RuntimeException( "Properties  cannot  be  deprecated. ");	  Throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
205	[BUG]  [BUGGY]  For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
206	[BUG]  [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
207	[BUG]  [BUGGY]  For(Enumeration  <  String,Object>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <  String,Object>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <  String,Object>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
208	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
209	[BUG]  [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
210	[BUG]  [BUGGY]  For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  <?>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
211	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Properties  cannot  be  null.   ",  value);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  return  new  AssertionFailedError( "Properties  cannot  be  null.   ",  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	return  new  AssertionFailedError( "Properties  cannot  be  null.   ",  value);	  return    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
212	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Properties  cannot  be  null.  Please  check  that  the  properties  can  not  be  null. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  return  new  AssertionFailedError( "Properties  cannot  be  null.  Please  check  that  the  properties  can  not  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	return  new  AssertionFailedError( "Properties  cannot  be  null.  Please  check  that  the  properties  can  not  be  null. ");	  return    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
213	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getExpr(option,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getExpr(option,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getExpr(option,  value);	  AssertionFailedError    exp    =    getOptions().getExpr(option);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
214	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getExpr(option,  values);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getExpr(option,  values);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getExpr(option,  values);	  AssertionFailedError    exp    =    getOptions().getExpr(option);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
215	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getExpr(value);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getExpr(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getExpr(value);	  AssertionFailedError    exp    =    getOptions().getExpr(option);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
216	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(key  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(key  -  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(key  -  1);	  Enumeration    <    String>    cmd    =    properties.get(value    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
217	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  -  1  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  -  1  +  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(value  -  1  +  1);	  Enumeration    <    String>    cmd    =    properties.get(value    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
218	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  -  2);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  -  2);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(value  -  2);	  Enumeration    <    String>    cmd    =    properties.get(value    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
219	[BUG]  [BUGGY]  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties  ==  null  ||  properties.size()  ==  0)  {  return;  }	  if(properties    ==    null    ||    values.size()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
220	[BUG]  [BUGGY]  if(values  ==  null  ||  properties.size()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(values  ==  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(values  ==  null  ||  properties.size()  ==  0)  {  return;  }	  if(properties    ==    null    ||    values.size()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
221	[BUG]  [BUGGY]  if(values  ==  null  ||  values.size()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(values  ==  null  ||  values.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(values  ==  null  ||  values.size()  ==  0)  {  return;  }	  if(properties    ==    null    ||    values.size()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
222	[BUG]  [BUGGY]  ||  properties.size()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties.size()  ==  0)  {  return;  }	  if(properties    ==    null    ||    values.size()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
223	[BUG]  [BUGGY]  Properties  value  =  properties.propertyNames().get(0).getValue();  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  value  =  properties.propertyNames().get(0).getValue();  if(value.equals(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  value  =  properties.propertyNames().get(0).getValue();  if(value.equals(value))  {  return;  }	  Property    value    =    properties.propertyNames().get(0).getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
224	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().get(0).getValue();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(0).getValue();	  Property    value    =    properties.propertyNames().get(0).getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
225	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
226	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
227	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.properties();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.properties();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.properties();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
228	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalStateException( "Failed  to  parse: ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalStateException( "Failed  to  parse: ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalStateException( "Failed  to  parse: ");	  Throwable    cause    =    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
229	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  property.propertyNames());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  property.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " "  +  property.propertyNames());	  Throwables.throw    new    IllegalStateException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
230	[BUG]  [BUGGY]  List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values()  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values()  +  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.values()  +  1);	  List    <    Option>    requiredOptions    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
231	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  option  =  getOptions().getOption(option)+  1;  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Option  option  =  getOptions().getOption(option)+  1;	  Option    option    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
232	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingProperty(value);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingProperty(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingProperty(value);	  aughtExceptionHandler.handleMissingProperty(properties);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
233	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().getValue();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().getValue();	  Property    value    =    properties.propertyNames().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
234	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().getValue();  if(value.equals(option))  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().getValue();  if(value.equals(option))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().getValue();  if(value.equals(option))  {  return;  }	  Property    value    =    properties.propertyNames().getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
235	[BUG]  [BUGGY]  List  <  Option>  properties  =  new  LinkedList  <  Option>(properties.values());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  <  Option>  properties  =  new  LinkedList  <  Option>(properties.values());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  properties  =  new  LinkedList  <  Option>(properties.values());	  List    <    Option>    properties    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
236	[BUG]  [BUGGY]  List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.values()  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.values()  +  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  properties  =  new  ArrayList  <  Option>(properties.values()  +  1);	  List    <    Option>    properties    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
237	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
238	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
239	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
240	[BUG]  [BUGGY]  Properties  cmd  =  properties.values();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.values();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  cmd  =  properties.values();	  Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
241	[BUG]  [BUGGY]  Properties  cmd  =  properties.getPropertyNames();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getPropertyNames();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  cmd  =  properties.getPropertyNames();	  Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
242	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyChanges();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.propertyChanges();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  cmd  =  properties.propertyChanges();	  Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
243	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Thread.currentThread().interrupt();	  Throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
244	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Failed  to  parse: ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Failed  to  parse: ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  RuntimeException( "Failed  to  parse: ");	  Throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
245	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Failed  to  add  properties: ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Failed  to  add  properties: ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  RuntimeException( "Failed  to  add  properties: ");	  Throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
246	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  value);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " "  +  value);	  Throwables.throw    new    RuntimeException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
247	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " "  +  value);	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
248	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	  Enumeration    <    String>    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
249	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.getOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.getOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.getOptions();	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
250	[BUG]  [BUGGY]  new  AssertionFailedError( "Missing  property  value: "  +  value.toString());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  AssertionFailedError( "Missing  property  value: "  +  value.toString());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	new  AssertionFailedError( "Missing  property  value: "  +  value.toString());	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value.toString());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
251	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	  if(opt    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
252	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	  if(opt    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
253	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOpti	  if(opt    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
254	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedException( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedException( "Properties  cannot  be  null. ");	  Throwables.throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
255	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Properties  cannot  be  null. ",  value);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Properties  cannot  be  null. ",  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError( "Properties  cannot  be  null. ",  value);	  Throwables.throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
256	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(e,  value);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingException(e,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingException(e,  value);	  aughtExceptionHandler.handleMissingException(e);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
257	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(e,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingException(e,  requiredOptions);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingException(e,  requiredOptions);	  aughtExceptionHandler.handleMissingException(e);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
258	[BUG]  [BUGGY]  ArrayList  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.keySet());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ArrayList  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.keySet());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	ArrayList  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.keySet());	  ArrayList    <    Option>    requiredOptions    =    new    ArrayList    <    Option>(properties.values());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
259	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.values();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.values();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.values();	  Enumeration    <    String>    c    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
260	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(properties());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleOption(properties());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleOption(properties());	  aughtExceptionHandler.handleOption(propertyNames());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
261	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(value);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleOption(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleOption(value);	  aughtExceptionHandler.handleOption(propertyNames());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
262	[BUG]  [BUGGY]  aughtExceptionHandler.handleOption(properties);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleOption(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleOption(properties);	  aughtExceptionHandler.handleOption(propertyNames());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
263	[BUG]  [BUGGY]  Iterator  <  Properties>  it  =  properties.values();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  Properties>  it  =  properties.values();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  Properties>  it  =  properties.values();	  Iterator    <    Properties>    it    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
264	[BUG]  [BUGGY]  Iterator  <  Properties>  it  =  properties.properties();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  Properties>  it  =  properties.properties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  Properties>  it  =  properties.properties();	  Iterator    <    Properties>    it    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
265	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExp(value);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExp(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getOptionExp(value);	  AssertionFailedError    exp    =    getOptions().getOptionExp(option);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
266	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  propertyNames);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  propertyNames);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " "  +  propertyNames);	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(propertyNames));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
267	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(propertyNames);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(propertyNames);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(propertyNames);	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(propertyNames));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
268	[BUG]  [BUGGY]  Properties  properties  =  options.propertyNames();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  options.propertyNames();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  properties  =  options.propertyNames();	  Properties    properties    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
269	[BUG]  [BUGGY]  Properties  properties  =  getProperties();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  getProperties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  properties  =  getProperties();	  Properties    properties    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
270	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingValue(properties,  value);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingValue(properties,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingValue(properties,  value);	  aughtExceptionHandler.handleMissingValue(c,    value);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
271	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
272	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
273	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.properties();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.properties();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.properties();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
274	[BUG]  [BUGGY]  if(properties!=  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties!=  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }	  if(properties    ==    null    ||    properties.propertyNames().size()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
275	[BUG]  [BUGGY]  if(propertyNames  ==  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(propertyNames  ==  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(propertyNames  ==  null  ||  properties.propertyNames().size()  ==  0)  {  return;  }	  if(properties    ==    null    ||    properties.propertyNames().size()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
276	[BUG]  [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(value,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(value,  requiredOptions);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  new  AssertionFailedError(value,  requiredOptions);	  AssertionFailedError    exp    =    new    AssertionFailedError(value);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
277	[BUG]  [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(value,  value);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(value,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  new  AssertionFailedError(value,  value);	  AssertionFailedError    exp    =    new    AssertionFailedError(value);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
278	[BUG]  [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(properties);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  new  AssertionFailedError(properties);	  AssertionFailedError    exp    =    new    AssertionFailedError(value);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
279	[BUG]  [BUGGY]  ||  properties.propertyNames()!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties.propertyNames()!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties.propertyNames()!=  null)  {  throw  new  RuntimeException( " ");  }	  ||    properties.propertyNames()    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
280	[BUG]  [BUGGY]  ||  properties.propertyNames()!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties.propertyNames()!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties.propertyNames()!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    properties.propertyNames()    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
281	[BUG]  [BUGGY]  ||  properties.values()!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties.values()!=  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties.values()!=  null)  {  return;  }	  ||    properties.propertyNames()!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
282	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
283	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
284	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.opts();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.opts();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.opts();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value)	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
285	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.getOptions();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.getOptions();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.getOptions();	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
286	[BUG]  [BUGGY]  if(opt!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt!=  null)  {	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
287	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  *  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value  *  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(value  *  1);	  Enumeration    <    String>    cmd    =    properties.get(value    +    1);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
288	[BUG]  [BUGGY]  if(propertyNames  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(propertyNames  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(propertyNames  ==  null)  {  return;  }	  if(properties!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
289	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
290	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    return;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
291	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  propertyNames);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  propertyNames);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " "  +  propertyNames);	  Throwables.throw    new    IllegalStateException(   "   ".equals(propertyNames));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
292	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(cmd.nextElement().getValue());  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().get(cmd.nextElement().getValue());  if(value.equals(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(cmd.nextElement().getValue());  if(value.equals(value))  {  return;  }	  Property    value    =    properties.propertyNames().get(c.nextElement().getValue());    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
293	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties().get(value);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties().get(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.properties().get(value);	  Enumeration    <    String>    cmd    =    properties.keySet().get(value);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
294	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreElements(value);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMoreElements(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMoreElements(value);	  aughtExceptionHandler.handleMoreElements(e);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
295	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Option  opt  =  getOptions().getOption(option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Option  opt  =  getOptions().getOption(option);	  if(opt    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value)    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
296	[BUG]  [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  requiredOptions);	  Throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
297	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  expectedOptions);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  expectedOptions);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  expectedOptions);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
298	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getExpr(option  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getExpr(option  +  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getExpr(option  +  1);	  AssertionFailedError    exp    =    getOptions().getExpr(option);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
299	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " "  +  value);	  Throwables.throw    new    IllegalStateException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
300	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.getValue().toString();	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.getValue().toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
301	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value,  requiredOptions);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingName(e,  value,  requiredOptions);	  aughtExceptionHandler.handleMissingName(e,    value);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
302	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value,  expectedOptions);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value,  expectedOptions);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingName(e,  value,  expectedOptions);	  aughtExceptionHandler.handleMissingName(e,    value);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
303	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  getMessage());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  getMessage());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " "  +  getMessage());	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
304	[BUG]  [BUGGY]  if(cmd.hasOption(value)||!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(cmd.hasOption(value)||!cmd.hasOption(option))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(cmd.hasOption(value)||!cmd.hasOption(option))  {	  if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
305	[BUG]  [BUGGY]  aughtExceptionHandler.processProperties(properties,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.processProperties(properties,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.processProperties(properties,  value);	  aughtExceptionHandler.processProperties(properties,    cmd);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
306	[BUG]  [BUGGY]  aughtExceptionHandler.processProperties(properties,  properties);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.processProperties(properties,  properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.processProperties(properties,  properties);	  aughtExceptionHandler.processProperties(properties,    cmd);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
307	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
308	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
309	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  e);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  e);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  e);	  Throwables.throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
310	[BUG]  [BUGGY]  ||  properties!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  ||  properties!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	||  properties!=  null)  {  throw  new  RuntimeException( " ");  }	  ||    properties    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
311	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "'  for  value ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "'  for  value ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "'  for  value ");	  throw    new    RuntimeException(   "Expected    property    '   "    +    properties.get(0).toString()    +   "'    for    value   ");    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
312	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd	  if(opt    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
313	[BUG]  [BUGGY]  Iterator  <  String>  it  =  properties.keySet().propertyNames();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  String>  it  =  properties.keySet().propertyNames();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  String>  it  =  properties.keySet().propertyNames();	  Iterator    <    String>    it    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
314	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExpr(option);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExpr(option);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getOptionExpr(option);	  AssertionFailedError    exp    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
315	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  instantiated. ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  instantiated. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Properties  cannot  be  instantiated. ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
316	[BUG]  [BUGGY]  Iterator  <  Properties>  it  =  properties.values().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Iterator  <  Properties>  it  =  properties.values().iterator();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Iterator  <  Properties>  it  =  properties.values().iterator();	  Iterator    <    Properties>    it    =    properties.propertyNames().iterator();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
317	[BUG]  [BUGGY]  if(properties!=  null  ||  properties.size()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null  ||  properties.size()  ==  0)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties!=  null  ||  properties.size()  ==  0)  {  return;  }	  if(properties    ==    null    ||    values.size()    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
318	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.values();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
319	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.keySet();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
320	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.options();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.options();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.options();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
321	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value,  expectedOptions);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value,  expectedOptions);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleFailedError(e,  value,  expectedOptions);	  aughtExceptionHandler.handleFailedError(e,    value);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
322	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value,  property);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value,  property);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleFailedError(e,  value,  property);	  aughtExceptionHandler.handleFailedError(e,    value);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
323	[BUG]  [BUGGY]  if(properties!=  null  ||  properties.propertyNames  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null  ||  properties.propertyNames  ==  null)  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties!=  null  ||  properties.propertyNames  ==  null)  {  return;  }	  if(properties!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
324	[BUG]  [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value,  properties);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleFailedError(e,  value,  properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleFailedError(e,  value,  properties);	  aughtExceptionHandler.handleFailedError(e,    value);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
325	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString(),  value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString(),  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Missing  property  value: "  +  value.toString(),  value);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value.toString());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
326	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  expected);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  expected);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  expected);	  Throwables.throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
327	[BUG]  [BUGGY]  if(cmd.hasOption!=  illegal  start  of  type)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(cmd.hasOption!=  illegal  start  of  type)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(cmd.hasOption!=  illegal  start  of  type)  {	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
328	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties.keySet();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties.keySet();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.properties.keySet();	  Enumeration    <    String>    cmd    =    properties.keySet();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
329	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp,  requiredOptions);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp,  requiredOptions);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  exp,  requiredOptions);	  throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value,    exp);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
330	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.getValue().toString();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.getValue().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.getValue().toString();	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.getValue().toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
331	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperties();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  cmd  =  properties.getProperties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  cmd  =  properties.getProperties();	  Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
332	[BUG]  [BUGGY]  new  AssertionFailedError(value, "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  new  AssertionFailedError(value, "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	new  AssertionFailedError(value, "Properties  cannot  be  null. ");	  new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
333	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingException( " ");  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingException( " ");  }	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
334	[BUG]  [BUGGY]  List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.valueSet());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.valueSet());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	List  <  Option>  requiredOptions  =  new  ArrayList  <  Option>(properties.valueSet());	  List    <    Option>    requiredOptions    =    new    ArrayList    <    Option>(properties.keySet());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
335	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  this.properties.requires();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  requiredOptions  =  this.properties.requires();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  requiredOptions  =  this.properties.requires();	  Enumeration    <    String>    requiredOptions    =    properties.requires();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
336	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(opt!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value	  if(opt    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value)    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
337	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(value, "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(value, "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError(value, "Properties  cannot  be  null. ");	  Throwables.throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
338	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(e, "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(e, "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  AssertionFailedError(e, "Properties  cannot  be  null. ");	  Throwables.throw    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
339	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " ")	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
340	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  property.propertyNames());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  property.propertyNames());  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " "  +  property.propertyNames());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(properties.propertyNames()));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
341	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(properties,  value);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(properties,  value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingName(properties,  value);	  aughtExceptionHandler.handleMissingName(c,    value);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
342	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet().iterator().next();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.keySet().iterator().next();	  Enumeration    <    String>    cmd    =    properties.properties().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
343	[BUG]  [BUGGY]  Enumeration  <  String>  c  =  properties.properties();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  c  =  properties.properties();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  c  =  properties.properties();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();	  Enumeration    <    String>    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
344	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " ").equals(value);	  Throwables.throw    new    IllegalStateException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
345	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties.keySet().get(value);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties.keySet().get(value);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.properties.keySet().get(value);	  Enumeration    <    String>    cmd    =    properties.keySet().get(value);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
346	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Failed  to  parse: ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Failed  to  parse: ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Failed  to  parse: ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
347	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet().get(propertyName);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet().get(propertyName);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.keySet().get(propertyName);	  Enumeration    <    String>    cmd    =    properties.get(propertyName);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
348	[BUG]  [BUGGY]  if(cmd!=  null)  {  aughtExceptionHandler.processProperties(properties,  cmd);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(cmd!=  null)  {  aughtExceptionHandler.processProperties(properties,  cmd);  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(cmd!=  null)  {  aughtExceptionHandler.processProperties(properties,  cmd);  }	  aughtExceptionHandler.processProperties(properties,    cmd);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
349	[BUG]  [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	For(Enumeration  c  =  properties.propertyNames();  c.hasNext();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {	  For(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
350	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingValue(c,  value,  properties);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingValue(c,  value,  properties);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingValue(c,  value,  properties);	  aughtExceptionHandler.handleMissingValue(c,    value);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
351	[BUG]  [BUGGY]  return  new  AssertionFailedError(value, "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  return  new  AssertionFailedError(value, "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	return  new  AssertionFailedError(value, "Properties  cannot  be  null. ");	  return    new    AssertionFailedError(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
352	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalStateException( "Properties  must  be  initialized. ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwable  cause  =  new  IllegalStateException( "Properties  must  be  initialized. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwable  cause  =  new  IllegalStateException( "Properties  must  be  initialized. ");	  Throwable    cause    =    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
353	[BUG]  [BUGGY]  Properties  properties  =  this.properties.values();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Properties  properties  =  this.properties.values();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Properties  properties  =  this.properties.values();	  Properties    properties    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
354	[BUG]  [BUGGY]  if(properties!=  null)  {  aughtExceptionHandler.handleMissingProperty(properties);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(properties!=  null)  {  aughtExceptionHandler.handleMissingProperty(properties);  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(properties!=  null)  {  aughtExceptionHandler.handleMissingProperty(properties);  }	  aughtExceptionHandler.handleMissingProperty(properties);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
355	[BUG]  [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(options!=  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd	  if(options    ==    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
356	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value,  property);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(e,  value,  property);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	aughtExceptionHandler.handleMissingName(e,  value,  property);	  aughtExceptionHandler.handleMissingName(e,    value);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
357	[BUG]  [BUGGY]  if(cmd  ==  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(cmd  ==  null)  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(cmd  ==  null)  {	  if(properties!=    null)    {    for(Enumeration    c    =    properties.propertyNames();    c.hasMoreElements();)    {    String    value    =    c.nextElement().toString();    if(!cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
358	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  throw  new  IllegalStateException( "Properties  cannot  be  null. ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  IllegalStateException( "Properties  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "Properties    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
359	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "': ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "': ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  RuntimeException( "Expected  property  ' "  +  properties.get(0).toString()  + "': ");	  Throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
360	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(value);	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(value));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
361	[BUG]  [BUGGY]  if(e.hasMoreElements())  {  aughtExceptionHandler.handleMissingException(e);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(e.hasMoreElements())  {  aughtExceptionHandler.handleMissingException(e);  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(e.hasMoreElements())  {  aughtExceptionHandler.handleMissingException(e);  }	  aughtExceptionHandler.handleMissingException(e);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
362	[BUG]  [BUGGY]  e.printStackTrace();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  e.printStackTrace();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	e.printStackTrace();	  aughtExceptionHandler.handleMissingException(e);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
363	[BUG]  [BUGGY]  if(value.equals(cmd))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(value.equals(cmd))  {  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(value.equals(cmd))  {	  if(cmd.hasOption(value))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
364	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties.get(key);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties.get(key);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.properties.get(key);	  Enumeration    <    String>    cmd    =    properties.get(key);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
365	[BUG]  [BUGGY]  Property  value  =  properties.propertyNames().get(0).getKey();  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Property  value  =  properties.propertyNames().get(0).getKey();  if(value.equals(value))  {  return;  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Property  value  =  properties.propertyNames().get(0).getKey();  if(value.equals(value))  {  return;  }	  Property    value    =    properties.propertyNames().get(0).getValue();    if(value.equals(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
366	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(0).properties();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(0).properties();  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Enumeration  <  String>  cmd  =  properties.get(0).properties();	  Enumeration    <    String>    cmd    =    properties.get(0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
367	[BUG]  [BUGGY]  if(e.hasMoreElements())  {  aughtExceptionHandler.handleMoreElements(e);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(e.hasMoreElements())  {  aughtExceptionHandler.handleMoreElements(e);  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(e.hasMoreElements())  {  aughtExceptionHandler.handleMoreElements(e);  }	  aughtExceptionHandler.handleMoreElements(e);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
368	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  IllegalStateException( " ")	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
369	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Expected  property  ' ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( "Expected  property  ' ");  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( "Expected  property  ' ");	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
370	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ")  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ")  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " ")	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
371	[BUG]  [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(value,  value.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  new  AssertionFailedError(value,  value.toString());  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  new  AssertionFailedError(value,  value.toString());	  AssertionFailedError    exp    =    new    AssertionFailedError(value);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
372	[BUG]  [BUGGY]  if(!aughtExceptionHandler.handleOption(propertyNames()))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(!aughtExceptionHandler.handleOption(propertyNames()))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(!aughtExceptionHandler.handleOption(propertyNames()))  {  throw  new  RuntimeException( " ");  }	  aughtExceptionHandler.handleOption(propertyNames());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
373	[BUG]  [BUGGY]  if(!aughtExceptionHandler.handleOption(propertyNames()))  {  aughtExceptionHandler.handleOption(propertyNames());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  if(!aughtExceptionHandler.handleOption(propertyNames()))  {  aughtExceptionHandler.handleOption(propertyNames());  }  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	if(!aughtExceptionHandler.handleOption(propertyNames()))  {  aughtExceptionHandler.handleOption(propertyNames());  }	  aughtExceptionHandler.handleOption(propertyNames());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
374	[BUG]  [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExp(option  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  AssertionFailedError  exp  =  getOptions().getOptionExp(option  +  1);  [BUGGY]      return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	AssertionFailedError  exp  =  getOptions().getOptionExp(option  +  1);	  AssertionFailedError    exp    =    getOptions().getOptionExp(option);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
375	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ")  + ",  cannot  access  properties: "  +  properties.propertyNames();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throwables.throw  new  RuntimeException( " ")  + ",  cannot  access  properties: "  +  properties.propertyNames();  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throwables.throw  new  RuntimeException( " ")  + ",  cannot  access  properties: "  +  properties.propertyNames();	  Throwables.throw    new    RuntimeException(   "   ")+   "    cannot    access    properties:   "    +    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
376	[BUG]  [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  value);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  if  (properties  ==  null)  {      [BUGGY]  Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  value);  [BUGGY]      }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	Throw  new  AssertionFailedError( "Missing  property  value: "  +  value,  value);	  Throw    new    AssertionFailedError(   "Missing    property    value:   "    +    value);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
