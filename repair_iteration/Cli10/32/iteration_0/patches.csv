bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {		non-compiled	[CE]  illegal  start  of  type	65	None	add
2	[BUG]  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  if(!cmd.hasOption(value))  {  return;  }		non-compiled	[CE]  illegal  start  of  type	65	None	add
3	[BUG]  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  cmd  :  properties.propertyNames())  {  if(cmd.hasOption(option))  {  return;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  cmd  :  properties.propertyNames())  {  if(cmd.hasOption(option))  {  return;  }  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    if(properties  ==  null)  {  for(Enumeration  cmd  :  properties.propertyNames())  {  if(cmd.hasOption(option))  {  return;  }		non-compiled	[CE]  illegal  start  of  type	65	None	add
4	[BUG]  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  String  value  =  c.nextElement().toString();		non-compiled	[CE]  illegal  start  of  type	65	None	add
5	[BUG]  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  value  =  c.nextElement().getValue();  if(value.equals(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  value  =  c.nextElement().getValue();  if(value.equals(value))  {  return;  }  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    if(properties  ==  null)  {  for(Enumeration  c  =  properties.propertyNames();  c.hasMoreElements();)  {  Property  value  =  c.nextElement().getValue();  if(value.equals(value))  {  return;  }		non-compiled	[CE]  illegal  start  of  type	65	None	add
6	[BUG]  [BUGGY]  throw  new  RuntimeException( " ");  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  RuntimeException( " ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  RuntimeException( " ");	return;  	non-compiled	[CE]  illegal  start  of  type	64	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  IllegalArgumentException( " ");	return;  	non-compiled	[CE]  illegal  start  of  type	64	None	replace
8	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  IllegalStateException( " ");	return;  	non-compiled	[CE]  illegal  start  of  type	64	None	replace
9	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Properties  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  AssertionFailedError( "Properties  cannot  be  null. ");  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Properties  cannot  be  null. ");	return;  	non-compiled	[CE]  illegal  start  of  type	64	None	replace
10	[BUG]  [BUGGY]  throw  new  RuntimeException( " ")  + "  cannot  access  properties: "  +  properties.propertyNames();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  RuntimeException( " ")  + "  cannot  access  properties: "  +  properties.propertyNames();  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  RuntimeException( " ")  + "  cannot  access  properties: "  +  properties.propertyNames();	return;  	non-compiled	[CE]  illegal  start  of  type	64	None	replace
11	[BUG]  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.properties();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.properties();  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    Enumeration  <  String>  requiredOptions  =  properties.properties();		non-compiled	[CE]  illegal  start  of  type	65	None	add
12	[BUG]  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.values();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.values();  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    Enumeration  <  String>  requiredOptions  =  properties.values();		non-compiled	[CE]  illegal  start  of  type	65	None	add
13	[BUG]  [BUGGY]    Enumeration  <  String>  cmd  =  properties.properties();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Enumeration  <  String>  cmd  =  properties.properties();  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    Enumeration  <  String>  cmd  =  properties.properties();		non-compiled	[CE]  illegal  start  of  type	65	None	add
14	[BUG]  [BUGGY]    Enumeration  <  String>  cmd  =  properties.get(value);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Enumeration  <  String>  cmd  =  properties.get(value);  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    Enumeration  <  String>  cmd  =  properties.get(value);		non-compiled	[CE]  illegal  start  of  type	65	None	add
15	[BUG]  [BUGGY]    if(properties  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    if(properties  ==  null)  {  return;  }  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    if(properties  ==  null)  {  return;  }		non-compiled	[CE]  illegal  start  of  type	65	None	add
16	[BUG]  [BUGGY]    List  requiredOptions  =  new  ArrayList  <  Option>(properties.values());  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    List  requiredOptions  =  new  ArrayList  <  Option>(properties.values());  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    List  requiredOptions  =  new  ArrayList  <  Option>(properties.values());		non-compiled	[CE]  illegal  start  of  type	65	None	add
17	[BUG]  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.propertyNames();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]    Enumeration  <  String>  requiredOptions  =  properties.propertyNames();  [BUGGY]  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	    Enumeration  <  String>  requiredOptions  =  properties.propertyNames();		non-compiled	[CE]  illegal  start  of  type	65	None	add
18	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  {  if  (properties  ==  null)  {  [BUGGY]  throw  new  AssertionFailedError( "Missing  property  value: "  +  value);  [BUGGY]  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli10/src/java/org/apache/commons/cli/Parser.java	0.4472135954999579	253	253	1	replace	throw  new  AssertionFailedError( "Missing  property  value: "  +  value);	return;  	non-compiled	[CE]  illegal  start  of  type	64	None	replace
