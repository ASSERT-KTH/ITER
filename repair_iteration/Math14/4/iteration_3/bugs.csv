bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RealMatrix  <  Weight>  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  weightMatrixSqrt,  covarianceSingularityThreshold);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  RealMatrix  <  Weight>  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  weightMatrixSqrt,  covarianceSingularityThreshold);  [BUGGY]      for  (OptimizationData  data  :  optData)  {  if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	RealMatrix  <  Weight>  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  weightMatrixSqrt,  covarianceSingularityThreshold);	  RealMatrix    <    Weight>    weightMatrixSqrt    =    squareRoot(((Weight)optData).getWeight(),    weightMatrixSqrt);    	non-compiled	[CE]  '.class'  expected	3	None	replace
2	[BUG]  [BUGGY]  RealMatrix  <  Weight>  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  cost);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  RealMatrix  <  Weight>  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  cost);  [BUGGY]      for  (OptimizationData  data  :  optData)  {  if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	RealMatrix  <  Weight>  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  cost);	  RealMatrix    <    Weight>    weightMatrixSqrt    =    squareRoot(((Weight)optData).getWeight(),    covarianceSingularityThreshold);    	non-compiled	[CE]  '.class'  expected	10	None	replace
3	[BUG]  [BUGGY]  RealMatrix  <  Weight>  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  threshold);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  RealMatrix  <  Weight>  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  threshold);  [BUGGY]      for  (OptimizationData  data  :  optData)  {  if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	RealMatrix  <  Weight>  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  threshold);	  RealMatrix    <    Weight>    weightMatrixSqrt    =    squareRoot(((Weight)optData).getWeight(),    covarianceSingularityThreshold);    	non-compiled	[CE]  '.class'  expected	10	None	replace
4	[BUG]  [BUGGY]  Weight  weightMatrixSqrt  =  Math.min(weightMatrixSqrt,  optData.length  -  1));  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  Weight  weightMatrixSqrt  =  Math.min(weightMatrixSqrt,  optData.length  -  1));  [BUGGY]      for  (OptimizationData  data  :  optData)  {  if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	Weight  weightMatrixSqrt  =  Math.min(weightMatrixSqrt,  optData.length  -  1));	  Weight    weightMatrixSqrt    =    Math.max(weightMatrixSqrt,    optData.length    -    1));    	non-compiled	[CE]  '.class'  expected	2	None	replace
5	[BUG]  [BUGGY]  Weight  weightMatrixSqrt  =  Math.min(weightMatrixSqrt,  optData.length  -  2);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  Weight  weightMatrixSqrt  =  Math.min(weightMatrixSqrt,  optData.length  -  2);  [BUGGY]      for  (OptimizationData  data  :  optData)  {  if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	Weight  weightMatrixSqrt  =  Math.min(weightMatrixSqrt,  optData.length  -  2);	  Weight    weightMatrixSqrt    =    Math.min(weightMatrixSqrt,    optData.length    -    1);    	non-compiled	[CE]  '.class'  expected	6	None	replace
6	[BUG]  [BUGGY]  RealMatrix  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  cost);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  RealMatrix  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  cost);  [BUGGY]      for  (OptimizationData  data  :  optData)  {  if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	RealMatrix  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  cost);	  RealMatrix    weightMatrixSqrt    =    squareRoot(((Weight)optData).getWeight(),    covarianceSingularityThreshold);    	non-compiled	[CE]  '.class'  expected	12	None	replace
7	[BUG]  [BUGGY]  RealMatrix  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  threshold);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  RealMatrix  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  threshold);  [BUGGY]      for  (OptimizationData  data  :  optData)  {  if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	RealMatrix  weightMatrixSqrt  =  squareRoot(((Weight)optData).getWeight(),  threshold);	  RealMatrix    weightMatrixSqrt    =    squareRoot(((Weight)optData).getWeight(),    covarianceSingularityThreshold);    	non-compiled	[CE]  '.class'  expected	12	None	replace
8	[BUG]  [BUGGY]  RealMatrix  weightMatrixSqrt  =  squareRoot(((RealMatrix)optData).getWeight(),  cost);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  RealMatrix  weightMatrixSqrt  =  squareRoot(((RealMatrix)optData).getWeight(),  cost);  [BUGGY]      for  (OptimizationData  data  :  optData)  {  if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	RealMatrix  weightMatrixSqrt  =  squareRoot(((RealMatrix)optData).getWeight(),  cost);	  RealMatrix    weightMatrixSqrt    =    squareRoot(((RealMatrix)optData).getWeight(),    covarianceSingularityThreshold);    	non-compiled	[CE]  '.class'  expected	8	None	replace
9	[BUG]  [BUGGY]  RealMatrix  weightMatrixSqrt  =  squareRoot(((RealMatrix)optData).getWeight(),  threshold);  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  RealMatrix  weightMatrixSqrt  =  squareRoot(((RealMatrix)optData).getWeight(),  threshold);  [BUGGY]      for  (OptimizationData  data  :  optData)  {  if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	RealMatrix  weightMatrixSqrt  =  squareRoot(((RealMatrix)optData).getWeight(),  threshold);	  RealMatrix    weightMatrixSqrt    =    squareRoot(((RealMatrix)optData).getWeight(),    covarianceSingularityThreshold);    	non-compiled	[CE]  '.class'  expected	8	None	replace
10	[BUG]  [BUGGY]  for(OptimizationData  data  :  optData.getOptimizationData(),  weightMatrixSqrt)  {  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  for(OptimizationData  data  :  optData.getOptimizationData(),  weightMatrixSqrt)  {  [BUGGY]      if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	for(OptimizationData  data  :  optData.getOptimizationData(),  weightMatrixSqrt)  {	  for(OptimizationData    data    :    optData.getOptimizationData())    {    	non-compiled	[CE]  '.class'  expected	7	None	replace
11	[BUG]  [BUGGY]  for(OptimizationData  data  :  optData.cloneOptimizationData())  {  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  for(OptimizationData  data  :  optData.cloneOptimizationData())  {  [BUGGY]      if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	for(OptimizationData  data  :  optData.cloneOptimizationData())  {	  for(OptimizationData    data    :    optData.getOptimizationData())    {    	non-compiled	[CE]  '.class'  expected	7	None	replace
12	[BUG]  [BUGGY]  RealMatrix  weightMatrixSqrt  =  squareRoot(((Weight)data).getWeight(),  covarianceSingularityThreshold);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  RealMatrix  weightMatrixSqrt  =  squareRoot(((Weight)data).getWeight(),  covarianceSingularityThreshold);  [BUGGY]      for  (OptimizationData  data  :  optData)  {  if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	RealMatrix  weightMatrixSqrt  =  squareRoot(((Weight)data).getWeight(),  covarianceSingularityThreshold);	  RealMatrix    weightMatrixSqrt    =    squareRoot(((Weight)data).getWeight());    	non-compiled	[CE]  '.class'  expected	5	None	replace
13	[BUG]  [BUGGY]  for(OptimizationData  data  :  this.optData.getOptimizationData())  {  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      private  void  parseOptimizationData(OptimizationData...  optData)  {        [BUGGY]  for(OptimizationData  data  :  this.optData.getOptimizationData())  {  [BUGGY]      if  (data  instanceof  Weight)  {  weightMatrixSqrt  =  squareRoot(((Weight)  data).getWeight());    break;  }  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  parseOptimizationData  [RETURN_TYPE]  void  optData  [VARIABLES]  OptimizationData[]  optData  OptimizationData  data  boolean  RealMatrix  j  jTj  weightMatrixSqrt  double  cost  covarianceSingularityThreshold  threshold  	projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java	0.3333333333333333	250	250	1	replace	for(OptimizationData  data  :  this.optData.getOptimizationData())  {	  for(OptimizationData    data    :    optData.getOptimizationData())    {    	non-compiled	[CE]  '.class'  expected	7	None	replace
