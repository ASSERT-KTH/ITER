projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251if(datainstanceofWeight){
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251if(datainstanceofWeight||datainstanceofWeight){
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightweightMatrixSqrt=data.getWeight();
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightweightMatrixSqrt=data.getHeight();
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightweightMatrixSqrt=getWeightMatrix();
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightMatrixweightMatrixSqrt=squareRoot(((Weight)data).getWeight());
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightweightMatrixSqrt=squareRoot(((Weight)data).getWeight());
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251RealMatrixweightMatrixSqrt=squareRoot(((Weight)data).getWeight());
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251weightMatrixSqrt=squareRoot(((Weight)data).getWeight());
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightweightMatrixSqrt=squareRoot(((Weight)data).getWeight(),covarianceSingularityThreshold);
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightweightMatrixSqrt=getWeightMatrix(data);
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251if(optDatainstanceofWeight||datainstanceofWeight){
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251weightMatrixSqrt=squareRoot(((Weight)data).getWeight(),covarianceSingularityThreshold);
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightweightMatrixSqrt=data.getWeight()+1;
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightMatrixweightMatrixSqrt=squareRoot(((Weight)data).getWeight()+1);
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightMatrixSqrt=squareRoot(((Weight)data).getWeight());break;
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightMatrixSqrt=squareRoot(((Weight)data).getWeight());
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251RealMatrixweightMatrixSqrt=squareRoot(((Weight)data).getWeight(),covarianceSingularityThreshold);
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightMatrixweightMatrixSqrt=squareRoot(((Weight)data).getWeight(),covarianceSingularityThreshold);
projects/Math14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java251WeightweightMatrixSqrt=data.getWidth();
