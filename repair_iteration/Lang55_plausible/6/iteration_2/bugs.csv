bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_SUSPENDED;	      if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
2	[BUG]  [BUGGY]  this.runningState  =  STATE_UnSTARTED;  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.runningState  =  STATE_UnSTARTED;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_UnSTARTED;	      if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
4	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
5	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
6	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
7	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	1	add
8	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	1	add
9	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.runningState  =  STATE_RUNNING;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_RUNNING;	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
10	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	9	1	add
11	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	9	1	add
12	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	9	5	add
13	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	9	5	add
14	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
15	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
16	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
17	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
18	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
19	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
20	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
21	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	20	5	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	23	5	replace
23	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	23	5	replace
24	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	23	5	replace
25	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	23	5	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	3	1	add
27	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	3	1	add
28	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  StopTime  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        stopTime    =    System.currentTimeMillis();    StopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  StopTime	3	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	3	4	add
30	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	3	4	add
31	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
32	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
33	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
34	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
35	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  >=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
36	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  System.currentTimeMillis()  -  1;	      this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
37	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  System.currentTimeMillis()  +  1;	      this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
38	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.runningState  =  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  	8	None	replace
39	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	16	1	replace
40	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	16	1	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	16	5	replace
42	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState  ==  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	16	5	replace
43	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
44	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
45	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    if(this.runningState  >=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
46	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    If(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
47	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
48	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
49	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState  ==  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
50	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  >=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  if(this.runningState  >=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    if(this.runningState  >=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
51	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	18	1	add
52	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	18	1	add
53	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
54	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
55	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
56	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	18	5	add
57	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >>  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  incompatible  types  [FE]          IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >>  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >>  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	non-compiled	[CE]  incompatible  types	18	None	add
58	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
59	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
60	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  ==  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  ==  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
61	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  if(this.runningState  >=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    if(this.runningState  >=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
62	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	stopTime  =  System.currentTimeMillis()  -  1;	      stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
63	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	stopTime  =  System.currentTimeMillis()  +  1;	      stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
64	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.stopTime  =  System.currentTimeMillis();	      stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
65	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	14	5	replace
66	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  IllegalStateException  	14	5	replace
67	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	12	5	replace
68	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {	  if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	12	5	replace
69	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	5	add
70	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	5	add
71	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	5	add
72	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	5	add
73	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	5	add
74	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	5	add
75	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.runningState  =  STATE_STOPPED;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_STOPPED;	      this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
76	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.runningState  =  STATE_SPLIT;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_SPLIT;	      this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
77	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	1	5	add
78	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	1	5	add
79	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	1	5	add
80	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	1	5	add
81	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	1	None	add
82	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	1	5	add
83	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	1	5	add
84	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTING;  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.runningState  =  STATE_UNSTARTING;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_UNSTARTING;	      if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
85	[BUG]  [BUGGY]  This.runningState  =  STATE_UNSTARTED;  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  This.runningState  =  STATE_UNSTARTED;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	This.runningState  =  STATE_UNSTARTED;	      if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
86	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  long  this.runningState  =  System.currentTimeMillis();  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	long  this.runningState  =  System.currentTimeMillis();	      int    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  not  a  statement	24	None	replace
87	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	int  this.runningState  =  System.currentTimeMillis()  -  1;	      int    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  not  a  statement	24	None	replace
88	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	      if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
89	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >>  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  incompatible  types  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >>  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >>  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	non-compiled	[CE]  incompatible  types	20	None	add
90	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  System.currentTimeMillis()  -  startTime;	      this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
91	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	int  this.runningState  =  System.currentTimeMillis()  -  startTime;	      int    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  not  a  statement	24	None	replace
92	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
93	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
94	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	1	5	add
95	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	1	5	add
96	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	1	5	add
97	[BUG]  [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	1	5	add
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	3	1	add
99	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	3	1	add
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  AssertionFailedError  	14	5	replace
101	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    	compilable	  [FE]  AssertionFailedError  	14	5	replace
102	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	      if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
104	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING  &&  this.runningState  ==  STATE_UNSTARTED)  {	  if(this.runningState!=    STATE_RUNNING    &&    this.runningState    ==    STATE_SUSPENDED)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
105	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    ||    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
106	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  If(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    If(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
107	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  If(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  If(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_UNSTARTED)    {    If(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_UNSTARTED)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
108	[BUG]  [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UPSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  cannot  find  symbol  STATE_UPSTARTED  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UPSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UPSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	non-compiled	[CE]  cannot  find  symbol  STATE_UPSTARTED	20	None	add
109	[BUG]  [BUGGY]  this.runningState  =  STATE_UPSTARTED;  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  this.runningState  =  STATE_UPSTARTED;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	this.runningState  =  STATE_UPSTARTED;	      if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
110	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RONNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  cannot  find  symbol  STATE_RONNING  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RONNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RONNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	non-compiled	[CE]  cannot  find  symbol  STATE_RONNING	5	None	add
111	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
112	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]      if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	        if(this.runningState!=    STATE_RUNNING    &&    this.runningState!=    STATE_SUSPENDED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED  &&  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	5	5	add
113	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	add	if(this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	23	1	replace
114	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  [BUGGY]    throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	if(this.runningState!=  STATE_RUNNING)  {	  if(this.runningState!=    STATE_UNSTARTED    &&    this.runningState!=    STATE_SUSPENDED)    {    	compilable	  [FE]  IllegalStateException  	23	1	replace
115	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]    public  void  stop()  {    [BUGGY]  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
116	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  stopTime;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  void  stop()  {    [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]    if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	115	115	1	replace	int  this.runningState  =  System.currentTimeMillis()  -  stopTime;	      int    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  not  a  statement	24	None	replace
