bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  -  1;	      long    runTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	19	4	replace
2	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  -  1;	      long    runTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	19	4	replace
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  +  1;	      long    runTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	19	4	replace
4	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  +  1;	      long    runTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	19	4	replace
5	[BUG]  [BUGGY]  int  runTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  runTime  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  runTime  =  System.currentTimeMillis();	      long    runTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
6	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  this.runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  System.currentTimeMillis()  -  this.startTime;	      int    this.runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  not  a  statement	25	None	replace
7	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  this.startTime;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  System.currentTimeMillis()  /  this.startTime;	      int    this.runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  not  a  statement	25	None	replace
8	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  System.currentTimeMillis()  -  this.stopTime;	      int    this.runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  not  a  statement	25	None	replace
9	[BUG]  [BUGGY]      long  runTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runTime    =    System.currentTimeMillis();    long  runTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	18	None	add
10	[BUG]  [BUGGY]      long  runTime  =  System.currentTimeMillis();  int  runTime  =  System.currentTimeMillis();  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runTime  =  System.currentTimeMillis();  int  runTime  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runTime    =    System.currentTimeMillis();    int  runTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	18	None	add
11	[BUG]  [BUGGY]      long  runTime  =  System.currentTimeMillis();  Long  runTime  =  System.currentTimeMillis();  [CE]  variable  runTime  is  already  defined  in  method  getTime()  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runTime  =  System.currentTimeMillis();  Long  runTime  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runTime    =    System.currentTimeMillis();    Long  runTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runTime  is  already  defined  in  method  getTime()	18	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	        long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	18	1	add
13	[BUG]  [BUGGY]      long  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runTime  =  System.currentTimeMillis();  long  runningTime  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runTime    =    System.currentTimeMillis();    long  runningTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	18	1	add
14	[BUG]  [BUGGY]  long  this.runningState  =  getSplitState();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  this.runningState  =  getSplitState();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  getSplitState();	      int    this.runningState    =    getSplitState();    	non-compiled	[CE]  not  a  statement	6	None	replace
15	[BUG]  [BUGGY]  int  this.runningState  =  getSplitState()  -  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  getSplitState()  -  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  getSplitState()  -  1;	      int    this.runningState    =    getSplitState();    	non-compiled	[CE]  not  a  statement	6	None	replace
16	[BUG]  [BUGGY]  int  this.runningState  =  getSecondState();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  getSecondState();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  getSecondState();	      int    this.runningState    =    getSplitState();    	non-compiled	[CE]  not  a  statement	6	None	replace
17	[BUG]  [BUGGY]  int  startTime  =  this.runningState.getStartTime()  -  1;  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  startTime  =  this.runningState.getStartTime()  -  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  this.runningState.getStartTime()  -  1;	      int    startTime    =    this.runningState.getStartTime();    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
18	[BUG]  [BUGGY]  long  startTime  =  this.runningState.getStartTime();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  startTime  =  this.runningState.getStartTime();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  startTime  =  this.runningState.getStartTime();	      int    startTime    =    this.runningState.getStartTime();    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
19	[BUG]  [BUGGY]  int  startTime  =  this.runningState.getEndTime();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  startTime  =  this.runningState.getEndTime();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  this.runningState.getEndTime();	      int    startTime    =    this.runningState.getStartTime();    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  System.currentTimeMillis()  -  1;	      long    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	16	4	replace
21	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  System.currentTimeMillis()  -  1;	      long    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	16	4	replace
22	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  System.currentTimeMillis()  +  1;	      long    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	16	4	replace
23	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  System.currentTimeMillis()  +  1;	      long    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	16	4	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  /  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.stopTime  /  this.runningState;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	4	replace
25	[BUG]  [BUGGY]  return  this.stopTime  /  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  /  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  /  this.runningState;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	4	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  /  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  /  this.startTime;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	3	replace
27	[BUG]  [BUGGY]  return  this.runningState  /  this.startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  /  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  /  this.startTime;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	3	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  /  this.stopTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.startTime  /  this.stopTime;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	3	replace
29	[BUG]  [BUGGY]  return  this.startTime  /  this.stopTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  /  this.stopTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  /  this.stopTime;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	3	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.splitState  /  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.splitState  /  this.startTime;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	3	replace
31	[BUG]  [BUGGY]  return  this.splitState  /  this.startTime;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.splitState  /  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.splitState  /  this.startTime;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	3	replace
32	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  double  runningState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double  runningState  =  System.currentTimeMillis();	      int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	17	4	replace
33	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis();  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  double  runningState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double  runningState  =  System.currentTimeMillis();	      int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	17	4	replace
34	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  float  runningState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	float  runningState  =  System.currentTimeMillis();	      int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	17	4	replace
35	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis();  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  float  runningState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float  runningState  =  System.currentTimeMillis();	      int    runningState    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	17	4	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  /  this.startTime;	  return    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	14	3	replace
37	[BUG]  [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  /  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  /  this.startTime;	  return    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	14	3	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  -  this.runningState;	  return    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	14	4	replace
39	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  -  this.runningState;	  return    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	14	4	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  *  this.startTime;	  return    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	14	4	replace
41	[BUG]  [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  *  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  *  this.startTime;	  return    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	14	4	replace
42	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  return  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  return  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime;    return  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	13	None	add
43	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime;    long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	13	None	add
44	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  long  startTime  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	13	None	add
45	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime;    int  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	13	None	add
46	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  int  startTime  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	13	None	add
47	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	2	2	add
48	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	2	2	add
49	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  int  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      this.runningState  =  STATE_STOPPED;  int  this.runningState  =  STATE_STOPPED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        this.runningState    =    STATE_STOPPED;    int  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	2	None	add
50	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  it.runningState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  it  [FE]        IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      this.runningState  =  STATE_STOPPED;  it.runningState  =  STATE_STOPPED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        this.runningState    =    STATE_STOPPED;    it.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  cannot  find  symbol  it	2	None	add
51	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  that.runningState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  that  [FE]          IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      this.runningState  =  STATE_STOPPED;  that.runningState  =  STATE_STOPPED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        this.runningState    =    STATE_STOPPED;    that.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  cannot  find  symbol  that	2	None	add
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.startTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	10	4	replace
53	[BUG]  [BUGGY]  return  this.startTime  -  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  -  this.runningState;	  return    this.stopTime    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	10	4	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.stopTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  -  this.stopTime;	  return    this.stopTime    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	10	4	replace
55	[BUG]  [BUGGY]  return  this.runningState  -  this.stopTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.stopTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  this.stopTime;	  return    this.stopTime    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	10	4	replace
56	[BUG]  [BUGGY]  return  this.startTime  -  this.stopTime;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.stopTime;  long  startTime  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.stopTime;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	11	None	add
57	[BUG]  [BUGGY]  return  this.startTime  -  this.stopTime;  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.stopTime;  long  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.stopTime;    long  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	11	None	add
58	[BUG]  [BUGGY]  return  this.startTime  -  this.stopTime;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.stopTime;  int  startTime  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.stopTime;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
59	[BUG]  [BUGGY]  return  this.startTime  -  this.stopTime;  int  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.stopTime;  int  startTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.stopTime;    int  startTime  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
60	[BUG]  [BUGGY]  return  this.startTime  -  this.stopTime;  int  startTime  =  this.runningState.getStartTime();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.stopTime;  int  startTime  =  this.runningState.getStartTime();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.stopTime;    int  startTime  =  this.runningState.getStartTime();	  	non-compiled	[CE]  int  cannot  be  dereferenced	11	None	add
61	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime;  int  this.runningState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.startTime;  int  this.runningState  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime;    int  this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  not  a  statement	7	None	add
62	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime;  int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.startTime;  int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime;    int  this.runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  not  a  statement	7	None	add
63	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	7	None	add
64	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime;  return  this.runningState  -  this.startTime;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.startTime;  return  this.runningState  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime;    return  this.runningState  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	7	None	add
65	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	7	None	add
66	[BUG]  [BUGGY]      long  runningState  =  System.currentTimeMillis();  long  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runningState  =  System.currentTimeMillis();  long  runningState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runningState    =    System.currentTimeMillis();    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	15	None	add
67	[BUG]  [BUGGY]      long  runningState  =  System.currentTimeMillis();  int  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runningState  =  System.currentTimeMillis();  int  runningState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runningState    =    System.currentTimeMillis();    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	15	None	add
68	[BUG]  [BUGGY]      long  runningState  =  System.currentTimeMillis();  Long  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runningState  =  System.currentTimeMillis();  Long  runningState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runningState    =    System.currentTimeMillis();    Long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	15	None	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	        long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	15	1	add
70	[BUG]  [BUGGY]      long  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runningState  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runningState    =    System.currentTimeMillis();    long  runState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	15	1	add
71	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	this.runningState  =  STATE_SUSPENDED;	      this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	3	4	replace
72	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [FE]  RuntimeException  [FE]    IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_SUSPENDED;	      this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	3	4	replace
73	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  this.runningState  =  STATE_RUNNING;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	this.runningState  =  STATE_RUNNING;	      this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	3	4	replace
74	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  [FE]  RuntimeException  [FE]      IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  this.runningState  =  STATE_RUNNING;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_RUNNING;	      this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	3	4	replace
75	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	this.runningState  =  STATE_UNSTARTED;	      this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	3	4	replace
76	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  [FE]  RuntimeException  [FE]        IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_UNSTARTED;	      this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  RuntimeException  	3	4	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	12	3	replace
78	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  -  this.stopTime;	  return    this.startTime    -    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	12	3	replace
79	[BUG]  [BUGGY]  return  this.stopTime  /  this.startTime;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  /  this.startTime;  long  startTime  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.startTime;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	23	None	add
80	[BUG]  [BUGGY]  return  this.stopTime  /  this.startTime;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  /  this.startTime;  int  startTime  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.startTime;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	23	None	add
81	[BUG]  [BUGGY]  return  this.stopTime  /  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  /  this.startTime;  long  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.startTime;    long  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	23	None	add
82	[BUG]  [BUGGY]  return  this.stopTime  /  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  /  this.startTime;  int  startTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.startTime;    int  startTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	23	None	add
83	[BUG]  [BUGGY]  return  this.stopTime  /  this.startTime;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  /  this.startTime;  long  startTime  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.startTime;    long  startTime  =  System.currentTimeMillis()  /  this.startTime;	  	non-compiled	[CE]  unreachable  statement	23	None	add
84	[BUG]  [BUGGY]  long  this.runningState  =  System.currentTimeMillis();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  this.runningState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  System.currentTimeMillis();	      int    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  not  a  statement	1	None	replace
85	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  System.currentTimeMillis()  -  1;	      int    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  not  a  statement	1	None	replace
86	[BUG]  [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  System.currentTimeMillis()  +  1;	      int    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  not  a  statement	1	None	replace
87	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  System.currentTimeMillis()  /  this.startTime;	      long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	21	4	replace
88	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runningState  =  System.currentTimeMillis()  /  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  System.currentTimeMillis()  /  this.startTime;	      long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	21	4	replace
89	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  System.currentTimeMillis()  -  this.runningState;	      long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	21	4	replace
90	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  System.currentTimeMillis()  -  this.runningState;	      long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	21	4	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.splitState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  -  this.splitState;	  return    this.runningState    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	8	4	replace
92	[BUG]  [BUGGY]  return  this.runningState  -  this.splitState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.splitState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  this.splitState;	  return    this.runningState    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	8	4	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.startTime  +  1;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.runningState  -  this.startTime  +  1;	  return    this.runningState    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	8	4	replace
94	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.startTime  +  1;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.runningState  -  this.startTime  +  1;	  return    this.runningState    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	8	4	replace
95	[BUG]  [BUGGY]  long  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  this.runningState  =  STATE_STOPPED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  this.runningState  =  STATE_STOPPED;	      int    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	4	None	replace
96	[BUG]  [BUGGY]  int  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  STATE_SUSPENDED;	      int    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	4	None	replace
97	[BUG]  [BUGGY]  int  this.runningState  =  STATE_RUNNING;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  STATE_RUNNING;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  STATE_RUNNING;	      int    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	4	None	replace
98	[BUG]  [BUGGY]  int  this.runningState  =  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  STATE_UNSTARTED;	      int    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	4	None	replace
99	[BUG]  [BUGGY]      long  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	20	None	add
100	[BUG]  [BUGGY]      long  runningState  =  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runningState  =  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runningState    =    System.currentTimeMillis()    -    this.startTime;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	20	None	add
101	[BUG]  [BUGGY]      long  runningState  =  System.currentTimeMillis()  -  this.startTime;  Long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runningState  =  System.currentTimeMillis()  -  this.startTime;  Long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runningState    =    System.currentTimeMillis()    -    this.startTime;    Long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	20	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	        long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
103	[BUG]  [BUGGY]      long  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runningState  =  System.currentTimeMillis()  -  this.startTime;  long  runState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runningState    =    System.currentTimeMillis()    -    this.startTime;    long  runState  =  System.currentTimeMillis()  -  this.startTime;	  	compilable	  [FE]  AssertionFailedError  	20	1	add
104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	double  runningState  =  System.currentTimeMillis()  -  this.startTime;	      int    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	22	4	replace
105	[BUG]  [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  double  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	double  runningState  =  System.currentTimeMillis()  -  this.startTime;	      int    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	22	4	replace
106	[BUG]  [BUGGY]  short  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  short  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	short  runningState  =  System.currentTimeMillis()  -  this.startTime;	      int    runningState    =    System.currentTimeMillis()    -    this.startTime;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
107	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    long  this.runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  not  a  statement	9	None	add
108	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  long  startTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  long  startTime  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    long  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	9	None	add
109	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  long  runTime  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  long  runTime  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    long  runTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	9	None	add
110	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  int  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  int  startTime  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    int  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	9	None	add
111	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  long  startTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    long  startTime  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	9	None	add
112	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  long  runningState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    long  runningState  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	9	None	add
113	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  long  runningState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  long  runningState  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	9	None	add
114	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  return  this.stopTime  -  this.runningState;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  return  this.stopTime  -  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    return  this.stopTime  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	9	None	add
115	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  int  runningState  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	9	None	add
116	[BUG]  [BUGGY]  int  this.runningState  =  getSplitState()  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  getSplitState()  +  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  getSplitState()  +  1;	      int    this.runningState    =    getSplitState();    	non-compiled	[CE]  not  a  statement	6	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  *  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.stopTime  *  this.startTime;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	4	replace
118	[BUG]  [BUGGY]  return  this.stopTime  *  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  *  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  *  this.startTime;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	4	replace
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  /  this.splitState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.stopTime  /  this.splitState;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	4	replace
120	[BUG]  [BUGGY]  return  this.stopTime  /  this.splitState;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  /  this.splitState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  /  this.splitState;	  return    this.stopTime    /    this.startTime;    	compilable	  [FE]  AssertionFailedError  	24	4	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  System.currentTimeMillis()  -  this.startTime  +  1;	  return    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
122	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.startTime  +  1;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  System.currentTimeMillis()  -  this.startTime  +  1;	  return    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
123	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	13	None	add
124	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	13	None	add
125	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  This.runningState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  This  [FE]    IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      this.runningState  =  STATE_STOPPED;  This.runningState  =  STATE_STOPPED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        this.runningState    =    STATE_STOPPED;    This.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  cannot  find  symbol  This	2	None	add
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  *  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.stopTime  *  this.runningState;	  return    this.stopTime    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	10	4	replace
127	[BUG]  [BUGGY]  return  this.stopTime  *  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  *  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  *  this.runningState;	  return    this.stopTime    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	10	4	replace
128	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runningState  =  System.currentTimeMillis()  -  this.stopTime;	      long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	21	4	replace
129	[BUG]  [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runningState  =  System.currentTimeMillis()  -  this.stopTime;	      long    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	21	4	replace
130	[BUG]  [BUGGY]  int  this.runningState  =  0;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  0;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  0;	      int    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	4	None	replace
131	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime;  long  runningState  =  System.currentTimeMillis();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.startTime;  long  runningState  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime;    long  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  unreachable  statement	7	None	add
132	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.startTime;  int  runningState  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	7	None	add
133	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.startTime;  int  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime;    int  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  possible  loss  of  precision	7	None	add
134	[BUG]  [BUGGY]  return  this.startTime  -  this.stopTime;  int  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.stopTime;  int  runningState  =  System.currentTimeMillis();  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.stopTime;    int  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	11	None	add
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	long  runTime  =  System.currentTimeMillis()  -  this.startTime;	      long    runTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	19	4	replace
136	[BUG]  [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	long  runTime  =  System.currentTimeMillis()  -  this.startTime;	      long    runTime    =    System.currentTimeMillis();    	compilable	  [FE]  RuntimeException  	19	4	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.splitState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.startTime  -  this.splitState;	  return    this.startTime    -    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	12	3	replace
138	[BUG]  [BUGGY]  return  this.startTime  -  this.splitState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.splitState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.startTime  -  this.splitState;	  return    this.startTime    -    this.stopTime;    	compilable	  [FE]  AssertionFailedError  	12	3	replace
139	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	float  runningState  =  System.currentTimeMillis()  -  this.startTime;	      int    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	22	4	replace
140	[BUG]  [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  float  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	float  runningState  =  System.currentTimeMillis()  -  this.startTime;	      int    runningState    =    System.currentTimeMillis()    -    this.startTime;    	compilable	  [FE]  RuntimeException  	22	4	replace
141	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED;	      this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	3	None	replace
142	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      IllegalStateException    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  this.runningState  =  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	this.runningState  =  STATE_STOPPED  ||  this.runningState!=  STATE_SUSPENDED;	      this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	3	None	replace
143	[BUG]  [BUGGY]  return  this.runningState  -  this.startTime;  long  runningState  =  this.runningState  -  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.runningState  -  this.startTime;  long  runningState  =  this.runningState  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.runningState    -    this.startTime;    long  runningState  =  this.runningState  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	7	None	add
144	[BUG]  [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  System.currentTimeMillis()  -  this.startTime;  long  runTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    System.currentTimeMillis()    -    this.startTime;    long  runTime  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	13	None	add
145	[BUG]  [BUGGY]      long  runningState  =  System.currentTimeMillis();  short  runningState  =  System.currentTimeMillis();  [CE]  variable  runningState  is  already  defined  in  method  getTime()  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]      long  runningState  =  System.currentTimeMillis();  short  runningState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	        long    runningState    =    System.currentTimeMillis();    short  runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  runningState  is  already  defined  in  method  getTime()	15	None	add
146	[BUG]  [BUGGY]  int  this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED;	      int    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	4	None	replace
147	[BUG]  [BUGGY]  int  this.runningState  =  STATE_STOPPED  -  1;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  this.runningState  =  STATE_STOPPED  -  1;  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  this.runningState  =  STATE_STOPPED  -  1;	      int    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  not  a  statement	4	None	replace
148	[BUG]  [BUGGY]  return  this.startTime  -  this.stopTime;  long  runTime  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.stopTime;  long  runTime  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.stopTime;    long  runTime  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	11	None	add
149	[BUG]  [BUGGY]  return  this.startTime  -  this.stopTime;  return  this.startTime  -  this.stopTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.stopTime;  return  this.startTime  -  this.stopTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.stopTime;    return  this.startTime  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	11	None	add
150	[BUG]  [BUGGY]  return  this.startTime  -  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.startTime  -  this.stopTime;  long  runningState  =  System.currentTimeMillis()  -  this.stopTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.startTime    -    this.stopTime;    long  runningState  =  System.currentTimeMillis()  -  this.stopTime;	  	non-compiled	[CE]  unreachable  statement	11	None	add
151	[BUG]  [BUGGY]  return  this.stopTime  /  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  /  this.startTime;  long  runningState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.startTime;    long  runningState  =  System.currentTimeMillis()  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	23	None	add
152	[BUG]  [BUGGY]  return  this.stopTime  /  this.startTime;  long  runningState  =  this.stopTime  -  this.startTime;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  /  this.startTime;  long  runningState  =  this.stopTime  -  this.startTime;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    /    this.startTime;    long  runningState  =  this.stopTime  -  this.startTime;	  	non-compiled	[CE]  unreachable  statement	23	None	add
153	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  long  runningState  =  this.stopTime  -  this.runningState;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  long  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    long  runningState  =  this.stopTime  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	9	None	add
154	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  long  runTime  =  System.currentTimeMillis()  -  this.runningState;  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  long  runTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    long  runTime  =  System.currentTimeMillis()  -  this.runningState;	  	non-compiled	[CE]  unreachable  statement	9	None	add
155	[BUG]  [BUGGY]  return  this.stopTime  -  this.runningState;  int  runningState  =  this.stopTime  -  this.runningState;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  -  this.runningState;  int  runningState  =  this.stopTime  -  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return    this.stopTime    -    this.runningState;    int  runningState  =  this.stopTime  -  this.runningState;	  	non-compiled	[CE]  possible  loss  of  precision	9	None	add
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  +  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	add	return  this.stopTime  +  this.runningState;	  return    this.stopTime    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	10	4	replace
157	[BUG]  [BUGGY]  return  this.stopTime  +  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  return  this.stopTime  +  this.runningState;  [BUGGY]    }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	return  this.stopTime  +  this.runningState;	  return    this.stopTime    -    this.runningState;    	compilable	  [FE]  AssertionFailedError  	10	4	replace
158	[BUG]  [BUGGY]  int  startTime  =  this.runningState.currentTimeMillis();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  int  startTime  =  this.runningState.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	int  startTime  =  this.runningState.currentTimeMillis();	      int    startTime    =    this.runningState.getStartTime();    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
159	[BUG]  [BUGGY]  short  runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  long  getTime()  {  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState  ==  STATE_SUSPENDED)  {    [BUGGY]  short  runningState  =  System.currentTimeMillis();  [BUGGY]    return  this.stopTime  -  this.startTime;  }  else  if(this.runningState  ==  STATE_UNSTARTED)  {  return  0;  }  else  if(this.runningState  ==  STATE_RUNNING)  {  return  System.currentTimeMillis()  -  this.startTime;  }  throw  new  RuntimeException(   "Illegal  running  state  has  occured.     ");  }  [CLASS]  StopWatch  [METHOD]  getTime  [RETURN_TYPE]  long  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.5	210	210	1	replace	short  runningState  =  System.currentTimeMillis();	      int    runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
