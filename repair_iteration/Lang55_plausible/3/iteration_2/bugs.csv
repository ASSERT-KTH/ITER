bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  STATE_STOPPED;	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
4	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  stopTime;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  System.currentTimeMillis()  -  stopTime;	  this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
10	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
12	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
14	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
15	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  possible  loss  of  precision	13	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
17	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
18	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.runningState  =  STATE_RUNNING;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  STATE_RUNNING;	      this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
19	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  STATE_UNSTARTED;	      this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
20	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.runningState  =  STATE_SUSPENDED;	      this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
21	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  STATE_SPLIT;	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	stopTime  =  System.currentTimeMillis()  -  1;	      stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
25	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	stopTime  =  System.currentTimeMillis()  +  1;	      stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
26	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	9	2	add
29	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	9	2	add
30	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
31	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
32	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
33	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
34	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
35	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
37	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
39	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
40	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
42	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
43	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
44	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	2	add
45	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	2	add
46	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	2	add
47	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspension.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	2	add
48	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	2	add
49	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	2	add
50	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  int  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	int  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
51	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis();  [BUGGY]      [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
52	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	5	2	add
53	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	5	2	add
54	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	5	None	add
55	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	5	2	add
56	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	5	2	add
57	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
59	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
61	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
62	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
64	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
65	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	1	2	add
66	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	1	2	add
67	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    Stopwatch.this.stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
68	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis()  -  1;	  this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
69	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis()  +  1;	  this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
70	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	13	None	add
71	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
72	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	9	2	add
73	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        this.runningState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	9	2	add
74	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
75	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
76	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	5	2	add
77	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  IllegalStateException  	5	2	add
78	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	5	None	add
79	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	2	add
80	[BUG]  [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  }	  	compilable	  [FE]  IllegalStateException  	7	2	add
81	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
82	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
83	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
84	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.startTime  =  System.currentTimeMillis()  -  stopTime;	  this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
85	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
86	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
87	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis();  [BUGGY]      [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
88	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.splitState  =  System.currentTimeMillis()  -  1;	  this.splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
89	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
91	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
92	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  long  splitState  =  System.currentTimeMillis();  [BUGGY]      [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
93	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	long  splitState  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();	  long    splitState    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	3	2	add
95	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	3	2	add
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
97	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
99	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
100	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	5	2	add
101	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  IllegalStateException  	5	2	add
102	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	5	2	add
103	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  IllegalStateException  	5	2	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	2	add
105	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	13	2	add
106	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  possible  loss  of  precision	13	None	add
107	[BUG]  [BUGGY]  if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.splitState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
108	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
109	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	      stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
111	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
113	[BUG]  [BUGGY]      stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
114	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	      stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
115	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]  throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	throw  new  IllegalStateException( "Stopwatch  must  be  running  to  suspend.   ");	      if(this.runningState!=    STATE_RUNNING)    {    throw    new    IllegalStateException(   "Stopwatch    must    be    running    to    suspend.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
116	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
117	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
118	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	add	        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
119	[BUG]  [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(   "Stopwatch  must  be  running  to  suspend.     ");  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;    [BUGGY]      this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	181	181	1	replace	        this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  IllegalStateException  	9	2	add
